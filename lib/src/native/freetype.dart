// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Generated bindings to the FreeType font handling library
class FreetypeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FreetypeLibrary(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FreetypeLibrary.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> Error_String(
    int error_code,
  ) {
    return _Error_String(
      error_code,
    );
  }

  late final _Error_StringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(FT_Error)>>('FT_Error_String');
  late final _Error_String = _Error_StringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int Init_FreeType(
    ffi.Pointer<FT_Library> alibrary,
  ) {
    return _Init_FreeType(
      alibrary,
    );
  }

  late final _Init_FreeTypePtr =
      _lookup<ffi.NativeFunction<FT_Error Function(ffi.Pointer<FT_Library>)>>('FT_Init_FreeType');
  late final _Init_FreeType = _Init_FreeTypePtr.asFunction<int Function(ffi.Pointer<FT_Library>)>();

  int Done_FreeType(
    FT_Library library1,
  ) {
    return _Done_FreeType(
      library1,
    );
  }

  late final _Done_FreeTypePtr = _lookup<ffi.NativeFunction<FT_Error Function(FT_Library)>>('FT_Done_FreeType');
  late final _Done_FreeType = _Done_FreeTypePtr.asFunction<int Function(FT_Library)>();

  int New_Face(
    FT_Library library1,
    ffi.Pointer<ffi.Char> filepathname,
    int face_index,
    ffi.Pointer<FT_Face> aface,
  ) {
    return _New_Face(
      library1,
      filepathname,
      face_index,
      aface,
    );
  }

  late final _New_FacePtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Library, ffi.Pointer<ffi.Char>, FT_Long, ffi.Pointer<FT_Face>)>>(
          'FT_New_Face');
  late final _New_Face =
      _New_FacePtr.asFunction<int Function(FT_Library, ffi.Pointer<ffi.Char>, int, ffi.Pointer<FT_Face>)>();

  int New_Memory_Face(
    FT_Library library1,
    ffi.Pointer<FT_Byte> file_base,
    int file_size,
    int face_index,
    ffi.Pointer<FT_Face> aface,
  ) {
    return _New_Memory_Face(
      library1,
      file_base,
      file_size,
      face_index,
      aface,
    );
  }

  late final _New_Memory_FacePtr = _lookup<
          ffi
          .NativeFunction<FT_Error Function(FT_Library, ffi.Pointer<FT_Byte>, FT_Long, FT_Long, ffi.Pointer<FT_Face>)>>(
      'FT_New_Memory_Face');
  late final _New_Memory_Face =
      _New_Memory_FacePtr.asFunction<int Function(FT_Library, ffi.Pointer<FT_Byte>, int, int, ffi.Pointer<FT_Face>)>();

  int Open_Face(
    FT_Library library1,
    ffi.Pointer<FT_Open_Args> args,
    int face_index,
    ffi.Pointer<FT_Face> aface,
  ) {
    return _Open_Face(
      library1,
      args,
      face_index,
      aface,
    );
  }

  late final _Open_FacePtr = _lookup<
          ffi.NativeFunction<FT_Error Function(FT_Library, ffi.Pointer<FT_Open_Args>, FT_Long, ffi.Pointer<FT_Face>)>>(
      'FT_Open_Face');
  late final _Open_Face =
      _Open_FacePtr.asFunction<int Function(FT_Library, ffi.Pointer<FT_Open_Args>, int, ffi.Pointer<FT_Face>)>();

  int Attach_File(
    FT_Face face,
    ffi.Pointer<ffi.Char> filepathname,
  ) {
    return _Attach_File(
      face,
      filepathname,
    );
  }

  late final _Attach_FilePtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, ffi.Pointer<ffi.Char>)>>('FT_Attach_File');
  late final _Attach_File = _Attach_FilePtr.asFunction<int Function(FT_Face, ffi.Pointer<ffi.Char>)>();

  int Attach_Stream(
    FT_Face face,
    ffi.Pointer<FT_Open_Args> parameters,
  ) {
    return _Attach_Stream(
      face,
      parameters,
    );
  }

  late final _Attach_StreamPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, ffi.Pointer<FT_Open_Args>)>>('FT_Attach_Stream');
  late final _Attach_Stream = _Attach_StreamPtr.asFunction<int Function(FT_Face, ffi.Pointer<FT_Open_Args>)>();

  int Reference_Face(
    FT_Face face,
  ) {
    return _Reference_Face(
      face,
    );
  }

  late final _Reference_FacePtr = _lookup<ffi.NativeFunction<FT_Error Function(FT_Face)>>('FT_Reference_Face');
  late final _Reference_Face = _Reference_FacePtr.asFunction<int Function(FT_Face)>();

  int Done_Face(
    FT_Face face,
  ) {
    return _Done_Face(
      face,
    );
  }

  late final _Done_FacePtr = _lookup<ffi.NativeFunction<FT_Error Function(FT_Face)>>('FT_Done_Face');
  late final _Done_Face = _Done_FacePtr.asFunction<int Function(FT_Face)>();

  int Select_Size(
    FT_Face face,
    int strike_index,
  ) {
    return _Select_Size(
      face,
      strike_index,
    );
  }

  late final _Select_SizePtr = _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_Int)>>('FT_Select_Size');
  late final _Select_Size = _Select_SizePtr.asFunction<int Function(FT_Face, int)>();

  int Request_Size(
    FT_Face face,
    FT_Size_Request req,
  ) {
    return _Request_Size(
      face,
      req,
    );
  }

  late final _Request_SizePtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_Size_Request)>>('FT_Request_Size');
  late final _Request_Size = _Request_SizePtr.asFunction<int Function(FT_Face, FT_Size_Request)>();

  int Set_Char_Size(
    FT_Face face,
    int char_width,
    int char_height,
    int horz_resolution,
    int vert_resolution,
  ) {
    return _Set_Char_Size(
      face,
      char_width,
      char_height,
      horz_resolution,
      vert_resolution,
    );
  }

  late final _Set_Char_SizePtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_F26Dot6, FT_F26Dot6, FT_UInt, FT_UInt)>>(
          'FT_Set_Char_Size');
  late final _Set_Char_Size = _Set_Char_SizePtr.asFunction<int Function(FT_Face, int, int, int, int)>();

  int Set_Pixel_Sizes(
    FT_Face face,
    int pixel_width,
    int pixel_height,
  ) {
    return _Set_Pixel_Sizes(
      face,
      pixel_width,
      pixel_height,
    );
  }

  late final _Set_Pixel_SizesPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_UInt, FT_UInt)>>('FT_Set_Pixel_Sizes');
  late final _Set_Pixel_Sizes = _Set_Pixel_SizesPtr.asFunction<int Function(FT_Face, int, int)>();

  int Load_Glyph(
    FT_Face face,
    int glyph_index,
    int load_flags,
  ) {
    return _Load_Glyph(
      face,
      glyph_index,
      load_flags,
    );
  }

  late final _Load_GlyphPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_UInt, FT_Int32)>>('FT_Load_Glyph');
  late final _Load_Glyph = _Load_GlyphPtr.asFunction<int Function(FT_Face, int, int)>();

  int Load_Char(
    FT_Face face,
    int char_code,
    int load_flags,
  ) {
    return _Load_Char(
      face,
      char_code,
      load_flags,
    );
  }

  late final _Load_CharPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_ULong, FT_Int32)>>('FT_Load_Char');
  late final _Load_Char = _Load_CharPtr.asFunction<int Function(FT_Face, int, int)>();

  void Set_Transform(
    FT_Face face,
    ffi.Pointer<FT_Matrix> matrix,
    ffi.Pointer<FT_Vector> delta,
  ) {
    return _Set_Transform(
      face,
      matrix,
      delta,
    );
  }

  late final _Set_TransformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FT_Face, ffi.Pointer<FT_Matrix>, ffi.Pointer<FT_Vector>)>>(
          'FT_Set_Transform');
  late final _Set_Transform =
      _Set_TransformPtr.asFunction<void Function(FT_Face, ffi.Pointer<FT_Matrix>, ffi.Pointer<FT_Vector>)>();

  void Get_Transform(
    FT_Face face,
    ffi.Pointer<FT_Matrix> matrix,
    ffi.Pointer<FT_Vector> delta,
  ) {
    return _Get_Transform(
      face,
      matrix,
      delta,
    );
  }

  late final _Get_TransformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FT_Face, ffi.Pointer<FT_Matrix>, ffi.Pointer<FT_Vector>)>>(
          'FT_Get_Transform');
  late final _Get_Transform =
      _Get_TransformPtr.asFunction<void Function(FT_Face, ffi.Pointer<FT_Matrix>, ffi.Pointer<FT_Vector>)>();

  int Render_Glyph(
    FT_GlyphSlot slot,
    int render_mode,
  ) {
    return _Render_Glyph(
      slot,
      render_mode,
    );
  }

  late final _Render_GlyphPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_GlyphSlot, ffi.Int32)>>('FT_Render_Glyph');
  late final _Render_Glyph = _Render_GlyphPtr.asFunction<int Function(FT_GlyphSlot, int)>();

  int Get_Kerning(
    FT_Face face,
    int left_glyph,
    int right_glyph,
    int kern_mode,
    ffi.Pointer<FT_Vector> akerning,
  ) {
    return _Get_Kerning(
      face,
      left_glyph,
      right_glyph,
      kern_mode,
      akerning,
    );
  }

  late final _Get_KerningPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_UInt, FT_UInt, FT_UInt, ffi.Pointer<FT_Vector>)>>(
          'FT_Get_Kerning');
  late final _Get_Kerning = _Get_KerningPtr.asFunction<int Function(FT_Face, int, int, int, ffi.Pointer<FT_Vector>)>();

  int Get_Track_Kerning(
    FT_Face face,
    int point_size,
    int degree,
    ffi.Pointer<FT_Fixed> akerning,
  ) {
    return _Get_Track_Kerning(
      face,
      point_size,
      degree,
      akerning,
    );
  }

  late final _Get_Track_KerningPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_Fixed, FT_Int, ffi.Pointer<FT_Fixed>)>>(
          'FT_Get_Track_Kerning');
  late final _Get_Track_Kerning =
      _Get_Track_KerningPtr.asFunction<int Function(FT_Face, int, int, ffi.Pointer<FT_Fixed>)>();

  int Get_Glyph_Name(
    FT_Face face,
    int glyph_index,
    FT_Pointer buffer,
    int buffer_max,
  ) {
    return _Get_Glyph_Name(
      face,
      glyph_index,
      buffer,
      buffer_max,
    );
  }

  late final _Get_Glyph_NamePtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_UInt, FT_Pointer, FT_UInt)>>('FT_Get_Glyph_Name');
  late final _Get_Glyph_Name = _Get_Glyph_NamePtr.asFunction<int Function(FT_Face, int, FT_Pointer, int)>();

  ffi.Pointer<ffi.Char> Get_Postscript_Name(
    FT_Face face,
  ) {
    return _Get_Postscript_Name(
      face,
    );
  }

  late final _Get_Postscript_NamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(FT_Face)>>('FT_Get_Postscript_Name');
  late final _Get_Postscript_Name = _Get_Postscript_NamePtr.asFunction<ffi.Pointer<ffi.Char> Function(FT_Face)>();

  int Select_Charmap(
    FT_Face face,
    int encoding,
  ) {
    return _Select_Charmap(
      face,
      encoding,
    );
  }

  late final _Select_CharmapPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, ffi.Int32)>>('FT_Select_Charmap');
  late final _Select_Charmap = _Select_CharmapPtr.asFunction<int Function(FT_Face, int)>();

  int Set_Charmap(
    FT_Face face,
    FT_CharMap charmap,
  ) {
    return _Set_Charmap(
      face,
      charmap,
    );
  }

  late final _Set_CharmapPtr = _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_CharMap)>>('FT_Set_Charmap');
  late final _Set_Charmap = _Set_CharmapPtr.asFunction<int Function(FT_Face, FT_CharMap)>();

  int Get_Charmap_Index(
    FT_CharMap charmap,
  ) {
    return _Get_Charmap_Index(
      charmap,
    );
  }

  late final _Get_Charmap_IndexPtr = _lookup<ffi.NativeFunction<FT_Int Function(FT_CharMap)>>('FT_Get_Charmap_Index');
  late final _Get_Charmap_Index = _Get_Charmap_IndexPtr.asFunction<int Function(FT_CharMap)>();

  int Get_Char_Index(
    FT_Face face,
    int charcode,
  ) {
    return _Get_Char_Index(
      face,
      charcode,
    );
  }

  late final _Get_Char_IndexPtr = _lookup<ffi.NativeFunction<FT_UInt Function(FT_Face, FT_ULong)>>('FT_Get_Char_Index');
  late final _Get_Char_Index = _Get_Char_IndexPtr.asFunction<int Function(FT_Face, int)>();

  int Get_First_Char(
    FT_Face face,
    ffi.Pointer<FT_UInt> agindex,
  ) {
    return _Get_First_Char(
      face,
      agindex,
    );
  }

  late final _Get_First_CharPtr =
      _lookup<ffi.NativeFunction<FT_ULong Function(FT_Face, ffi.Pointer<FT_UInt>)>>('FT_Get_First_Char');
  late final _Get_First_Char = _Get_First_CharPtr.asFunction<int Function(FT_Face, ffi.Pointer<FT_UInt>)>();

  int Get_Next_Char(
    FT_Face face,
    int char_code,
    ffi.Pointer<FT_UInt> agindex,
  ) {
    return _Get_Next_Char(
      face,
      char_code,
      agindex,
    );
  }

  late final _Get_Next_CharPtr =
      _lookup<ffi.NativeFunction<FT_ULong Function(FT_Face, FT_ULong, ffi.Pointer<FT_UInt>)>>('FT_Get_Next_Char');
  late final _Get_Next_Char = _Get_Next_CharPtr.asFunction<int Function(FT_Face, int, ffi.Pointer<FT_UInt>)>();

  int Face_Properties(
    FT_Face face,
    int num_properties,
    ffi.Pointer<FT_Parameter> properties,
  ) {
    return _Face_Properties(
      face,
      num_properties,
      properties,
    );
  }

  late final _Face_PropertiesPtr =
      _lookup<ffi.NativeFunction<FT_Error Function(FT_Face, FT_UInt, ffi.Pointer<FT_Parameter>)>>('FT_Face_Properties');
  late final _Face_Properties = _Face_PropertiesPtr.asFunction<int Function(FT_Face, int, ffi.Pointer<FT_Parameter>)>();

  int Get_Name_Index(
    FT_Face face,
    ffi.Pointer<FT_String> glyph_name,
  ) {
    return _Get_Name_Index(
      face,
      glyph_name,
    );
  }

  late final _Get_Name_IndexPtr =
      _lookup<ffi.NativeFunction<FT_UInt Function(FT_Face, ffi.Pointer<FT_String>)>>('FT_Get_Name_Index');
  late final _Get_Name_Index = _Get_Name_IndexPtr.asFunction<int Function(FT_Face, ffi.Pointer<FT_String>)>();

  int Get_SubGlyph_Info(
    FT_GlyphSlot glyph,
    int sub_index,
    ffi.Pointer<FT_Int> p_index,
    ffi.Pointer<FT_UInt> p_flags,
    ffi.Pointer<FT_Int> p_arg1,
    ffi.Pointer<FT_Int> p_arg2,
    ffi.Pointer<FT_Matrix> p_transform,
  ) {
    return _Get_SubGlyph_Info(
      glyph,
      sub_index,
      p_index,
      p_flags,
      p_arg1,
      p_arg2,
      p_transform,
    );
  }

  late final _Get_SubGlyph_InfoPtr = _lookup<
      ffi.NativeFunction<
          FT_Error Function(FT_GlyphSlot, FT_UInt, ffi.Pointer<FT_Int>, ffi.Pointer<FT_UInt>, ffi.Pointer<FT_Int>,
              ffi.Pointer<FT_Int>, ffi.Pointer<FT_Matrix>)>>('FT_Get_SubGlyph_Info');
  late final _Get_SubGlyph_Info = _Get_SubGlyph_InfoPtr.asFunction<
      int Function(FT_GlyphSlot, int, ffi.Pointer<FT_Int>, ffi.Pointer<FT_UInt>, ffi.Pointer<FT_Int>,
          ffi.Pointer<FT_Int>, ffi.Pointer<FT_Matrix>)>();

  int Get_FSType_Flags(
    FT_Face face,
  ) {
    return _Get_FSType_Flags(
      face,
    );
  }

  late final _Get_FSType_FlagsPtr = _lookup<ffi.NativeFunction<FT_UShort Function(FT_Face)>>('FT_Get_FSType_Flags');
  late final _Get_FSType_Flags = _Get_FSType_FlagsPtr.asFunction<int Function(FT_Face)>();

  int Face_GetCharVariantIndex(
    FT_Face face,
    int charcode,
    int variantSelector,
  ) {
    return _Face_GetCharVariantIndex(
      face,
      charcode,
      variantSelector,
    );
  }

  late final _Face_GetCharVariantIndexPtr =
      _lookup<ffi.NativeFunction<FT_UInt Function(FT_Face, FT_ULong, FT_ULong)>>('FT_Face_GetCharVariantIndex');
  late final _Face_GetCharVariantIndex = _Face_GetCharVariantIndexPtr.asFunction<int Function(FT_Face, int, int)>();

  int Face_GetCharVariantIsDefault(
    FT_Face face,
    int charcode,
    int variantSelector,
  ) {
    return _Face_GetCharVariantIsDefault(
      face,
      charcode,
      variantSelector,
    );
  }

  late final _Face_GetCharVariantIsDefaultPtr =
      _lookup<ffi.NativeFunction<FT_Int Function(FT_Face, FT_ULong, FT_ULong)>>('FT_Face_GetCharVariantIsDefault');
  late final _Face_GetCharVariantIsDefault =
      _Face_GetCharVariantIsDefaultPtr.asFunction<int Function(FT_Face, int, int)>();

  ffi.Pointer<FT_UInt32> Face_GetVariantSelectors(
    FT_Face face,
  ) {
    return _Face_GetVariantSelectors(
      face,
    );
  }

  late final _Face_GetVariantSelectorsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FT_UInt32> Function(FT_Face)>>('FT_Face_GetVariantSelectors');
  late final _Face_GetVariantSelectors =
      _Face_GetVariantSelectorsPtr.asFunction<ffi.Pointer<FT_UInt32> Function(FT_Face)>();

  ffi.Pointer<FT_UInt32> Face_GetVariantsOfChar(
    FT_Face face,
    int charcode,
  ) {
    return _Face_GetVariantsOfChar(
      face,
      charcode,
    );
  }

  late final _Face_GetVariantsOfCharPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FT_UInt32> Function(FT_Face, FT_ULong)>>('FT_Face_GetVariantsOfChar');
  late final _Face_GetVariantsOfChar =
      _Face_GetVariantsOfCharPtr.asFunction<ffi.Pointer<FT_UInt32> Function(FT_Face, int)>();

  ffi.Pointer<FT_UInt32> Face_GetCharsOfVariant(
    FT_Face face,
    int variantSelector,
  ) {
    return _Face_GetCharsOfVariant(
      face,
      variantSelector,
    );
  }

  late final _Face_GetCharsOfVariantPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FT_UInt32> Function(FT_Face, FT_ULong)>>('FT_Face_GetCharsOfVariant');
  late final _Face_GetCharsOfVariant =
      _Face_GetCharsOfVariantPtr.asFunction<ffi.Pointer<FT_UInt32> Function(FT_Face, int)>();

  int MulDiv(
    int a,
    int b,
    int c,
  ) {
    return _MulDiv(
      a,
      b,
      c,
    );
  }

  late final _MulDivPtr = _lookup<ffi.NativeFunction<FT_Long Function(FT_Long, FT_Long, FT_Long)>>('FT_MulDiv');
  late final _MulDiv = _MulDivPtr.asFunction<int Function(int, int, int)>();

  int MulFix(
    int a,
    int b,
  ) {
    return _MulFix(
      a,
      b,
    );
  }

  late final _MulFixPtr = _lookup<ffi.NativeFunction<FT_Long Function(FT_Long, FT_Long)>>('FT_MulFix');
  late final _MulFix = _MulFixPtr.asFunction<int Function(int, int)>();

  int DivFix(
    int a,
    int b,
  ) {
    return _DivFix(
      a,
      b,
    );
  }

  late final _DivFixPtr = _lookup<ffi.NativeFunction<FT_Long Function(FT_Long, FT_Long)>>('FT_DivFix');
  late final _DivFix = _DivFixPtr.asFunction<int Function(int, int)>();

  int RoundFix(
    int a,
  ) {
    return _RoundFix(
      a,
    );
  }

  late final _RoundFixPtr = _lookup<ffi.NativeFunction<FT_Fixed Function(FT_Fixed)>>('FT_RoundFix');
  late final _RoundFix = _RoundFixPtr.asFunction<int Function(int)>();

  int CeilFix(
    int a,
  ) {
    return _CeilFix(
      a,
    );
  }

  late final _CeilFixPtr = _lookup<ffi.NativeFunction<FT_Fixed Function(FT_Fixed)>>('FT_CeilFix');
  late final _CeilFix = _CeilFixPtr.asFunction<int Function(int)>();

  int FloorFix(
    int a,
  ) {
    return _FloorFix(
      a,
    );
  }

  late final _FloorFixPtr = _lookup<ffi.NativeFunction<FT_Fixed Function(FT_Fixed)>>('FT_FloorFix');
  late final _FloorFix = _FloorFixPtr.asFunction<int Function(int)>();

  void Vector_Transform(
    ffi.Pointer<FT_Vector> vector,
    ffi.Pointer<FT_Matrix> matrix,
  ) {
    return _Vector_Transform(
      vector,
      matrix,
    );
  }

  late final _Vector_TransformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FT_Vector>, ffi.Pointer<FT_Matrix>)>>(
          'FT_Vector_Transform');
  late final _Vector_Transform =
      _Vector_TransformPtr.asFunction<void Function(ffi.Pointer<FT_Vector>, ffi.Pointer<FT_Matrix>)>();

  void Library_Version(
    FT_Library library1,
    ffi.Pointer<FT_Int> amajor,
    ffi.Pointer<FT_Int> aminor,
    ffi.Pointer<FT_Int> apatch,
  ) {
    return _Library_Version(
      library1,
      amajor,
      aminor,
      apatch,
    );
  }

  late final _Library_VersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              FT_Library, ffi.Pointer<FT_Int>, ffi.Pointer<FT_Int>, ffi.Pointer<FT_Int>)>>('FT_Library_Version');
  late final _Library_Version = _Library_VersionPtr.asFunction<
      void Function(FT_Library, ffi.Pointer<FT_Int>, ffi.Pointer<FT_Int>, ffi.Pointer<FT_Int>)>();

  int Face_CheckTrueTypePatents(
    FT_Face face,
  ) {
    return _Face_CheckTrueTypePatents(
      face,
    );
  }

  late final _Face_CheckTrueTypePatentsPtr =
      _lookup<ffi.NativeFunction<FT_Bool Function(FT_Face)>>('FT_Face_CheckTrueTypePatents');
  late final _Face_CheckTrueTypePatents = _Face_CheckTrueTypePatentsPtr.asFunction<int Function(FT_Face)>();

  int Face_SetUnpatentedHinting(
    FT_Face face,
    int value,
  ) {
    return _Face_SetUnpatentedHinting(
      face,
      value,
    );
  }

  late final _Face_SetUnpatentedHintingPtr =
      _lookup<ffi.NativeFunction<FT_Bool Function(FT_Face, FT_Bool)>>('FT_Face_SetUnpatentedHinting');
  late final _Face_SetUnpatentedHinting = _Face_SetUnpatentedHintingPtr.asFunction<int Function(FT_Face, int)>();
}

final class FT_MemoryRec_ extends ffi.Struct {
  external ffi.Pointer<ffi.Void> user;

  external FT_Alloc_Func alloc;

  external FT_Free_Func free;

  external FT_Realloc_Func realloc;
}

typedef FT_Alloc_Func
    = ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(FT_Memory memory, ffi.Long size)>>;
typedef FT_Memory = ffi.Pointer<FT_MemoryRec_>;
typedef FT_Free_Func
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FT_Memory memory, ffi.Pointer<ffi.Void> block)>>;
typedef FT_Realloc_Func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            FT_Memory memory, ffi.Long cur_size, ffi.Long new_size, ffi.Pointer<ffi.Void> block)>>;

final class FT_StreamRec_ extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> base;

  @ffi.UnsignedLong()
  external int size;

  @ffi.UnsignedLong()
  external int pos;

  external FT_StreamDesc descriptor;

  external FT_StreamDesc pathname;

  external FT_Stream_IoFunc read;

  external FT_Stream_CloseFunc close;

  external FT_Memory memory;

  external ffi.Pointer<ffi.UnsignedChar> cursor;

  external ffi.Pointer<ffi.UnsignedChar> limit;
}

typedef FT_StreamDesc = FT_StreamDesc_;

final class FT_StreamDesc_ extends ffi.Union {
  @ffi.Long()
  external int value;

  external ffi.Pointer<ffi.Void> pointer;
}

typedef FT_Stream_IoFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.UnsignedLong Function(
            FT_Stream stream, ffi.UnsignedLong offset, ffi.Pointer<ffi.UnsignedChar> buffer, ffi.UnsignedLong count)>>;
typedef FT_Stream = ffi.Pointer<FT_StreamRec_>;
typedef FT_Stream_CloseFunc = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FT_Stream stream)>>;

final class FT_Vector_ extends ffi.Struct {
  @FT_Pos()
  external int x;

  @FT_Pos()
  external int y;
}

typedef FT_Pos = ffi.Long;

final class FT_BBox_ extends ffi.Struct {
  @FT_Pos()
  external int xMin;

  @FT_Pos()
  external int yMin;

  @FT_Pos()
  external int xMax;

  @FT_Pos()
  external int yMax;
}

abstract class FT_Pixel_Mode_ {
  static const int FT_PIXEL_MODE_NONE = 0;
  static const int FT_PIXEL_MODE_MONO = 1;
  static const int FT_PIXEL_MODE_GRAY = 2;
  static const int FT_PIXEL_MODE_GRAY2 = 3;
  static const int FT_PIXEL_MODE_GRAY4 = 4;
  static const int FT_PIXEL_MODE_LCD = 5;
  static const int FT_PIXEL_MODE_LCD_V = 6;
  static const int FT_PIXEL_MODE_BGRA = 7;
  static const int FT_PIXEL_MODE_MAX = 8;
}

final class FT_Bitmap_ extends ffi.Struct {
  @ffi.UnsignedInt()
  external int rows;

  @ffi.UnsignedInt()
  external int width;

  @ffi.Int()
  external int pitch;

  external ffi.Pointer<ffi.UnsignedChar> buffer;

  @ffi.UnsignedShort()
  external int num_grays;

  @ffi.UnsignedChar()
  external int pixel_mode;

  @ffi.UnsignedChar()
  external int palette_mode;

  external ffi.Pointer<ffi.Void> palette;
}

final class FT_Outline_ extends ffi.Struct {
  @ffi.Short()
  external int n_contours;

  @ffi.Short()
  external int n_points;

  external ffi.Pointer<FT_Vector> points;

  external ffi.Pointer<ffi.Char> tags;

  external ffi.Pointer<ffi.Short> contours;

  @ffi.Int()
  external int flags;
}

typedef FT_Vector = FT_Vector_;

final class FT_Outline_Funcs_ extends ffi.Struct {
  external FT_Outline_MoveToFunc move_to;

  external FT_Outline_LineToFunc line_to;

  external FT_Outline_ConicToFunc conic_to;

  external FT_Outline_CubicToFunc cubic_to;

  @ffi.Int()
  external int shift;

  @FT_Pos()
  external int delta;
}

typedef FT_Outline_MoveToFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FT_Vector> to, ffi.Pointer<ffi.Void> user)>>;
typedef FT_Outline_LineToFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FT_Vector> to, ffi.Pointer<ffi.Void> user)>>;
typedef FT_Outline_ConicToFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<FT_Vector> control, ffi.Pointer<FT_Vector> to, ffi.Pointer<ffi.Void> user)>>;
typedef FT_Outline_CubicToFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<FT_Vector> control1, ffi.Pointer<FT_Vector> control2, ffi.Pointer<FT_Vector> to,
            ffi.Pointer<ffi.Void> user)>>;

abstract class FT_Glyph_Format_ {
  static const int FT_GLYPH_FORMAT_NONE = 0;
  static const int FT_GLYPH_FORMAT_COMPOSITE = 1668246896;
  static const int FT_GLYPH_FORMAT_BITMAP = 1651078259;
  static const int FT_GLYPH_FORMAT_OUTLINE = 1869968492;
  static const int FT_GLYPH_FORMAT_PLOTTER = 1886154612;
  static const int FT_GLYPH_FORMAT_SVG = 1398163232;
}

final class FT_Span_ extends ffi.Struct {
  @ffi.Short()
  external int x;

  @ffi.UnsignedShort()
  external int len;

  @ffi.UnsignedChar()
  external int coverage;
}

final class FT_Raster_Params_ extends ffi.Struct {
  external ffi.Pointer<FT_Bitmap> target;

  external ffi.Pointer<ffi.Void> source;

  @ffi.Int()
  external int flags;

  external FT_SpanFunc gray_spans;

  external FT_SpanFunc black_spans;

  external FT_Raster_BitTest_Func bit_test;

  external FT_Raster_BitSet_Func bit_set;

  external ffi.Pointer<ffi.Void> user;

  external FT_BBox clip_box;
}

typedef FT_Bitmap = FT_Bitmap_;
typedef FT_SpanFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int y, ffi.Int count, ffi.Pointer<FT_Span> spans, ffi.Pointer<ffi.Void> user)>>;
typedef FT_Span = FT_Span_;
typedef FT_Raster_BitTest_Func
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int y, ffi.Int x, ffi.Pointer<ffi.Void> user)>>;
typedef FT_Raster_BitSet_Func
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int y, ffi.Int x, ffi.Pointer<ffi.Void> user)>>;
typedef FT_BBox = FT_BBox_;

final class FT_RasterRec_ extends ffi.Opaque {}

final class FT_Raster_Funcs_ extends ffi.Struct {
  @ffi.Int32()
  external int glyph_format;

  external FT_Raster_NewFunc raster_new;

  external FT_Raster_ResetFunc raster_reset;

  external FT_Raster_SetModeFunc raster_set_mode;

  external FT_Raster_RenderFunc raster_render;

  external FT_Raster_DoneFunc raster_done;
}

typedef FT_Raster_NewFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> memory, ffi.Pointer<FT_Raster> raster)>>;
typedef FT_Raster = ffi.Pointer<FT_RasterRec_>;
typedef FT_Raster_ResetFunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(FT_Raster raster, ffi.Pointer<ffi.UnsignedChar> pool_base, ffi.UnsignedLong pool_size)>>;
typedef FT_Raster_SetModeFunc = ffi
    .Pointer<ffi.NativeFunction<ffi.Int Function(FT_Raster raster, ffi.UnsignedLong mode, ffi.Pointer<ffi.Void> args)>>;
typedef FT_Raster_RenderFunc
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(FT_Raster raster, ffi.Pointer<FT_Raster_Params> params)>>;
typedef FT_Raster_Params = FT_Raster_Params_;
typedef FT_Raster_DoneFunc = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FT_Raster raster)>>;

final class FT_UnitVector_ extends ffi.Struct {
  @FT_F2Dot14()
  external int x;

  @FT_F2Dot14()
  external int y;
}

typedef FT_F2Dot14 = ffi.Short;

final class FT_Matrix_ extends ffi.Struct {
  @FT_Fixed()
  external int xx;

  @FT_Fixed()
  external int xy;

  @FT_Fixed()
  external int yx;

  @FT_Fixed()
  external int yy;
}

typedef FT_Fixed = ffi.Long;

final class FT_Data_ extends ffi.Struct {
  external ffi.Pointer<FT_Byte> pointer;

  @FT_UInt()
  external int length;
}

typedef FT_Byte = ffi.UnsignedChar;
typedef FT_UInt = ffi.UnsignedInt;

final class FT_Generic_ extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external FT_Generic_Finalizer finalizer;
}

typedef FT_Generic_Finalizer = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> object)>>;

final class FT_ListNodeRec_ extends ffi.Struct {
  external FT_ListNode prev;

  external FT_ListNode next;

  external ffi.Pointer<ffi.Void> data;
}

typedef FT_ListNode = ffi.Pointer<FT_ListNodeRec_>;

final class FT_ListRec_ extends ffi.Struct {
  external FT_ListNode head;

  external FT_ListNode tail;
}

typedef FT_Error = ffi.Int;

final class FT_Glyph_Metrics_ extends ffi.Struct {
  @FT_Pos()
  external int width;

  @FT_Pos()
  external int height;

  @FT_Pos()
  external int horiBearingX;

  @FT_Pos()
  external int horiBearingY;

  @FT_Pos()
  external int horiAdvance;

  @FT_Pos()
  external int vertBearingX;

  @FT_Pos()
  external int vertBearingY;

  @FT_Pos()
  external int vertAdvance;
}

final class FT_Bitmap_Size_ extends ffi.Struct {
  @FT_Short()
  external int height;

  @FT_Short()
  external int width;

  @FT_Pos()
  external int size;

  @FT_Pos()
  external int x_ppem;

  @FT_Pos()
  external int y_ppem;
}

typedef FT_Short = ffi.Short;

final class FT_LibraryRec_ extends ffi.Opaque {}

final class FT_ModuleRec_ extends ffi.Opaque {}

final class FT_DriverRec_ extends ffi.Opaque {}

final class FT_RendererRec_ extends ffi.Opaque {}

final class FT_FaceRec_ extends ffi.Struct {
  @FT_Long()
  external int num_faces;

  @FT_Long()
  external int face_index;

  @FT_Long()
  external int face_flags;

  @FT_Long()
  external int style_flags;

  @FT_Long()
  external int num_glyphs;

  external ffi.Pointer<FT_String> family_name;

  external ffi.Pointer<FT_String> style_name;

  @FT_Int()
  external int num_fixed_sizes;

  external ffi.Pointer<FT_Bitmap_Size> available_sizes;

  @FT_Int()
  external int num_charmaps;

  external ffi.Pointer<FT_CharMap> charmaps;

  external FT_Generic generic;

  external FT_BBox bbox;

  @FT_UShort()
  external int units_per_EM;

  @FT_Short()
  external int ascender;

  @FT_Short()
  external int descender;

  @FT_Short()
  external int height;

  @FT_Short()
  external int max_advance_width;

  @FT_Short()
  external int max_advance_height;

  @FT_Short()
  external int underline_position;

  @FT_Short()
  external int underline_thickness;

  external FT_GlyphSlot glyph;

  external FT_Size size;

  external FT_CharMap charmap;

  external FT_Driver driver;

  external FT_Memory memory;

  external FT_Stream stream;

  external FT_ListRec sizes_list;

  external FT_Generic autohint;

  external ffi.Pointer<ffi.Void> extensions;

  external FT_Face_Internal internal;
}

typedef FT_Long = ffi.Long;
typedef FT_String = ffi.Char;
typedef FT_Int = ffi.Int;
typedef FT_Bitmap_Size = FT_Bitmap_Size_;
typedef FT_CharMap = ffi.Pointer<FT_CharMapRec_>;

final class FT_CharMapRec_ extends ffi.Struct {
  external FT_Face face;

  @ffi.Int32()
  external int encoding;

  @FT_UShort()
  external int platform_id;

  @FT_UShort()
  external int encoding_id;
}

typedef FT_Face = ffi.Pointer<FT_FaceRec_>;

abstract class FT_Encoding_ {
  static const int FT_ENCODING_NONE = 0;
  static const int FT_ENCODING_MS_SYMBOL = 1937337698;
  static const int FT_ENCODING_UNICODE = 1970170211;
  static const int FT_ENCODING_SJIS = 1936353651;
  static const int FT_ENCODING_PRC = 1734484000;
  static const int FT_ENCODING_BIG5 = 1651074869;
  static const int FT_ENCODING_WANSUNG = 2002873971;
  static const int FT_ENCODING_JOHAB = 1785686113;
  static const int FT_ENCODING_GB2312 = 1734484000;
  static const int FT_ENCODING_MS_SJIS = 1936353651;
  static const int FT_ENCODING_MS_GB2312 = 1734484000;
  static const int FT_ENCODING_MS_BIG5 = 1651074869;
  static const int FT_ENCODING_MS_WANSUNG = 2002873971;
  static const int FT_ENCODING_MS_JOHAB = 1785686113;
  static const int FT_ENCODING_ADOBE_STANDARD = 1094995778;
  static const int FT_ENCODING_ADOBE_EXPERT = 1094992453;
  static const int FT_ENCODING_ADOBE_CUSTOM = 1094992451;
  static const int FT_ENCODING_ADOBE_LATIN_1 = 1818326065;
  static const int FT_ENCODING_OLD_LATIN_2 = 1818326066;
  static const int FT_ENCODING_APPLE_ROMAN = 1634889070;
}

typedef FT_UShort = ffi.UnsignedShort;
typedef FT_Generic = FT_Generic_;
typedef FT_GlyphSlot = ffi.Pointer<FT_GlyphSlotRec_>;

final class FT_GlyphSlotRec_ extends ffi.Struct {
  external FT_Library library1;

  external FT_Face face;

  external FT_GlyphSlot next;

  @FT_UInt()
  external int glyph_index;

  external FT_Generic generic;

  external FT_Glyph_Metrics metrics;

  @FT_Fixed()
  external int linearHoriAdvance;

  @FT_Fixed()
  external int linearVertAdvance;

  external FT_Vector advance;

  @ffi.Int32()
  external int format;

  external FT_Bitmap bitmap;

  @FT_Int()
  external int bitmap_left;

  @FT_Int()
  external int bitmap_top;

  external FT_Outline outline;

  @FT_UInt()
  external int num_subglyphs;

  external FT_SubGlyph subglyphs;

  external ffi.Pointer<ffi.Void> control_data;

  @ffi.Long()
  external int control_len;

  @FT_Pos()
  external int lsb_delta;

  @FT_Pos()
  external int rsb_delta;

  external ffi.Pointer<ffi.Void> other;

  external FT_Slot_Internal internal;
}

typedef FT_Library = ffi.Pointer<FT_LibraryRec_>;
typedef FT_Glyph_Metrics = FT_Glyph_Metrics_;
typedef FT_Outline = FT_Outline_;
typedef FT_SubGlyph = ffi.Pointer<FT_SubGlyphRec_>;

final class FT_SubGlyphRec_ extends ffi.Opaque {}

typedef FT_Slot_Internal = ffi.Pointer<FT_Slot_InternalRec_>;

final class FT_Slot_InternalRec_ extends ffi.Opaque {}

typedef FT_Size = ffi.Pointer<FT_SizeRec_>;

final class FT_SizeRec_ extends ffi.Struct {
  external FT_Face face;

  external FT_Generic generic;

  external FT_Size_Metrics metrics;

  external FT_Size_Internal internal;
}

typedef FT_Size_Metrics = FT_Size_Metrics_;

final class FT_Size_Metrics_ extends ffi.Struct {
  @FT_UShort()
  external int x_ppem;

  @FT_UShort()
  external int y_ppem;

  @FT_Fixed()
  external int x_scale;

  @FT_Fixed()
  external int y_scale;

  @FT_Pos()
  external int ascender;

  @FT_Pos()
  external int descender;

  @FT_Pos()
  external int height;

  @FT_Pos()
  external int max_advance;
}

typedef FT_Size_Internal = ffi.Pointer<FT_Size_InternalRec_>;

final class FT_Size_InternalRec_ extends ffi.Opaque {}

typedef FT_Driver = ffi.Pointer<FT_DriverRec_>;
typedef FT_ListRec = FT_ListRec_;
typedef FT_Face_Internal = ffi.Pointer<FT_Face_InternalRec_>;

final class FT_Face_InternalRec_ extends ffi.Opaque {}

final class FT_Parameter_ extends ffi.Struct {
  @FT_ULong()
  external int tag;

  external FT_Pointer data;
}

typedef FT_ULong = ffi.UnsignedLong;
typedef FT_Pointer = ffi.Pointer<ffi.Void>;

final class FT_Open_Args_ extends ffi.Struct {
  @FT_UInt()
  external int flags;

  external ffi.Pointer<FT_Byte> memory_base;

  @FT_Long()
  external int memory_size;

  external ffi.Pointer<FT_String> pathname;

  external FT_Stream stream;

  external FT_Module driver;

  @FT_Int()
  external int num_params;

  external ffi.Pointer<FT_Parameter> params;
}

typedef FT_Module = ffi.Pointer<FT_ModuleRec_>;
typedef FT_Parameter = FT_Parameter_;
typedef FT_Open_Args = FT_Open_Args_;

abstract class FT_Size_Request_Type_ {
  static const int FT_SIZE_REQUEST_TYPE_NOMINAL = 0;
  static const int FT_SIZE_REQUEST_TYPE_REAL_DIM = 1;
  static const int FT_SIZE_REQUEST_TYPE_BBOX = 2;
  static const int FT_SIZE_REQUEST_TYPE_CELL = 3;
  static const int FT_SIZE_REQUEST_TYPE_SCALES = 4;
  static const int FT_SIZE_REQUEST_TYPE_MAX = 5;
}

final class FT_Size_RequestRec_ extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @FT_Long()
  external int width;

  @FT_Long()
  external int height;

  @FT_UInt()
  external int horiResolution;

  @FT_UInt()
  external int vertResolution;
}

typedef FT_Size_Request = ffi.Pointer<FT_Size_RequestRec_>;
typedef FT_F26Dot6 = ffi.Long;
typedef FT_Int32 = ffi.Int;
typedef FT_Matrix = FT_Matrix_;

abstract class FT_Render_Mode_ {
  static const int FT_RENDER_MODE_NORMAL = 0;
  static const int FT_RENDER_MODE_LIGHT = 1;
  static const int FT_RENDER_MODE_MONO = 2;
  static const int FT_RENDER_MODE_LCD = 3;
  static const int FT_RENDER_MODE_LCD_V = 4;
  static const int FT_RENDER_MODE_SDF = 5;
  static const int FT_RENDER_MODE_MAX = 6;
}

abstract class FT_Kerning_Mode_ {
  static const int FT_KERNING_DEFAULT = 0;
  static const int FT_KERNING_UNFITTED = 1;
  static const int FT_KERNING_UNSCALED = 2;
}

typedef FT_UInt32 = ffi.UnsignedInt;
typedef FT_Bool = ffi.UnsignedChar;

const int FT_Mod_Err_Base = 0;

const int FT_Mod_Err_Autofit = 0;

const int FT_Mod_Err_BDF = 0;

const int FT_Mod_Err_Bzip2 = 0;

const int FT_Mod_Err_Cache = 0;

const int FT_Mod_Err_CFF = 0;

const int FT_Mod_Err_CID = 0;

const int FT_Mod_Err_Gzip = 0;

const int FT_Mod_Err_LZW = 0;

const int FT_Mod_Err_OTvalid = 0;

const int FT_Mod_Err_PCF = 0;

const int FT_Mod_Err_PFR = 0;

const int FT_Mod_Err_PSaux = 0;

const int FT_Mod_Err_PShinter = 0;

const int FT_Mod_Err_PSnames = 0;

const int FT_Mod_Err_Raster = 0;

const int FT_Mod_Err_SFNT = 0;

const int FT_Mod_Err_Smooth = 0;

const int FT_Mod_Err_TrueType = 0;

const int FT_Mod_Err_Type1 = 0;

const int FT_Mod_Err_Type42 = 0;

const int FT_Mod_Err_Winfonts = 0;

const int FT_Mod_Err_GXvalid = 0;

const int FT_Mod_Err_Sdf = 0;

const int FT_Mod_Err_Max = 1;

const int FT_Err_Ok = 0;

const int FT_Err_Cannot_Open_Resource = 1;

const int FT_Err_Unknown_File_Format = 2;

const int FT_Err_Invalid_File_Format = 3;

const int FT_Err_Invalid_Version = 4;

const int FT_Err_Lower_Module_Version = 5;

const int FT_Err_Invalid_Argument = 6;

const int FT_Err_Unimplemented_Feature = 7;

const int FT_Err_Invalid_Table = 8;

const int FT_Err_Invalid_Offset = 9;

const int FT_Err_Array_Too_Large = 10;

const int FT_Err_Missing_Module = 11;

const int FT_Err_Missing_Property = 12;

const int FT_Err_Invalid_Glyph_Index = 16;

const int FT_Err_Invalid_Character_Code = 17;

const int FT_Err_Invalid_Glyph_Format = 18;

const int FT_Err_Cannot_Render_Glyph = 19;

const int FT_Err_Invalid_Outline = 20;

const int FT_Err_Invalid_Composite = 21;

const int FT_Err_Too_Many_Hints = 22;

const int FT_Err_Invalid_Pixel_Size = 23;

const int FT_Err_Invalid_SVG_Document = 24;

const int FT_Err_Invalid_Handle = 32;

const int FT_Err_Invalid_Library_Handle = 33;

const int FT_Err_Invalid_Driver_Handle = 34;

const int FT_Err_Invalid_Face_Handle = 35;

const int FT_Err_Invalid_Size_Handle = 36;

const int FT_Err_Invalid_Slot_Handle = 37;

const int FT_Err_Invalid_CharMap_Handle = 38;

const int FT_Err_Invalid_Cache_Handle = 39;

const int FT_Err_Invalid_Stream_Handle = 40;

const int FT_Err_Too_Many_Drivers = 48;

const int FT_Err_Too_Many_Extensions = 49;

const int FT_Err_Out_Of_Memory = 64;

const int FT_Err_Unlisted_Object = 65;

const int FT_Err_Cannot_Open_Stream = 81;

const int FT_Err_Invalid_Stream_Seek = 82;

const int FT_Err_Invalid_Stream_Skip = 83;

const int FT_Err_Invalid_Stream_Read = 84;

const int FT_Err_Invalid_Stream_Operation = 85;

const int FT_Err_Invalid_Frame_Operation = 86;

const int FT_Err_Nested_Frame_Access = 87;

const int FT_Err_Invalid_Frame_Read = 88;

const int FT_Err_Raster_Uninitialized = 96;

const int FT_Err_Raster_Corrupted = 97;

const int FT_Err_Raster_Overflow = 98;

const int FT_Err_Raster_Negative_Height = 99;

const int FT_Err_Too_Many_Caches = 112;

const int FT_Err_Invalid_Opcode = 128;

const int FT_Err_Too_Few_Arguments = 129;

const int FT_Err_Stack_Overflow = 130;

const int FT_Err_Code_Overflow = 131;

const int FT_Err_Bad_Argument = 132;

const int FT_Err_Divide_By_Zero = 133;

const int FT_Err_Invalid_Reference = 134;

const int FT_Err_Debug_OpCode = 135;

const int FT_Err_ENDF_In_Exec_Stream = 136;

const int FT_Err_Nested_DEFS = 137;

const int FT_Err_Invalid_CodeRange = 138;

const int FT_Err_Execution_Too_Long = 139;

const int FT_Err_Too_Many_Function_Defs = 140;

const int FT_Err_Too_Many_Instruction_Defs = 141;

const int FT_Err_Table_Missing = 142;

const int FT_Err_Horiz_Header_Missing = 143;

const int FT_Err_Locations_Missing = 144;

const int FT_Err_Name_Table_Missing = 145;

const int FT_Err_CMap_Table_Missing = 146;

const int FT_Err_Hmtx_Table_Missing = 147;

const int FT_Err_Post_Table_Missing = 148;

const int FT_Err_Invalid_Horiz_Metrics = 149;

const int FT_Err_Invalid_CharMap_Format = 150;

const int FT_Err_Invalid_PPem = 151;

const int FT_Err_Invalid_Vert_Metrics = 152;

const int FT_Err_Could_Not_Find_Context = 153;

const int FT_Err_Invalid_Post_Table_Format = 154;

const int FT_Err_Invalid_Post_Table = 155;

const int FT_Err_DEF_In_Glyf_Bytecode = 156;

const int FT_Err_Missing_Bitmap = 157;

const int FT_Err_Missing_SVG_Hooks = 158;

const int FT_Err_Syntax_Error = 160;

const int FT_Err_Stack_Underflow = 161;

const int FT_Err_Ignore = 162;

const int FT_Err_No_Unicode_Glyph_Name = 163;

const int FT_Err_Glyph_Too_Big = 164;

const int FT_Err_Missing_Startfont_Field = 176;

const int FT_Err_Missing_Font_Field = 177;

const int FT_Err_Missing_Size_Field = 178;

const int FT_Err_Missing_Fontboundingbox_Field = 179;

const int FT_Err_Missing_Chars_Field = 180;

const int FT_Err_Missing_Startchar_Field = 181;

const int FT_Err_Missing_Encoding_Field = 182;

const int FT_Err_Missing_Bbx_Field = 183;

const int FT_Err_Bbx_Too_Big = 184;

const int FT_Err_Corrupted_Font_Header = 185;

const int FT_Err_Corrupted_Font_Glyphs = 186;

const int FT_Err_Max = 187;

const int FT_RENDER_POOL_SIZE = 16384;

const int FT_MAX_MODULES = 32;

const int TT_CONFIG_OPTION_SUBPIXEL_HINTING = 2;

const int TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES = 1000000;

const int T1_MAX_DICT_DEPTH = 5;

const int T1_MAX_SUBRS_CALLS = 16;

const int T1_MAX_CHARSTRINGS_OPERANDS = 256;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1 = 500;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1 = 400;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X2 = 1000;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y2 = 275;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X3 = 1667;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y3 = 275;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_X4 = 2333;

const int CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y4 = 0;

const int FT_CHAR_BIT = 8;

const int FT_USHORT_MAX = 65535;

const int FT_INT_MAX = 2147483647;

const int FT_INT_MIN = -2147483648;

const int FT_UINT_MAX = 4294967295;

const int FT_LONG_MIN = -9223372036854775808;

const int FT_LONG_MAX = 9223372036854775807;

const int FT_ULONG_MAX = -1;

const int FT_LLONG_MAX = 9223372036854775807;

const int FT_LLONG_MIN = -9223372036854775808;

const int FT_ULLONG_MAX = -1;

const int HAVE_UNISTD_H = 1;

const int HAVE_FCNTL_H = 1;

const int FT_SIZEOF_INT = 4;

const int FT_SIZEOF_LONG = 8;

const int FT_SIZEOF_LONG_LONG = 8;

const int ft_pixel_mode_none = 0;

const int ft_pixel_mode_mono = 1;

const int ft_pixel_mode_grays = 2;

const int ft_pixel_mode_pal2 = 3;

const int ft_pixel_mode_pal4 = 4;

const int FT_OUTLINE_CONTOURS_MAX = 32767;

const int FT_OUTLINE_POINTS_MAX = 32767;

const int FT_OUTLINE_NONE = 0;

const int FT_OUTLINE_OWNER = 1;

const int FT_OUTLINE_EVEN_ODD_FILL = 2;

const int FT_OUTLINE_REVERSE_FILL = 4;

const int FT_OUTLINE_IGNORE_DROPOUTS = 8;

const int FT_OUTLINE_SMART_DROPOUTS = 16;

const int FT_OUTLINE_INCLUDE_STUBS = 32;

const int FT_OUTLINE_OVERLAP = 64;

const int FT_OUTLINE_HIGH_PRECISION = 256;

const int FT_OUTLINE_SINGLE_PASS = 512;

const int ft_outline_none = 0;

const int ft_outline_owner = 1;

const int ft_outline_even_odd_fill = 2;

const int ft_outline_reverse_fill = 4;

const int ft_outline_ignore_dropouts = 8;

const int ft_outline_high_precision = 256;

const int ft_outline_single_pass = 512;

const int FT_CURVE_TAG_ON = 1;

const int FT_CURVE_TAG_CONIC = 0;

const int FT_CURVE_TAG_CUBIC = 2;

const int FT_CURVE_TAG_HAS_SCANMODE = 4;

const int FT_CURVE_TAG_TOUCH_X = 8;

const int FT_CURVE_TAG_TOUCH_Y = 16;

const int FT_CURVE_TAG_TOUCH_BOTH = 24;

const int FT_Curve_Tag_On = 1;

const int FT_Curve_Tag_Conic = 0;

const int FT_Curve_Tag_Cubic = 2;

const int FT_Curve_Tag_Touch_X = 8;

const int FT_Curve_Tag_Touch_Y = 16;

const int ft_glyph_format_none = 0;

const int ft_glyph_format_composite = 1668246896;

const int ft_glyph_format_bitmap = 1651078259;

const int ft_glyph_format_outline = 1869968492;

const int ft_glyph_format_plotter = 1886154612;

const int FT_RASTER_FLAG_DEFAULT = 0;

const int FT_RASTER_FLAG_AA = 1;

const int FT_RASTER_FLAG_DIRECT = 2;

const int FT_RASTER_FLAG_CLIP = 4;

const int FT_RASTER_FLAG_SDF = 8;

const int ft_raster_flag_default = 0;

const int ft_raster_flag_aa = 1;

const int ft_raster_flag_direct = 2;

const int ft_raster_flag_clip = 4;

const int ft_encoding_none = 0;

const int ft_encoding_unicode = 1970170211;

const int ft_encoding_symbol = 1937337698;

const int ft_encoding_latin_1 = 1818326065;

const int ft_encoding_latin_2 = 1818326066;

const int ft_encoding_sjis = 1936353651;

const int ft_encoding_gb2312 = 1734484000;

const int ft_encoding_big5 = 1651074869;

const int ft_encoding_wansung = 2002873971;

const int ft_encoding_johab = 1785686113;

const int ft_encoding_adobe_standard = 1094995778;

const int ft_encoding_adobe_expert = 1094992453;

const int ft_encoding_adobe_custom = 1094992451;

const int ft_encoding_apple_roman = 1634889070;

const int FT_FACE_FLAG_SCALABLE = 1;

const int FT_FACE_FLAG_FIXED_SIZES = 2;

const int FT_FACE_FLAG_FIXED_WIDTH = 4;

const int FT_FACE_FLAG_SFNT = 8;

const int FT_FACE_FLAG_HORIZONTAL = 16;

const int FT_FACE_FLAG_VERTICAL = 32;

const int FT_FACE_FLAG_KERNING = 64;

const int FT_FACE_FLAG_FAST_GLYPHS = 128;

const int FT_FACE_FLAG_MULTIPLE_MASTERS = 256;

const int FT_FACE_FLAG_GLYPH_NAMES = 512;

const int FT_FACE_FLAG_EXTERNAL_STREAM = 1024;

const int FT_FACE_FLAG_HINTER = 2048;

const int FT_FACE_FLAG_CID_KEYED = 4096;

const int FT_FACE_FLAG_TRICKY = 8192;

const int FT_FACE_FLAG_COLOR = 16384;

const int FT_FACE_FLAG_VARIATION = 32768;

const int FT_FACE_FLAG_SVG = 65536;

const int FT_FACE_FLAG_SBIX = 131072;

const int FT_FACE_FLAG_SBIX_OVERLAY = 262144;

const int FT_STYLE_FLAG_ITALIC = 1;

const int FT_STYLE_FLAG_BOLD = 2;

const int FT_OPEN_MEMORY = 1;

const int FT_OPEN_STREAM = 2;

const int FT_OPEN_PATHNAME = 4;

const int FT_OPEN_DRIVER = 8;

const int FT_OPEN_PARAMS = 16;

const int ft_open_memory = 1;

const int ft_open_stream = 2;

const int ft_open_pathname = 4;

const int ft_open_driver = 8;

const int ft_open_params = 16;

const int FT_LOAD_DEFAULT = 0;

const int FT_LOAD_NO_SCALE = 1;

const int FT_LOAD_NO_HINTING = 2;

const int FT_LOAD_RENDER = 4;

const int FT_LOAD_NO_BITMAP = 8;

const int FT_LOAD_VERTICAL_LAYOUT = 16;

const int FT_LOAD_FORCE_AUTOHINT = 32;

const int FT_LOAD_CROP_BITMAP = 64;

const int FT_LOAD_PEDANTIC = 128;

const int FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH = 512;

const int FT_LOAD_NO_RECURSE = 1024;

const int FT_LOAD_IGNORE_TRANSFORM = 2048;

const int FT_LOAD_MONOCHROME = 4096;

const int FT_LOAD_LINEAR_DESIGN = 8192;

const int FT_LOAD_SBITS_ONLY = 16384;

const int FT_LOAD_NO_AUTOHINT = 32768;

const int FT_LOAD_COLOR = 1048576;

const int FT_LOAD_COMPUTE_METRICS = 2097152;

const int FT_LOAD_BITMAP_METRICS_ONLY = 4194304;

const int FT_LOAD_ADVANCE_ONLY = 256;

const int FT_LOAD_SVG_ONLY = 8388608;

const int FT_LOAD_TARGET_NORMAL = 0;

const int FT_LOAD_TARGET_LIGHT = 65536;

const int FT_LOAD_TARGET_MONO = 131072;

const int FT_LOAD_TARGET_LCD = 196608;

const int FT_LOAD_TARGET_LCD_V = 262144;

const int ft_render_mode_normal = 0;

const int ft_render_mode_mono = 2;

const int ft_kerning_default = 0;

const int ft_kerning_unfitted = 1;

const int ft_kerning_unscaled = 2;

const int FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS = 1;

const int FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES = 2;

const int FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID = 4;

const int FT_SUBGLYPH_FLAG_SCALE = 8;

const int FT_SUBGLYPH_FLAG_XY_SCALE = 64;

const int FT_SUBGLYPH_FLAG_2X2 = 128;

const int FT_SUBGLYPH_FLAG_USE_MY_METRICS = 512;

const int FT_FSTYPE_INSTALLABLE_EMBEDDING = 0;

const int FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING = 2;

const int FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING = 4;

const int FT_FSTYPE_EDITABLE_EMBEDDING = 8;

const int FT_FSTYPE_NO_SUBSETTING = 256;

const int FT_FSTYPE_BITMAP_EMBEDDING_ONLY = 512;

const int FREETYPE_MAJOR = 2;

const int FREETYPE_MINOR = 12;

const int FREETYPE_PATCH = 1;
