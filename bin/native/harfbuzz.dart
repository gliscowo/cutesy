// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

import 'freetype.dart';

/// Generated bindings to the HarfBuzz text shaping library
class HarfbuzzLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HarfbuzzLibrary(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HarfbuzzLibrary.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  int tag_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _tag_from_string(
      str,
      len,
    );
  }

  late final _tag_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_tag Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_tag_from_string');
  late final _tag_from_string = _tag_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void tag_to_string(
    int tag,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _tag_to_string(
      tag,
      buf,
    );
  }

  late final _tag_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(hb_tag, ffi.Pointer<ffi.Char>)>>('hb_tag_to_string');
  late final _tag_to_string = _tag_to_stringPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int direction_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _direction_from_string(
      str,
      len,
    );
  }

  late final _direction_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_direction_from_string');
  late final _direction_from_string = _direction_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> direction_to_string(
    int direction,
  ) {
    return _direction_to_string(
      direction,
    );
  }

  late final _direction_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>('hb_direction_to_string');
  late final _direction_to_string = _direction_to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  hb_language language_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _language_from_string(
      str,
      len,
    );
  }

  late final _language_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_language Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_language_from_string');
  late final _language_from_string =
      _language_from_stringPtr.asFunction<hb_language Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> language_to_string(
    hb_language language,
  ) {
    return _language_to_string(
      language,
    );
  }

  late final _language_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(hb_language)>>('hb_language_to_string');
  late final _language_to_string = _language_to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(hb_language)>();

  hb_language language_get_default() {
    return _language_get_default();
  }

  late final _language_get_defaultPtr = _lookup<ffi.NativeFunction<hb_language Function()>>('hb_language_get_default');
  late final _language_get_default = _language_get_defaultPtr.asFunction<hb_language Function()>();

  int language_matches(
    hb_language language,
    hb_language specific,
  ) {
    return _language_matches(
      language,
      specific,
    );
  }

  late final _language_matchesPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(hb_language, hb_language)>>('hb_language_matches');
  late final _language_matches = _language_matchesPtr.asFunction<int Function(hb_language, hb_language)>();

  int script_from_iso15924_tag(
    int tag,
  ) {
    return _script_from_iso15924_tag(
      tag,
    );
  }

  late final _script_from_iso15924_tagPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(hb_tag)>>('hb_script_from_iso15924_tag');
  late final _script_from_iso15924_tag = _script_from_iso15924_tagPtr.asFunction<int Function(int)>();

  int script_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _script_from_string(
      str,
      len,
    );
  }

  late final _script_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_script_from_string');
  late final _script_from_string = _script_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int script_to_iso15924_tag(
    int script,
  ) {
    return _script_to_iso15924_tag(
      script,
    );
  }

  late final _script_to_iso15924_tagPtr =
      _lookup<ffi.NativeFunction<hb_tag Function(ffi.Int32)>>('hb_script_to_iso15924_tag');
  late final _script_to_iso15924_tag = _script_to_iso15924_tagPtr.asFunction<int Function(int)>();

  int script_get_horizontal_direction(
    int script,
  ) {
    return _script_get_horizontal_direction(
      script,
    );
  }

  late final _script_get_horizontal_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('hb_script_get_horizontal_direction');
  late final _script_get_horizontal_direction = _script_get_horizontal_directionPtr.asFunction<int Function(int)>();

  int feature_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<hb_feature> feature,
  ) {
    return _feature_from_string(
      str,
      len,
      feature,
    );
  }

  late final _feature_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<hb_feature>)>>(
          'hb_feature_from_string');
  late final _feature_from_string =
      _feature_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_feature>)>();

  void feature_to_string(
    ffi.Pointer<hb_feature> feature,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _feature_to_string(
      feature,
      buf,
      size,
    );
  }

  late final _feature_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_feature>, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>(
          'hb_feature_to_string');
  late final _feature_to_string =
      _feature_to_stringPtr.asFunction<void Function(ffi.Pointer<hb_feature>, ffi.Pointer<ffi.Char>, int)>();

  int variation_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<hb_variation> variation,
  ) {
    return _variation_from_string(
      str,
      len,
      variation,
    );
  }

  late final _variation_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<hb_variation>)>>(
          'hb_variation_from_string');
  late final _variation_from_string =
      _variation_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_variation>)>();

  void variation_to_string(
    ffi.Pointer<hb_variation> variation,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _variation_to_string(
      variation,
      buf,
      size,
    );
  }

  late final _variation_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_variation>, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>(
          'hb_variation_to_string');
  late final _variation_to_string =
      _variation_to_stringPtr.asFunction<void Function(ffi.Pointer<hb_variation>, ffi.Pointer<ffi.Char>, int)>();

  int color_get_alpha(
    int color,
  ) {
    return _color_get_alpha(
      color,
    );
  }

  late final _color_get_alphaPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color)>>('hb_color_get_alpha');
  late final _color_get_alpha = _color_get_alphaPtr.asFunction<int Function(int)>();

  int color_get_red(
    int color,
  ) {
    return _color_get_red(
      color,
    );
  }

  late final _color_get_redPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color)>>('hb_color_get_red');
  late final _color_get_red = _color_get_redPtr.asFunction<int Function(int)>();

  int color_get_green(
    int color,
  ) {
    return _color_get_green(
      color,
    );
  }

  late final _color_get_greenPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color)>>('hb_color_get_green');
  late final _color_get_green = _color_get_greenPtr.asFunction<int Function(int)>();

  int color_get_blue(
    int color,
  ) {
    return _color_get_blue(
      color,
    );
  }

  late final _color_get_bluePtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color)>>('hb_color_get_blue');
  late final _color_get_blue = _color_get_bluePtr.asFunction<int Function(int)>();

  ffi.Pointer<hb_blob> blob_create(
    ffi.Pointer<ffi.Char> data,
    int length,
    int mode,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _blob_create(
      data,
      length,
      mode,
      user_data,
      destroy,
    );
  }

  late final _blob_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.Int32, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_blob_create');
  late final _blob_create = _blob_createPtr.asFunction<
      ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  ffi.Pointer<hb_blob> blob_create_or_fail(
    ffi.Pointer<ffi.Char> data,
    int length,
    int mode,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _blob_create_or_fail(
      data,
      length,
      mode,
      user_data,
      destroy,
    );
  }

  late final _blob_create_or_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.Int32, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_blob_create_or_fail');
  late final _blob_create_or_fail = _blob_create_or_failPtr.asFunction<
      ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  ffi.Pointer<hb_blob> blob_create_from_file(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _blob_create_from_file(
      file_name,
    );
  }

  late final _blob_create_from_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>)>>('hb_blob_create_from_file');
  late final _blob_create_from_file =
      _blob_create_from_filePtr.asFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<hb_blob> blob_create_from_file_or_fail(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _blob_create_from_file_or_fail(
      file_name,
    );
  }

  late final _blob_create_from_file_or_failPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>)>>(
          'hb_blob_create_from_file_or_fail');
  late final _blob_create_from_file_or_fail =
      _blob_create_from_file_or_failPtr.asFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<hb_blob> blob_create_sub_blob(
    ffi.Pointer<hb_blob> parent,
    int offset,
    int length,
  ) {
    return _blob_create_sub_blob(
      parent,
      offset,
      length,
    );
  }

  late final _blob_create_sub_blobPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_blob>, ffi.UnsignedInt, ffi.UnsignedInt)>>(
      'hb_blob_create_sub_blob');
  late final _blob_create_sub_blob =
      _blob_create_sub_blobPtr.asFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_blob>, int, int)>();

  ffi.Pointer<hb_blob> blob_copy_writable_or_fail(
    ffi.Pointer<hb_blob> blob,
  ) {
    return _blob_copy_writable_or_fail(
      blob,
    );
  }

  late final _blob_copy_writable_or_failPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_blob>)>>('hb_blob_copy_writable_or_fail');
  late final _blob_copy_writable_or_fail =
      _blob_copy_writable_or_failPtr.asFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_blob>)>();

  ffi.Pointer<hb_blob> blob_get_empty() {
    return _blob_get_empty();
  }

  late final _blob_get_emptyPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob> Function()>>('hb_blob_get_empty');
  late final _blob_get_empty = _blob_get_emptyPtr.asFunction<ffi.Pointer<hb_blob> Function()>();

  ffi.Pointer<hb_blob> blob_reference(
    ffi.Pointer<hb_blob> blob,
  ) {
    return _blob_reference(
      blob,
    );
  }

  late final _blob_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_blob>)>>('hb_blob_reference');
  late final _blob_reference = _blob_referencePtr.asFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_blob>)>();

  void blob_destroy(
    ffi.Pointer<hb_blob> blob,
  ) {
    return _blob_destroy(
      blob,
    );
  }

  late final _blob_destroyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_blob>)>>('hb_blob_destroy');
  late final _blob_destroy = _blob_destroyPtr.asFunction<void Function(ffi.Pointer<hb_blob>)>();

  int blob_set_user_data(
    ffi.Pointer<hb_blob> blob,
    ffi.Pointer<hb_user_data_key> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func destroy,
    int replace,
  ) {
    return _blob_set_user_data(
      blob,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _blob_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_blob>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func,
              hb_bool)>>('hb_blob_set_user_data');
  late final _blob_set_user_data = _blob_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<hb_blob>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func, int)>();

  ffi.Pointer<ffi.Void> blob_get_user_data(
    ffi.Pointer<hb_blob> blob,
    ffi.Pointer<hb_user_data_key> key,
  ) {
    return _blob_get_user_data(
      blob,
      key,
    );
  }

  late final _blob_get_user_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_blob>, ffi.Pointer<hb_user_data_key>)>>(
          'hb_blob_get_user_data');
  late final _blob_get_user_data = _blob_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_blob>, ffi.Pointer<hb_user_data_key>)>();

  void blob_make_immutable(
    ffi.Pointer<hb_blob> blob,
  ) {
    return _blob_make_immutable(
      blob,
    );
  }

  late final _blob_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_blob>)>>('hb_blob_make_immutable');
  late final _blob_make_immutable = _blob_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_blob>)>();

  int blob_is_immutable(
    ffi.Pointer<hb_blob> blob,
  ) {
    return _blob_is_immutable(
      blob,
    );
  }

  late final _blob_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_blob>)>>('hb_blob_is_immutable');
  late final _blob_is_immutable = _blob_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_blob>)>();

  int blob_get_length(
    ffi.Pointer<hb_blob> blob,
  ) {
    return _blob_get_length(
      blob,
    );
  }

  late final _blob_get_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_blob>)>>('hb_blob_get_length');
  late final _blob_get_length = _blob_get_lengthPtr.asFunction<int Function(ffi.Pointer<hb_blob>)>();

  ffi.Pointer<ffi.Char> blob_get_data(
    ffi.Pointer<hb_blob> blob,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _blob_get_data(
      blob,
      length,
    );
  }

  late final _blob_get_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'hb_blob_get_data');
  late final _blob_get_data = _blob_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> blob_get_data_writable(
    ffi.Pointer<hb_blob> blob,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _blob_get_data_writable(
      blob,
      length,
    );
  }

  late final _blob_get_data_writablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'hb_blob_get_data_writable');
  late final _blob_get_data_writable = _blob_get_data_writablePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob>, ffi.Pointer<ffi.UnsignedInt>)>();

  int face_count(
    ffi.Pointer<hb_blob> blob,
  ) {
    return _face_count(
      blob,
    );
  }

  late final _face_countPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_blob>)>>('hb_face_count');
  late final _face_count = _face_countPtr.asFunction<int Function(ffi.Pointer<hb_blob>)>();

  ffi.Pointer<hb_face> face_create(
    ffi.Pointer<hb_blob> blob,
    int index,
  ) {
    return _face_create(
      blob,
      index,
    );
  }

  late final _face_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function(ffi.Pointer<hb_blob>, ffi.UnsignedInt)>>(
          'hb_face_create');
  late final _face_create = _face_createPtr.asFunction<ffi.Pointer<hb_face> Function(ffi.Pointer<hb_blob>, int)>();

  ffi.Pointer<hb_face> face_create_for_tables(
    hb_reference_table_func reference_table_func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _face_create_for_tables(
      reference_table_func,
      user_data,
      destroy,
    );
  }

  late final _face_create_for_tablesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_face> Function(
              hb_reference_table_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>>('hb_face_create_for_tables');
  late final _face_create_for_tables = _face_create_for_tablesPtr
      .asFunction<ffi.Pointer<hb_face> Function(hb_reference_table_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  ffi.Pointer<hb_face> face_get_empty() {
    return _face_get_empty();
  }

  late final _face_get_emptyPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function()>>('hb_face_get_empty');
  late final _face_get_empty = _face_get_emptyPtr.asFunction<ffi.Pointer<hb_face> Function()>();

  ffi.Pointer<hb_face> face_reference(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_reference(
      face,
    );
  }

  late final _face_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function(ffi.Pointer<hb_face>)>>('hb_face_reference');
  late final _face_reference = _face_referencePtr.asFunction<ffi.Pointer<hb_face> Function(ffi.Pointer<hb_face>)>();

  void face_destroy(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_destroy(
      face,
    );
  }

  late final _face_destroyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>)>>('hb_face_destroy');
  late final _face_destroy = _face_destroyPtr.asFunction<void Function(ffi.Pointer<hb_face>)>();

  int face_set_user_data(
    ffi.Pointer<hb_face> face,
    ffi.Pointer<hb_user_data_key> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func destroy,
    int replace,
  ) {
    return _face_set_user_data(
      face,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _face_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func,
              hb_bool)>>('hb_face_set_user_data');
  late final _face_set_user_data = _face_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func, int)>();

  ffi.Pointer<ffi.Void> face_get_user_data(
    ffi.Pointer<hb_face> face,
    ffi.Pointer<hb_user_data_key> key,
  ) {
    return _face_get_user_data(
      face,
      key,
    );
  }

  late final _face_get_user_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_user_data_key>)>>(
          'hb_face_get_user_data');
  late final _face_get_user_data = _face_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_user_data_key>)>();

  void face_make_immutable(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_make_immutable(
      face,
    );
  }

  late final _face_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>)>>('hb_face_make_immutable');
  late final _face_make_immutable = _face_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_face>)>();

  int face_is_immutable(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_is_immutable(
      face,
    );
  }

  late final _face_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_face>)>>('hb_face_is_immutable');
  late final _face_is_immutable = _face_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_face>)>();

  ffi.Pointer<hb_blob> face_reference_table(
    ffi.Pointer<hb_face> face,
    int tag,
  ) {
    return _face_reference_table(
      face,
      tag,
    );
  }

  late final _face_reference_tablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_face>, hb_tag)>>(
          'hb_face_reference_table');
  late final _face_reference_table =
      _face_reference_tablePtr.asFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_face>, int)>();

  ffi.Pointer<hb_blob> face_reference_blob(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_reference_blob(
      face,
    );
  }

  late final _face_reference_blobPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_face>)>>('hb_face_reference_blob');
  late final _face_reference_blob =
      _face_reference_blobPtr.asFunction<ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_face>)>();

  void face_set_index(
    ffi.Pointer<hb_face> face,
    int index,
  ) {
    return _face_set_index(
      face,
      index,
    );
  }

  late final _face_set_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>, ffi.UnsignedInt)>>('hb_face_set_index');
  late final _face_set_index = _face_set_indexPtr.asFunction<void Function(ffi.Pointer<hb_face>, int)>();

  int face_get_index(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_get_index(
      face,
    );
  }

  late final _face_get_indexPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_face>)>>('hb_face_get_index');
  late final _face_get_index = _face_get_indexPtr.asFunction<int Function(ffi.Pointer<hb_face>)>();

  void face_set_upem(
    ffi.Pointer<hb_face> face,
    int upem,
  ) {
    return _face_set_upem(
      face,
      upem,
    );
  }

  late final _face_set_upemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>, ffi.UnsignedInt)>>('hb_face_set_upem');
  late final _face_set_upem = _face_set_upemPtr.asFunction<void Function(ffi.Pointer<hb_face>, int)>();

  int face_get_upem(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_get_upem(
      face,
    );
  }

  late final _face_get_upemPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_face>)>>('hb_face_get_upem');
  late final _face_get_upem = _face_get_upemPtr.asFunction<int Function(ffi.Pointer<hb_face>)>();

  void face_set_glyph_count(
    ffi.Pointer<hb_face> face,
    int glyph_count,
  ) {
    return _face_set_glyph_count(
      face,
      glyph_count,
    );
  }

  late final _face_set_glyph_countPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>, ffi.UnsignedInt)>>('hb_face_set_glyph_count');
  late final _face_set_glyph_count = _face_set_glyph_countPtr.asFunction<void Function(ffi.Pointer<hb_face>, int)>();

  int face_get_glyph_count(
    ffi.Pointer<hb_face> face,
  ) {
    return _face_get_glyph_count(
      face,
    );
  }

  late final _face_get_glyph_countPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_face>)>>('hb_face_get_glyph_count');
  late final _face_get_glyph_count = _face_get_glyph_countPtr.asFunction<int Function(ffi.Pointer<hb_face>)>();

  int face_get_table_tags(
    ffi.Pointer<hb_face> face,
    int start_offset,
    ffi.Pointer<ffi.UnsignedInt> table_count,
    ffi.Pointer<hb_tag> table_tags,
  ) {
    return _face_get_table_tags(
      face,
      start_offset,
      table_count,
      table_tags,
    );
  }

  late final _face_get_table_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_face>, ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<hb_tag>)>>('hb_face_get_table_tags');
  late final _face_get_table_tags = _face_get_table_tagsPtr
      .asFunction<int Function(ffi.Pointer<hb_face>, int, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<hb_tag>)>();

  void face_collect_unicodes(
    ffi.Pointer<hb_face> face,
    ffi.Pointer<hb_set> out,
  ) {
    return _face_collect_unicodes(
      face,
      out,
    );
  }

  late final _face_collect_unicodesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_set>)>>(
          'hb_face_collect_unicodes');
  late final _face_collect_unicodes =
      _face_collect_unicodesPtr.asFunction<void Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_set>)>();

  void face_collect_variation_selectors(
    ffi.Pointer<hb_face> face,
    ffi.Pointer<hb_set> out,
  ) {
    return _face_collect_variation_selectors(
      face,
      out,
    );
  }

  late final _face_collect_variation_selectorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_set>)>>(
          'hb_face_collect_variation_selectors');
  late final _face_collect_variation_selectors =
      _face_collect_variation_selectorsPtr.asFunction<void Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_set>)>();

  void face_collect_variation_unicodes(
    ffi.Pointer<hb_face> face,
    int variation_selector,
    ffi.Pointer<hb_set> out,
  ) {
    return _face_collect_variation_unicodes(
      face,
      variation_selector,
      out,
    );
  }

  late final _face_collect_variation_unicodesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>, hb_codepoint, ffi.Pointer<hb_set>)>>(
          'hb_face_collect_variation_unicodes');
  late final _face_collect_variation_unicodes =
      _face_collect_variation_unicodesPtr.asFunction<void Function(ffi.Pointer<hb_face>, int, ffi.Pointer<hb_set>)>();

  ffi.Pointer<hb_face> face_builder_create() {
    return _face_builder_create();
  }

  late final _face_builder_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function()>>('hb_face_builder_create');
  late final _face_builder_create = _face_builder_createPtr.asFunction<ffi.Pointer<hb_face> Function()>();

  int face_builder_add_table(
    ffi.Pointer<hb_face> face,
    int tag,
    ffi.Pointer<hb_blob> blob,
  ) {
    return _face_builder_add_table(
      face,
      tag,
      blob,
    );
  }

  late final _face_builder_add_tablePtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_face>, hb_tag, ffi.Pointer<hb_blob>)>>(
          'hb_face_builder_add_table');
  late final _face_builder_add_table =
      _face_builder_add_tablePtr.asFunction<int Function(ffi.Pointer<hb_face>, int, ffi.Pointer<hb_blob>)>();

  void face_builder_sort_tables(
    ffi.Pointer<hb_face> face,
    ffi.Pointer<hb_tag> tags,
  ) {
    return _face_builder_sort_tables(
      face,
      tags,
    );
  }

  late final _face_builder_sort_tablesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_tag>)>>(
          'hb_face_builder_sort_tables');
  late final _face_builder_sort_tables =
      _face_builder_sort_tablesPtr.asFunction<void Function(ffi.Pointer<hb_face>, ffi.Pointer<hb_tag>)>();

  ffi.Pointer<hb_font_funcs> font_funcs_create() {
    return _font_funcs_create();
  }

  late final _font_funcs_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_funcs> Function()>>('hb_font_funcs_create');
  late final _font_funcs_create = _font_funcs_createPtr.asFunction<ffi.Pointer<hb_font_funcs> Function()>();

  ffi.Pointer<hb_font_funcs> font_funcs_get_empty() {
    return _font_funcs_get_empty();
  }

  late final _font_funcs_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_funcs> Function()>>('hb_font_funcs_get_empty');
  late final _font_funcs_get_empty = _font_funcs_get_emptyPtr.asFunction<ffi.Pointer<hb_font_funcs> Function()>();

  ffi.Pointer<hb_font_funcs> font_funcs_reference(
    ffi.Pointer<hb_font_funcs> ffuncs,
  ) {
    return _font_funcs_reference(
      ffuncs,
    );
  }

  late final _font_funcs_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_funcs> Function(ffi.Pointer<hb_font_funcs>)>>(
          'hb_font_funcs_reference');
  late final _font_funcs_reference =
      _font_funcs_referencePtr.asFunction<ffi.Pointer<hb_font_funcs> Function(ffi.Pointer<hb_font_funcs>)>();

  void font_funcs_destroy(
    ffi.Pointer<hb_font_funcs> ffuncs,
  ) {
    return _font_funcs_destroy(
      ffuncs,
    );
  }

  late final _font_funcs_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_funcs>)>>('hb_font_funcs_destroy');
  late final _font_funcs_destroy = _font_funcs_destroyPtr.asFunction<void Function(ffi.Pointer<hb_font_funcs>)>();

  int font_funcs_set_user_data(
    ffi.Pointer<hb_font_funcs> ffuncs,
    ffi.Pointer<hb_user_data_key> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func destroy,
    int replace,
  ) {
    return _font_funcs_set_user_data(
      ffuncs,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _font_funcs_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font_funcs>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>,
              hb_destroy_func, hb_bool)>>('hb_font_funcs_set_user_data');
  late final _font_funcs_set_user_data = _font_funcs_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_font_funcs>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func, int)>();

  ffi.Pointer<ffi.Void> font_funcs_get_user_data(
    ffi.Pointer<hb_font_funcs> ffuncs,
    ffi.Pointer<hb_user_data_key> key,
  ) {
    return _font_funcs_get_user_data(
      ffuncs,
      key,
    );
  }

  late final _font_funcs_get_user_dataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_font_funcs>, ffi.Pointer<hb_user_data_key>)>>(
      'hb_font_funcs_get_user_data');
  late final _font_funcs_get_user_data = _font_funcs_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_font_funcs>, ffi.Pointer<hb_user_data_key>)>();

  void font_funcs_make_immutable(
    ffi.Pointer<hb_font_funcs> ffuncs,
  ) {
    return _font_funcs_make_immutable(
      ffuncs,
    );
  }

  late final _font_funcs_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_funcs>)>>('hb_font_funcs_make_immutable');
  late final _font_funcs_make_immutable =
      _font_funcs_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_font_funcs>)>();

  int font_funcs_is_immutable(
    ffi.Pointer<hb_font_funcs> ffuncs,
  ) {
    return _font_funcs_is_immutable(
      ffuncs,
    );
  }

  late final _font_funcs_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_font_funcs>)>>('hb_font_funcs_is_immutable');
  late final _font_funcs_is_immutable =
      _font_funcs_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_font_funcs>)>();

  void font_funcs_set_font_h_extents_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_font_h_extents_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_font_h_extents_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_font_h_extents_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_font_h_extents_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_font_h_extents_func');
  late final _font_funcs_set_font_h_extents_func = _font_funcs_set_font_h_extents_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_font_h_extents_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_font_v_extents_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_font_v_extents_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_font_v_extents_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_font_v_extents_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_font_v_extents_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_font_v_extents_func');
  late final _font_funcs_set_font_v_extents_func = _font_funcs_set_font_v_extents_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_font_v_extents_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_nominal_glyph_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_nominal_glyph_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_nominal_glyph_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_nominal_glyph_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_nominal_glyph_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_nominal_glyph_func');
  late final _font_funcs_set_nominal_glyph_func = _font_funcs_set_nominal_glyph_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_nominal_glyph_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_nominal_glyphs_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_nominal_glyphs_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_nominal_glyphs_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_nominal_glyphs_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_nominal_glyphs_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_nominal_glyphs_func');
  late final _font_funcs_set_nominal_glyphs_func = _font_funcs_set_nominal_glyphs_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_nominal_glyphs_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_variation_glyph_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_variation_glyph_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_variation_glyph_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_variation_glyph_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_variation_glyph_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_variation_glyph_func');
  late final _font_funcs_set_variation_glyph_func = _font_funcs_set_variation_glyph_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_variation_glyph_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_h_advance_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_h_advance_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_h_advance_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_h_advance_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_advance_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_h_advance_func');
  late final _font_funcs_set_glyph_h_advance_func = _font_funcs_set_glyph_h_advance_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_advance_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_v_advance_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_v_advance_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_v_advance_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_v_advance_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_v_advance_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_v_advance_func');
  late final _font_funcs_set_glyph_v_advance_func = _font_funcs_set_glyph_v_advance_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_v_advance_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_h_advances_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_h_advances_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_h_advances_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_h_advances_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_advances_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_h_advances_func');
  late final _font_funcs_set_glyph_h_advances_func = _font_funcs_set_glyph_h_advances_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_advances_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_v_advances_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_v_advances_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_v_advances_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_v_advances_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_v_advances_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_v_advances_func');
  late final _font_funcs_set_glyph_v_advances_func = _font_funcs_set_glyph_v_advances_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_v_advances_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_h_origin_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_h_origin_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_h_origin_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_h_origin_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_origin_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_h_origin_func');
  late final _font_funcs_set_glyph_h_origin_func = _font_funcs_set_glyph_h_origin_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_origin_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_v_origin_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_v_origin_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_v_origin_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_v_origin_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_v_origin_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_v_origin_func');
  late final _font_funcs_set_glyph_v_origin_func = _font_funcs_set_glyph_v_origin_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_v_origin_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_h_kerning_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_h_kerning_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_h_kerning_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_h_kerning_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_kerning_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_h_kerning_func');
  late final _font_funcs_set_glyph_h_kerning_func = _font_funcs_set_glyph_h_kerning_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_h_kerning_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_extents_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_extents_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_extents_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_extents_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_extents_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_extents_func');
  late final _font_funcs_set_glyph_extents_func = _font_funcs_set_glyph_extents_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_extents_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_contour_point_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_contour_point_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_contour_point_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_contour_point_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_contour_point_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_contour_point_func');
  late final _font_funcs_set_glyph_contour_point_func = _font_funcs_set_glyph_contour_point_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_contour_point_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_name_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_name_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_name_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_name_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_name_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_name_func');
  late final _font_funcs_set_glyph_name_func = _font_funcs_set_glyph_name_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_name_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_from_name_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_from_name_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_from_name_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_from_name_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_from_name_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_from_name_func');
  late final _font_funcs_set_glyph_from_name_func = _font_funcs_set_glyph_from_name_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_from_name_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_funcs_set_glyph_shape_func(
    ffi.Pointer<hb_font_funcs> ffuncs,
    hb_font_get_glyph_shape_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _font_funcs_set_glyph_shape_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _font_funcs_set_glyph_shape_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_shape_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_funcs_set_glyph_shape_func');
  late final _font_funcs_set_glyph_shape_func = _font_funcs_set_glyph_shape_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs>, hb_font_get_glyph_shape_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  int font_get_h_extents(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_font_extents> extents,
  ) {
    return _font_get_h_extents(
      font,
      extents,
    );
  }

  late final _font_get_h_extentsPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font_extents>)>>(
          'hb_font_get_h_extents');
  late final _font_get_h_extents =
      _font_get_h_extentsPtr.asFunction<int Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font_extents>)>();

  int font_get_v_extents(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_font_extents> extents,
  ) {
    return _font_get_v_extents(
      font,
      extents,
    );
  }

  late final _font_get_v_extentsPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font_extents>)>>(
          'hb_font_get_v_extents');
  late final _font_get_v_extents =
      _font_get_v_extentsPtr.asFunction<int Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font_extents>)>();

  int font_get_nominal_glyph(
    ffi.Pointer<hb_font> font,
    int unicode,
    ffi.Pointer<hb_codepoint> glyph,
  ) {
    return _font_get_nominal_glyph(
      font,
      unicode,
      glyph,
    );
  }

  late final _font_get_nominal_glyphPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Pointer<hb_codepoint>)>>(
          'hb_font_get_nominal_glyph');
  late final _font_get_nominal_glyph =
      _font_get_nominal_glyphPtr.asFunction<int Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_codepoint>)>();

  int font_get_variation_glyph(
    ffi.Pointer<hb_font> font,
    int unicode,
    int variation_selector,
    ffi.Pointer<hb_codepoint> glyph,
  ) {
    return _font_get_variation_glyph(
      font,
      unicode,
      variation_selector,
      glyph,
    );
  }

  late final _font_get_variation_glyphPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, hb_codepoint,
              ffi.Pointer<hb_codepoint>)>>('hb_font_get_variation_glyph');
  late final _font_get_variation_glyph = _font_get_variation_glyphPtr
      .asFunction<int Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_codepoint>)>();

  int font_get_nominal_glyphs(
    ffi.Pointer<hb_font> font,
    int count,
    ffi.Pointer<hb_codepoint> first_unicode,
    int unicode_stride,
    ffi.Pointer<hb_codepoint> first_glyph,
    int glyph_stride,
  ) {
    return _font_get_nominal_glyphs(
      font,
      count,
      first_unicode,
      unicode_stride,
      first_glyph,
      glyph_stride,
    );
  }

  late final _font_get_nominal_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_font>, ffi.UnsignedInt, ffi.Pointer<hb_codepoint>, ffi.UnsignedInt,
              ffi.Pointer<hb_codepoint>, ffi.UnsignedInt)>>('hb_font_get_nominal_glyphs');
  late final _font_get_nominal_glyphs = _font_get_nominal_glyphsPtr.asFunction<
      int Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_codepoint>, int, ffi.Pointer<hb_codepoint>, int)>();

  int font_get_glyph_h_advance(
    ffi.Pointer<hb_font> font,
    int glyph,
  ) {
    return _font_get_glyph_h_advance(
      font,
      glyph,
    );
  }

  late final _font_get_glyph_h_advancePtr =
      _lookup<ffi.NativeFunction<hb_position Function(ffi.Pointer<hb_font>, hb_codepoint)>>(
          'hb_font_get_glyph_h_advance');
  late final _font_get_glyph_h_advance =
      _font_get_glyph_h_advancePtr.asFunction<int Function(ffi.Pointer<hb_font>, int)>();

  int font_get_glyph_v_advance(
    ffi.Pointer<hb_font> font,
    int glyph,
  ) {
    return _font_get_glyph_v_advance(
      font,
      glyph,
    );
  }

  late final _font_get_glyph_v_advancePtr =
      _lookup<ffi.NativeFunction<hb_position Function(ffi.Pointer<hb_font>, hb_codepoint)>>(
          'hb_font_get_glyph_v_advance');
  late final _font_get_glyph_v_advance =
      _font_get_glyph_v_advancePtr.asFunction<int Function(ffi.Pointer<hb_font>, int)>();

  void font_get_glyph_h_advances(
    ffi.Pointer<hb_font> font,
    int count,
    ffi.Pointer<hb_codepoint> first_glyph,
    int glyph_stride,
    ffi.Pointer<hb_position> first_advance,
    int advance_stride,
  ) {
    return _font_get_glyph_h_advances(
      font,
      count,
      first_glyph,
      glyph_stride,
      first_advance,
      advance_stride,
    );
  }

  late final _font_get_glyph_h_advancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, ffi.UnsignedInt, ffi.Pointer<hb_codepoint>, ffi.UnsignedInt,
              ffi.Pointer<hb_position>, ffi.UnsignedInt)>>('hb_font_get_glyph_h_advances');
  late final _font_get_glyph_h_advances = _font_get_glyph_h_advancesPtr.asFunction<
      void Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_codepoint>, int, ffi.Pointer<hb_position>, int)>();

  void font_get_glyph_v_advances(
    ffi.Pointer<hb_font> font,
    int count,
    ffi.Pointer<hb_codepoint> first_glyph,
    int glyph_stride,
    ffi.Pointer<hb_position> first_advance,
    int advance_stride,
  ) {
    return _font_get_glyph_v_advances(
      font,
      count,
      first_glyph,
      glyph_stride,
      first_advance,
      advance_stride,
    );
  }

  late final _font_get_glyph_v_advancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, ffi.UnsignedInt, ffi.Pointer<hb_codepoint>, ffi.UnsignedInt,
              ffi.Pointer<hb_position>, ffi.UnsignedInt)>>('hb_font_get_glyph_v_advances');
  late final _font_get_glyph_v_advances = _font_get_glyph_v_advancesPtr.asFunction<
      void Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_codepoint>, int, ffi.Pointer<hb_position>, int)>();

  int font_get_glyph_h_origin(
    ffi.Pointer<hb_font> font,
    int glyph,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_get_glyph_h_origin(
      font,
      glyph,
      x,
      y,
    );
  }

  late final _font_get_glyph_h_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_get_glyph_h_origin');
  late final _font_get_glyph_h_origin = _font_get_glyph_h_originPtr
      .asFunction<int Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  int font_get_glyph_v_origin(
    ffi.Pointer<hb_font> font,
    int glyph,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_get_glyph_v_origin(
      font,
      glyph,
      x,
      y,
    );
  }

  late final _font_get_glyph_v_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_get_glyph_v_origin');
  late final _font_get_glyph_v_origin = _font_get_glyph_v_originPtr
      .asFunction<int Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  int font_get_glyph_h_kerning(
    ffi.Pointer<hb_font> font,
    int left_glyph,
    int right_glyph,
  ) {
    return _font_get_glyph_h_kerning(
      font,
      left_glyph,
      right_glyph,
    );
  }

  late final _font_get_glyph_h_kerningPtr =
      _lookup<ffi.NativeFunction<hb_position Function(ffi.Pointer<hb_font>, hb_codepoint, hb_codepoint)>>(
          'hb_font_get_glyph_h_kerning');
  late final _font_get_glyph_h_kerning =
      _font_get_glyph_h_kerningPtr.asFunction<int Function(ffi.Pointer<hb_font>, int, int)>();

  int font_get_glyph_extents(
    ffi.Pointer<hb_font> font,
    int glyph,
    ffi.Pointer<hb_glyph_extents> extents,
  ) {
    return _font_get_glyph_extents(
      font,
      glyph,
      extents,
    );
  }

  late final _font_get_glyph_extentsPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Pointer<hb_glyph_extents>)>>(
          'hb_font_get_glyph_extents');
  late final _font_get_glyph_extents =
      _font_get_glyph_extentsPtr.asFunction<int Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_glyph_extents>)>();

  int font_get_glyph_contour_point(
    ffi.Pointer<hb_font> font,
    int glyph,
    int point_index,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_get_glyph_contour_point(
      font,
      glyph,
      point_index,
      x,
      y,
    );
  }

  late final _font_get_glyph_contour_pointPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.UnsignedInt, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_get_glyph_contour_point');
  late final _font_get_glyph_contour_point = _font_get_glyph_contour_pointPtr
      .asFunction<int Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  int font_get_glyph_name(
    ffi.Pointer<hb_font> font,
    int glyph,
    ffi.Pointer<ffi.Char> name,
    int size,
  ) {
    return _font_get_glyph_name(
      font,
      glyph,
      name,
      size,
    );
  }

  late final _font_get_glyph_namePtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(
              ffi.Pointer<hb_font>, hb_codepoint, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('hb_font_get_glyph_name');
  late final _font_get_glyph_name =
      _font_get_glyph_namePtr.asFunction<int Function(ffi.Pointer<hb_font>, int, ffi.Pointer<ffi.Char>, int)>();

  int font_get_glyph_from_name(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.Char> name,
    int len,
    ffi.Pointer<hb_codepoint> glyph,
  ) {
    return _font_get_glyph_from_name(
      font,
      name,
      len,
      glyph,
    );
  }

  late final _font_get_glyph_from_namePtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<hb_codepoint>)>>('hb_font_get_glyph_from_name');
  late final _font_get_glyph_from_name = _font_get_glyph_from_namePtr
      .asFunction<int Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_codepoint>)>();

  void font_get_glyph_shape(
    ffi.Pointer<hb_font> font,
    int glyph,
    ffi.Pointer<hb_draw_funcs> dfuncs,
    ffi.Pointer<ffi.Void> draw_data,
  ) {
    return _font_get_glyph_shape(
      font,
      glyph,
      dfuncs,
      draw_data,
    );
  }

  late final _font_get_glyph_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Pointer<hb_draw_funcs>,
              ffi.Pointer<ffi.Void>)>>('hb_font_get_glyph_shape');
  late final _font_get_glyph_shape = _font_get_glyph_shapePtr
      .asFunction<void Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_draw_funcs>, ffi.Pointer<ffi.Void>)>();

  int font_get_glyph(
    ffi.Pointer<hb_font> font,
    int unicode,
    int variation_selector,
    ffi.Pointer<hb_codepoint> glyph,
  ) {
    return _font_get_glyph(
      font,
      unicode,
      variation_selector,
      glyph,
    );
  }

  late final _font_get_glyphPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(
              ffi.Pointer<hb_font>, hb_codepoint, hb_codepoint, ffi.Pointer<hb_codepoint>)>>('hb_font_get_glyph');
  late final _font_get_glyph =
      _font_get_glyphPtr.asFunction<int Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_codepoint>)>();

  void font_get_extents_for_direction(
    ffi.Pointer<hb_font> font,
    int direction,
    ffi.Pointer<hb_font_extents> extents,
  ) {
    return _font_get_extents_for_direction(
      font,
      direction,
      extents,
    );
  }

  late final _font_get_extents_for_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Int32, ffi.Pointer<hb_font_extents>)>>(
          'hb_font_get_extents_for_direction');
  late final _font_get_extents_for_direction = _font_get_extents_for_directionPtr
      .asFunction<void Function(ffi.Pointer<hb_font>, int, ffi.Pointer<hb_font_extents>)>();

  void font_get_glyph_advance_for_direction(
    ffi.Pointer<hb_font> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_get_glyph_advance_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _font_get_glyph_advance_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Int32, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_get_glyph_advance_for_direction');
  late final _font_get_glyph_advance_for_direction = _font_get_glyph_advance_for_directionPtr
      .asFunction<void Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  void font_get_glyph_advances_for_direction(
    ffi.Pointer<hb_font> font,
    int direction,
    int count,
    ffi.Pointer<hb_codepoint> first_glyph,
    int glyph_stride,
    ffi.Pointer<hb_position> first_advance,
    int advance_stride,
  ) {
    return _font_get_glyph_advances_for_direction(
      font,
      direction,
      count,
      first_glyph,
      glyph_stride,
      first_advance,
      advance_stride,
    );
  }

  late final _font_get_glyph_advances_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, ffi.Int32, ffi.UnsignedInt, ffi.Pointer<hb_codepoint>,
              ffi.UnsignedInt, ffi.Pointer<hb_position>, ffi.UnsignedInt)>>('hb_font_get_glyph_advances_for_direction');
  late final _font_get_glyph_advances_for_direction = _font_get_glyph_advances_for_directionPtr.asFunction<
      void Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_codepoint>, int, ffi.Pointer<hb_position>, int)>();

  void font_get_glyph_origin_for_direction(
    ffi.Pointer<hb_font> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_get_glyph_origin_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _font_get_glyph_origin_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Int32, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_get_glyph_origin_for_direction');
  late final _font_get_glyph_origin_for_direction = _font_get_glyph_origin_for_directionPtr
      .asFunction<void Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  void font_add_glyph_origin_for_direction(
    ffi.Pointer<hb_font> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_add_glyph_origin_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _font_add_glyph_origin_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Int32, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_add_glyph_origin_for_direction');
  late final _font_add_glyph_origin_for_direction = _font_add_glyph_origin_for_directionPtr
      .asFunction<void Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  void font_subtract_glyph_origin_for_direction(
    ffi.Pointer<hb_font> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_subtract_glyph_origin_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _font_subtract_glyph_origin_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Int32, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_subtract_glyph_origin_for_direction');
  late final _font_subtract_glyph_origin_for_direction = _font_subtract_glyph_origin_for_directionPtr
      .asFunction<void Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  void font_get_glyph_kerning_for_direction(
    ffi.Pointer<hb_font> font,
    int first_glyph,
    int second_glyph,
    int direction,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_get_glyph_kerning_for_direction(
      font,
      first_glyph,
      second_glyph,
      direction,
      x,
      y,
    );
  }

  late final _font_get_glyph_kerning_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, hb_codepoint, hb_codepoint, ffi.Int32, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_get_glyph_kerning_for_direction');
  late final _font_get_glyph_kerning_for_direction = _font_get_glyph_kerning_for_directionPtr.asFunction<
      void Function(ffi.Pointer<hb_font>, int, int, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  int font_get_glyph_extents_for_origin(
    ffi.Pointer<hb_font> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_glyph_extents> extents,
  ) {
    return _font_get_glyph_extents_for_origin(
      font,
      glyph,
      direction,
      extents,
    );
  }

  late final _font_get_glyph_extents_for_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.Int32,
              ffi.Pointer<hb_glyph_extents>)>>('hb_font_get_glyph_extents_for_origin');
  late final _font_get_glyph_extents_for_origin = _font_get_glyph_extents_for_originPtr
      .asFunction<int Function(ffi.Pointer<hb_font>, int, int, ffi.Pointer<hb_glyph_extents>)>();

  int font_get_glyph_contour_point_for_origin(
    ffi.Pointer<hb_font> font,
    int glyph,
    int point_index,
    int direction,
    ffi.Pointer<hb_position> x,
    ffi.Pointer<hb_position> y,
  ) {
    return _font_get_glyph_contour_point_for_origin(
      font,
      glyph,
      point_index,
      direction,
      x,
      y,
    );
  }

  late final _font_get_glyph_contour_point_for_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, hb_codepoint, ffi.UnsignedInt, ffi.Int32, ffi.Pointer<hb_position>,
              ffi.Pointer<hb_position>)>>('hb_font_get_glyph_contour_point_for_origin');
  late final _font_get_glyph_contour_point_for_origin = _font_get_glyph_contour_point_for_originPtr.asFunction<
      int Function(ffi.Pointer<hb_font>, int, int, int, ffi.Pointer<hb_position>, ffi.Pointer<hb_position>)>();

  void font_glyph_to_string(
    ffi.Pointer<hb_font> font,
    int glyph,
    ffi.Pointer<ffi.Char> s,
    int size,
  ) {
    return _font_glyph_to_string(
      font,
      glyph,
      s,
      size,
    );
  }

  late final _font_glyph_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hb_font>, hb_codepoint, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('hb_font_glyph_to_string');
  late final _font_glyph_to_string =
      _font_glyph_to_stringPtr.asFunction<void Function(ffi.Pointer<hb_font>, int, ffi.Pointer<ffi.Char>, int)>();

  int font_glyph_from_string(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.Char> s,
    int len,
    ffi.Pointer<hb_codepoint> glyph,
  ) {
    return _font_glyph_from_string(
      font,
      s,
      len,
      glyph,
    );
  }

  late final _font_glyph_from_stringPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<hb_codepoint>)>>('hb_font_glyph_from_string');
  late final _font_glyph_from_string = _font_glyph_from_stringPtr
      .asFunction<int Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_codepoint>)>();

  ffi.Pointer<hb_font> font_create(
    ffi.Pointer<hb_face> face,
  ) {
    return _font_create(
      face,
    );
  }

  late final _font_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_face>)>>('hb_font_create');
  late final _font_create = _font_createPtr.asFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_face>)>();

  ffi.Pointer<hb_font> font_create_sub_font(
    ffi.Pointer<hb_font> parent,
  ) {
    return _font_create_sub_font(
      parent,
    );
  }

  late final _font_create_sub_fontPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_font>)>>('hb_font_create_sub_font');
  late final _font_create_sub_font =
      _font_create_sub_fontPtr.asFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_font>)>();

  ffi.Pointer<hb_font> font_get_empty() {
    return _font_get_empty();
  }

  late final _font_get_emptyPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_font> Function()>>('hb_font_get_empty');
  late final _font_get_empty = _font_get_emptyPtr.asFunction<ffi.Pointer<hb_font> Function()>();

  ffi.Pointer<hb_font> font_reference(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_reference(
      font,
    );
  }

  late final _font_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_font>)>>('hb_font_reference');
  late final _font_reference = _font_referencePtr.asFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_font>)>();

  void font_destroy(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_destroy(
      font,
    );
  }

  late final _font_destroyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>)>>('hb_font_destroy');
  late final _font_destroy = _font_destroyPtr.asFunction<void Function(ffi.Pointer<hb_font>)>();

  int font_set_user_data(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_user_data_key> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func destroy,
    int replace,
  ) {
    return _font_set_user_data(
      font,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _font_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func,
              hb_bool)>>('hb_font_set_user_data');
  late final _font_set_user_data = _font_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func, int)>();

  ffi.Pointer<ffi.Void> font_get_user_data(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_user_data_key> key,
  ) {
    return _font_get_user_data(
      font,
      key,
    );
  }

  late final _font_get_user_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_user_data_key>)>>(
          'hb_font_get_user_data');
  late final _font_get_user_data = _font_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_user_data_key>)>();

  void font_make_immutable(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_make_immutable(
      font,
    );
  }

  late final _font_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>)>>('hb_font_make_immutable');
  late final _font_make_immutable = _font_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_font>)>();

  int font_is_immutable(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_is_immutable(
      font,
    );
  }

  late final _font_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_font>)>>('hb_font_is_immutable');
  late final _font_is_immutable = _font_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_font>)>();

  int font_get_serial(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_get_serial(
      font,
    );
  }

  late final _font_get_serialPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_font>)>>('hb_font_get_serial');
  late final _font_get_serial = _font_get_serialPtr.asFunction<int Function(ffi.Pointer<hb_font>)>();

  void font_changed(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_changed(
      font,
    );
  }

  late final _font_changedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>)>>('hb_font_changed');
  late final _font_changed = _font_changedPtr.asFunction<void Function(ffi.Pointer<hb_font>)>();

  void font_set_parent(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_font> parent,
  ) {
    return _font_set_parent(
      font,
      parent,
    );
  }

  late final _font_set_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font>)>>('hb_font_set_parent');
  late final _font_set_parent =
      _font_set_parentPtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font>)>();

  ffi.Pointer<hb_font> font_get_parent(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_get_parent(
      font,
    );
  }

  late final _font_get_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_font>)>>('hb_font_get_parent');
  late final _font_get_parent = _font_get_parentPtr.asFunction<ffi.Pointer<hb_font> Function(ffi.Pointer<hb_font>)>();

  void font_set_face(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_face> face,
  ) {
    return _font_set_face(
      font,
      face,
    );
  }

  late final _font_set_facePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_face>)>>('hb_font_set_face');
  late final _font_set_face = _font_set_facePtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_face>)>();

  ffi.Pointer<hb_face> font_get_face(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_get_face(
      font,
    );
  }

  late final _font_get_facePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function(ffi.Pointer<hb_font>)>>('hb_font_get_face');
  late final _font_get_face = _font_get_facePtr.asFunction<ffi.Pointer<hb_face> Function(ffi.Pointer<hb_font>)>();

  void font_set_funcs(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_font_funcs> klass,
    ffi.Pointer<ffi.Void> font_data,
    hb_destroy_func destroy,
  ) {
    return _font_set_funcs(
      font,
      klass,
      font_data,
      destroy,
    );
  }

  late final _font_set_funcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font_funcs>, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_font_set_funcs');
  late final _font_set_funcs = _font_set_funcsPtr.asFunction<
      void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_font_funcs>, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_set_funcs_data(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.Void> font_data,
    hb_destroy_func destroy,
  ) {
    return _font_set_funcs_data(
      font,
      font_data,
      destroy,
    );
  }

  late final _font_set_funcs_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Void>, hb_destroy_func)>>(
          'hb_font_set_funcs_data');
  late final _font_set_funcs_data =
      _font_set_funcs_dataPtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void font_set_scale(
    ffi.Pointer<hb_font> font,
    int x_scale,
    int y_scale,
  ) {
    return _font_set_scale(
      font,
      x_scale,
      y_scale,
    );
  }

  late final _font_set_scalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Int, ffi.Int)>>('hb_font_set_scale');
  late final _font_set_scale = _font_set_scalePtr.asFunction<void Function(ffi.Pointer<hb_font>, int, int)>();

  void font_get_scale(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.Int> x_scale,
    ffi.Pointer<ffi.Int> y_scale,
  ) {
    return _font_get_scale(
      font,
      x_scale,
      y_scale,
    );
  }

  late final _font_get_scalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>(
          'hb_font_get_scale');
  late final _font_get_scale =
      _font_get_scalePtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void font_set_ppem(
    ffi.Pointer<hb_font> font,
    int x_ppem,
    int y_ppem,
  ) {
    return _font_set_ppem(
      font,
      x_ppem,
      y_ppem,
    );
  }

  late final _font_set_ppemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.UnsignedInt, ffi.UnsignedInt)>>(
          'hb_font_set_ppem');
  late final _font_set_ppem = _font_set_ppemPtr.asFunction<void Function(ffi.Pointer<hb_font>, int, int)>();

  void font_get_ppem(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.UnsignedInt> x_ppem,
    ffi.Pointer<ffi.UnsignedInt> y_ppem,
  ) {
    return _font_get_ppem(
      font,
      x_ppem,
      y_ppem,
    );
  }

  late final _font_get_ppemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hb_font>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>('hb_font_get_ppem');
  late final _font_get_ppem = _font_get_ppemPtr
      .asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void font_set_ptem(
    ffi.Pointer<hb_font> font,
    double ptem,
  ) {
    return _font_set_ptem(
      font,
      ptem,
    );
  }

  late final _font_set_ptemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Float)>>('hb_font_set_ptem');
  late final _font_set_ptem = _font_set_ptemPtr.asFunction<void Function(ffi.Pointer<hb_font>, double)>();

  double font_get_ptem(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_get_ptem(
      font,
    );
  }

  late final _font_get_ptemPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<hb_font>)>>('hb_font_get_ptem');
  late final _font_get_ptem = _font_get_ptemPtr.asFunction<double Function(ffi.Pointer<hb_font>)>();

  void font_set_synthetic_slant(
    ffi.Pointer<hb_font> font,
    double slant,
  ) {
    return _font_set_synthetic_slant(
      font,
      slant,
    );
  }

  late final _font_set_synthetic_slantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Float)>>('hb_font_set_synthetic_slant');
  late final _font_set_synthetic_slant =
      _font_set_synthetic_slantPtr.asFunction<void Function(ffi.Pointer<hb_font>, double)>();

  double font_get_synthetic_slant(
    ffi.Pointer<hb_font> font,
  ) {
    return _font_get_synthetic_slant(
      font,
    );
  }

  late final _font_get_synthetic_slantPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<hb_font>)>>('hb_font_get_synthetic_slant');
  late final _font_get_synthetic_slant =
      _font_get_synthetic_slantPtr.asFunction<double Function(ffi.Pointer<hb_font>)>();

  void font_set_variations(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_variation> variations,
    int variations_length,
  ) {
    return _font_set_variations(
      font,
      variations,
      variations_length,
    );
  }

  late final _font_set_variationsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_variation>, ffi.UnsignedInt)>>(
          'hb_font_set_variations');
  late final _font_set_variations =
      _font_set_variationsPtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_variation>, int)>();

  void font_set_var_coords_design(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.Float> coords,
    int coords_length,
  ) {
    return _font_set_var_coords_design(
      font,
      coords,
      coords_length,
    );
  }

  late final _font_set_var_coords_designPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Float>, ffi.UnsignedInt)>>(
          'hb_font_set_var_coords_design');
  late final _font_set_var_coords_design =
      _font_set_var_coords_designPtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Float>, int)>();

  ffi.Pointer<ffi.Float> font_get_var_coords_design(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _font_get_var_coords_design(
      font,
      length,
    );
  }

  late final _font_get_var_coords_designPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'hb_font_get_var_coords_design');
  late final _font_get_var_coords_design = _font_get_var_coords_designPtr
      .asFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.UnsignedInt>)>();

  void font_set_var_coords_normalized(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.Int> coords,
    int coords_length,
  ) {
    return _font_set_var_coords_normalized(
      font,
      coords,
      coords_length,
    );
  }

  late final _font_set_var_coords_normalizedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Int>, ffi.UnsignedInt)>>(
          'hb_font_set_var_coords_normalized');
  late final _font_set_var_coords_normalized =
      _font_set_var_coords_normalizedPtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<ffi.Int> font_get_var_coords_normalized(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _font_get_var_coords_normalized(
      font,
      length,
    );
  }

  late final _font_get_var_coords_normalizedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'hb_font_get_var_coords_normalized');
  late final _font_get_var_coords_normalized = _font_get_var_coords_normalizedPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<hb_font>, ffi.Pointer<ffi.UnsignedInt>)>();

  void font_set_var_named_instance(
    ffi.Pointer<hb_font> font,
    int instance_index,
  ) {
    return _font_set_var_named_instance(
      font,
      instance_index,
    );
  }

  late final _font_set_var_named_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.UnsignedInt)>>(
          'hb_font_set_var_named_instance');
  late final _font_set_var_named_instance =
      _font_set_var_named_instancePtr.asFunction<void Function(ffi.Pointer<hb_font>, int)>();

  int glyph_info_get_glyph_flags(
    ffi.Pointer<hb_glyph_info> info,
  ) {
    return _glyph_info_get_glyph_flags(
      info,
    );
  }

  late final _glyph_info_get_glyph_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_glyph_info>)>>('hb_glyph_info_get_glyph_flags');
  late final _glyph_info_get_glyph_flags =
      _glyph_info_get_glyph_flagsPtr.asFunction<int Function(ffi.Pointer<hb_glyph_info>)>();

  int segment_properties_equal(
    ffi.Pointer<hb_segment_properties> a,
    ffi.Pointer<hb_segment_properties> b,
  ) {
    return _segment_properties_equal(
      a,
      b,
    );
  }

  late final _segment_properties_equalPtr = _lookup<
          ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_segment_properties>, ffi.Pointer<hb_segment_properties>)>>(
      'hb_segment_properties_equal');
  late final _segment_properties_equal = _segment_properties_equalPtr
      .asFunction<int Function(ffi.Pointer<hb_segment_properties>, ffi.Pointer<hb_segment_properties>)>();

  int segment_properties_hash(
    ffi.Pointer<hb_segment_properties> p,
  ) {
    return _segment_properties_hash(
      p,
    );
  }

  late final _segment_properties_hashPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_segment_properties>)>>(
          'hb_segment_properties_hash');
  late final _segment_properties_hash =
      _segment_properties_hashPtr.asFunction<int Function(ffi.Pointer<hb_segment_properties>)>();

  void segment_properties_overlay(
    ffi.Pointer<hb_segment_properties> p,
    ffi.Pointer<hb_segment_properties> src,
  ) {
    return _segment_properties_overlay(
      p,
      src,
    );
  }

  late final _segment_properties_overlayPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<hb_segment_properties>, ffi.Pointer<hb_segment_properties>)>>(
      'hb_segment_properties_overlay');
  late final _segment_properties_overlay = _segment_properties_overlayPtr
      .asFunction<void Function(ffi.Pointer<hb_segment_properties>, ffi.Pointer<hb_segment_properties>)>();

  ffi.Pointer<hb_buffer> buffer_create() {
    return _buffer_create();
  }

  late final _buffer_createPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer> Function()>>('hb_buffer_create');
  late final _buffer_create = _buffer_createPtr.asFunction<ffi.Pointer<hb_buffer> Function()>();

  ffi.Pointer<hb_buffer> buffer_create_similar(
    ffi.Pointer<hb_buffer> src,
  ) {
    return _buffer_create_similar(
      src,
    );
  }

  late final _buffer_create_similarPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer> Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_create_similar');
  late final _buffer_create_similar =
      _buffer_create_similarPtr.asFunction<ffi.Pointer<hb_buffer> Function(ffi.Pointer<hb_buffer>)>();

  void buffer_reset(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_reset(
      buffer,
    );
  }

  late final _buffer_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_reset');
  late final _buffer_reset = _buffer_resetPtr.asFunction<void Function(ffi.Pointer<hb_buffer>)>();

  ffi.Pointer<hb_buffer> buffer_get_empty() {
    return _buffer_get_empty();
  }

  late final _buffer_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer> Function()>>('hb_buffer_get_empty');
  late final _buffer_get_empty = _buffer_get_emptyPtr.asFunction<ffi.Pointer<hb_buffer> Function()>();

  ffi.Pointer<hb_buffer> buffer_reference(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_reference(
      buffer,
    );
  }

  late final _buffer_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer> Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_reference');
  late final _buffer_reference =
      _buffer_referencePtr.asFunction<ffi.Pointer<hb_buffer> Function(ffi.Pointer<hb_buffer>)>();

  void buffer_destroy(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_destroy(
      buffer,
    );
  }

  late final _buffer_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_destroy');
  late final _buffer_destroy = _buffer_destroyPtr.asFunction<void Function(ffi.Pointer<hb_buffer>)>();

  int buffer_set_user_data(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_user_data_key> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func destroy,
    int replace,
  ) {
    return _buffer_set_user_data(
      buffer,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _buffer_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>,
              hb_destroy_func, hb_bool)>>('hb_buffer_set_user_data');
  late final _buffer_set_user_data = _buffer_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_buffer>, ffi.Pointer<hb_user_data_key>, ffi.Pointer<ffi.Void>, hb_destroy_func, int)>();

  ffi.Pointer<ffi.Void> buffer_get_user_data(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_user_data_key> key,
  ) {
    return _buffer_get_user_data(
      buffer,
      key,
    );
  }

  late final _buffer_get_user_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_user_data_key>)>>(
      'hb_buffer_get_user_data');
  late final _buffer_get_user_data = _buffer_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_user_data_key>)>();

  void buffer_set_content_type(
    ffi.Pointer<hb_buffer> buffer,
    int content_type,
  ) {
    return _buffer_set_content_type(
      buffer,
      content_type,
    );
  }

  late final _buffer_set_content_typePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Int32)>>('hb_buffer_set_content_type');
  late final _buffer_set_content_type =
      _buffer_set_content_typePtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_content_type(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_content_type(
      buffer,
    );
  }

  late final _buffer_get_content_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_content_type');
  late final _buffer_get_content_type = _buffer_get_content_typePtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_unicode_funcs(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_unicode_funcs> unicode_funcs,
  ) {
    return _buffer_set_unicode_funcs(
      buffer,
      unicode_funcs,
    );
  }

  late final _buffer_set_unicode_funcsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_unicode_funcs>)>>(
          'hb_buffer_set_unicode_funcs');
  late final _buffer_set_unicode_funcs =
      _buffer_set_unicode_funcsPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_unicode_funcs>)>();

  ffi.Pointer<hb_unicode_funcs> buffer_get_unicode_funcs(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_unicode_funcs(
      buffer,
    );
  }

  late final _buffer_get_unicode_funcsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_unicode_funcs> Function(ffi.Pointer<hb_buffer>)>>(
          'hb_buffer_get_unicode_funcs');
  late final _buffer_get_unicode_funcs =
      _buffer_get_unicode_funcsPtr.asFunction<ffi.Pointer<hb_unicode_funcs> Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_direction(
    ffi.Pointer<hb_buffer> buffer,
    int direction,
  ) {
    return _buffer_set_direction(
      buffer,
      direction,
    );
  }

  late final _buffer_set_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Int32)>>('hb_buffer_set_direction');
  late final _buffer_set_direction = _buffer_set_directionPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_direction(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_direction(
      buffer,
    );
  }

  late final _buffer_get_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_direction');
  late final _buffer_get_direction = _buffer_get_directionPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_script(
    ffi.Pointer<hb_buffer> buffer,
    int script,
  ) {
    return _buffer_set_script(
      buffer,
      script,
    );
  }

  late final _buffer_set_scriptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Int32)>>('hb_buffer_set_script');
  late final _buffer_set_script = _buffer_set_scriptPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_script(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_script(
      buffer,
    );
  }

  late final _buffer_get_scriptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_script');
  late final _buffer_get_script = _buffer_get_scriptPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_language(
    ffi.Pointer<hb_buffer> buffer,
    hb_language language,
  ) {
    return _buffer_set_language(
      buffer,
      language,
    );
  }

  late final _buffer_set_languagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, hb_language)>>('hb_buffer_set_language');
  late final _buffer_set_language =
      _buffer_set_languagePtr.asFunction<void Function(ffi.Pointer<hb_buffer>, hb_language)>();

  hb_language buffer_get_language(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_language(
      buffer,
    );
  }

  late final _buffer_get_languagePtr =
      _lookup<ffi.NativeFunction<hb_language Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_language');
  late final _buffer_get_language = _buffer_get_languagePtr.asFunction<hb_language Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_segment_properties(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_segment_properties> props,
  ) {
    return _buffer_set_segment_properties(
      buffer,
      props,
    );
  }

  late final _buffer_set_segment_propertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_segment_properties>)>>(
          'hb_buffer_set_segment_properties');
  late final _buffer_set_segment_properties = _buffer_set_segment_propertiesPtr
      .asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_segment_properties>)>();

  void buffer_get_segment_properties(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_segment_properties> props,
  ) {
    return _buffer_get_segment_properties(
      buffer,
      props,
    );
  }

  late final _buffer_get_segment_propertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_segment_properties>)>>(
          'hb_buffer_get_segment_properties');
  late final _buffer_get_segment_properties = _buffer_get_segment_propertiesPtr
      .asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_segment_properties>)>();

  void buffer_guess_segment_properties(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_guess_segment_properties(
      buffer,
    );
  }

  late final _buffer_guess_segment_propertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_guess_segment_properties');
  late final _buffer_guess_segment_properties =
      _buffer_guess_segment_propertiesPtr.asFunction<void Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_flags(
    ffi.Pointer<hb_buffer> buffer,
    int flags,
  ) {
    return _buffer_set_flags(
      buffer,
      flags,
    );
  }

  late final _buffer_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Int32)>>('hb_buffer_set_flags');
  late final _buffer_set_flags = _buffer_set_flagsPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_flags(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_flags(
      buffer,
    );
  }

  late final _buffer_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_flags');
  late final _buffer_get_flags = _buffer_get_flagsPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_cluster_level(
    ffi.Pointer<hb_buffer> buffer,
    int cluster_level,
  ) {
    return _buffer_set_cluster_level(
      buffer,
      cluster_level,
    );
  }

  late final _buffer_set_cluster_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Int32)>>('hb_buffer_set_cluster_level');
  late final _buffer_set_cluster_level =
      _buffer_set_cluster_levelPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_cluster_level(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_cluster_level(
      buffer,
    );
  }

  late final _buffer_get_cluster_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_cluster_level');
  late final _buffer_get_cluster_level =
      _buffer_get_cluster_levelPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_replacement_codepoint(
    ffi.Pointer<hb_buffer> buffer,
    int replacement,
  ) {
    return _buffer_set_replacement_codepoint(
      buffer,
      replacement,
    );
  }

  late final _buffer_set_replacement_codepointPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, hb_codepoint)>>(
          'hb_buffer_set_replacement_codepoint');
  late final _buffer_set_replacement_codepoint =
      _buffer_set_replacement_codepointPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_replacement_codepoint(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_replacement_codepoint(
      buffer,
    );
  }

  late final _buffer_get_replacement_codepointPtr =
      _lookup<ffi.NativeFunction<hb_codepoint Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_replacement_codepoint');
  late final _buffer_get_replacement_codepoint =
      _buffer_get_replacement_codepointPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_invisible_glyph(
    ffi.Pointer<hb_buffer> buffer,
    int invisible,
  ) {
    return _buffer_set_invisible_glyph(
      buffer,
      invisible,
    );
  }

  late final _buffer_set_invisible_glyphPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, hb_codepoint)>>(
          'hb_buffer_set_invisible_glyph');
  late final _buffer_set_invisible_glyph =
      _buffer_set_invisible_glyphPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_invisible_glyph(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_invisible_glyph(
      buffer,
    );
  }

  late final _buffer_get_invisible_glyphPtr =
      _lookup<ffi.NativeFunction<hb_codepoint Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_invisible_glyph');
  late final _buffer_get_invisible_glyph =
      _buffer_get_invisible_glyphPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_set_not_found_glyph(
    ffi.Pointer<hb_buffer> buffer,
    int not_found,
  ) {
    return _buffer_set_not_found_glyph(
      buffer,
      not_found,
    );
  }

  late final _buffer_set_not_found_glyphPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, hb_codepoint)>>(
          'hb_buffer_set_not_found_glyph');
  late final _buffer_set_not_found_glyph =
      _buffer_set_not_found_glyphPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_not_found_glyph(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_not_found_glyph(
      buffer,
    );
  }

  late final _buffer_get_not_found_glyphPtr =
      _lookup<ffi.NativeFunction<hb_codepoint Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_not_found_glyph');
  late final _buffer_get_not_found_glyph =
      _buffer_get_not_found_glyphPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_clear_contents(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_clear_contents(
      buffer,
    );
  }

  late final _buffer_clear_contentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_clear_contents');
  late final _buffer_clear_contents = _buffer_clear_contentsPtr.asFunction<void Function(ffi.Pointer<hb_buffer>)>();

  int buffer_pre_allocate(
    ffi.Pointer<hb_buffer> buffer,
    int size,
  ) {
    return _buffer_pre_allocate(
      buffer,
      size,
    );
  }

  late final _buffer_pre_allocatePtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_buffer>, ffi.UnsignedInt)>>('hb_buffer_pre_allocate');
  late final _buffer_pre_allocate = _buffer_pre_allocatePtr.asFunction<int Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_allocation_successful(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_allocation_successful(
      buffer,
    );
  }

  late final _buffer_allocation_successfulPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_allocation_successful');
  late final _buffer_allocation_successful =
      _buffer_allocation_successfulPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_reverse(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_reverse(
      buffer,
    );
  }

  late final _buffer_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_reverse');
  late final _buffer_reverse = _buffer_reversePtr.asFunction<void Function(ffi.Pointer<hb_buffer>)>();

  void buffer_reverse_range(
    ffi.Pointer<hb_buffer> buffer,
    int start,
    int end,
  ) {
    return _buffer_reverse_range(
      buffer,
      start,
      end,
    );
  }

  late final _buffer_reverse_rangePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.UnsignedInt, ffi.UnsignedInt)>>(
          'hb_buffer_reverse_range');
  late final _buffer_reverse_range =
      _buffer_reverse_rangePtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int, int)>();

  void buffer_reverse_clusters(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_reverse_clusters(
      buffer,
    );
  }

  late final _buffer_reverse_clustersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_reverse_clusters');
  late final _buffer_reverse_clusters = _buffer_reverse_clustersPtr.asFunction<void Function(ffi.Pointer<hb_buffer>)>();

  void buffer_add(
    ffi.Pointer<hb_buffer> buffer,
    int codepoint,
    int cluster,
  ) {
    return _buffer_add(
      buffer,
      codepoint,
      cluster,
    );
  }

  late final _buffer_addPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>, hb_codepoint, ffi.UnsignedInt)>>(
          'hb_buffer_add');
  late final _buffer_add = _buffer_addPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, int, int)>();

  void buffer_add_utf8(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.Char> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _buffer_add_utf8(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _buffer_add_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.UnsignedInt, ffi.Int)>>('hb_buffer_add_utf8');
  late final _buffer_add_utf8 =
      _buffer_add_utf8Ptr.asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Char>, int, int, int)>();

  void buffer_add_utf16(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.Uint16> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _buffer_add_utf16(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _buffer_add_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Uint16>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_utf16');
  late final _buffer_add_utf16 =
      _buffer_add_utf16Ptr.asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  void buffer_add_utf32(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.Uint32> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _buffer_add_utf32(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _buffer_add_utf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Uint32>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_utf32');
  late final _buffer_add_utf32 =
      _buffer_add_utf32Ptr.asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Uint32>, int, int, int)>();

  void buffer_add_latin1(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.Uint8> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _buffer_add_latin1(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _buffer_add_latin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_latin1');
  late final _buffer_add_latin1 =
      _buffer_add_latin1Ptr.asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void buffer_add_codepoints(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_codepoint> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _buffer_add_codepoints(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _buffer_add_codepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_codepoint>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_codepoints');
  late final _buffer_add_codepoints = _buffer_add_codepointsPtr
      .asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_codepoint>, int, int, int)>();

  void buffer_append(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_buffer> source,
    int start,
    int end,
  ) {
    return _buffer_append(
      buffer,
      source,
      start,
      end,
    );
  }

  late final _buffer_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hb_buffer>, ffi.Pointer<hb_buffer>, ffi.UnsignedInt, ffi.UnsignedInt)>>('hb_buffer_append');
  late final _buffer_append =
      _buffer_appendPtr.asFunction<void Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_buffer>, int, int)>();

  int buffer_set_length(
    ffi.Pointer<hb_buffer> buffer,
    int length,
  ) {
    return _buffer_set_length(
      buffer,
      length,
    );
  }

  late final _buffer_set_lengthPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_buffer>, ffi.UnsignedInt)>>('hb_buffer_set_length');
  late final _buffer_set_length = _buffer_set_lengthPtr.asFunction<int Function(ffi.Pointer<hb_buffer>, int)>();

  int buffer_get_length(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_get_length(
      buffer,
    );
  }

  late final _buffer_get_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_get_length');
  late final _buffer_get_length = _buffer_get_lengthPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  ffi.Pointer<hb_glyph_info> buffer_get_glyph_infos(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _buffer_get_glyph_infos(
      buffer,
      length,
    );
  }

  late final _buffer_get_glyph_infosPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<hb_glyph_info> Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.UnsignedInt>)>>(
      'hb_buffer_get_glyph_infos');
  late final _buffer_get_glyph_infos = _buffer_get_glyph_infosPtr
      .asFunction<ffi.Pointer<hb_glyph_info> Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<hb_glyph_position> buffer_get_glyph_positions(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _buffer_get_glyph_positions(
      buffer,
      length,
    );
  }

  late final _buffer_get_glyph_positionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_glyph_position> Function(
              ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.UnsignedInt>)>>('hb_buffer_get_glyph_positions');
  late final _buffer_get_glyph_positions = _buffer_get_glyph_positionsPtr
      .asFunction<ffi.Pointer<hb_glyph_position> Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.UnsignedInt>)>();

  int buffer_has_positions(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_has_positions(
      buffer,
    );
  }

  late final _buffer_has_positionsPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_has_positions');
  late final _buffer_has_positions = _buffer_has_positionsPtr.asFunction<int Function(ffi.Pointer<hb_buffer>)>();

  void buffer_normalize_glyphs(
    ffi.Pointer<hb_buffer> buffer,
  ) {
    return _buffer_normalize_glyphs(
      buffer,
    );
  }

  late final _buffer_normalize_glyphsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer>)>>('hb_buffer_normalize_glyphs');
  late final _buffer_normalize_glyphs = _buffer_normalize_glyphsPtr.asFunction<void Function(ffi.Pointer<hb_buffer>)>();

  int buffer_serialize_format_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _buffer_serialize_format_from_string(
      str,
      len,
    );
  }

  late final _buffer_serialize_format_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
          'hb_buffer_serialize_format_from_string');
  late final _buffer_serialize_format_from_string =
      _buffer_serialize_format_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> buffer_serialize_format_to_string(
    int format,
  ) {
    return _buffer_serialize_format_to_string(
      format,
    );
  }

  late final _buffer_serialize_format_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>('hb_buffer_serialize_format_to_string');
  late final _buffer_serialize_format_to_string =
      _buffer_serialize_format_to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> buffer_serialize_list_formats() {
    return _buffer_serialize_list_formats();
  }

  late final _buffer_serialize_list_formatsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>('hb_buffer_serialize_list_formats');
  late final _buffer_serialize_list_formats =
      _buffer_serialize_list_formatsPtr.asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  int buffer_serialize_glyphs(
    ffi.Pointer<hb_buffer> buffer,
    int start,
    int end,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.UnsignedInt> buf_consumed,
    ffi.Pointer<hb_font> font,
    int format,
    int flags,
  ) {
    return _buffer_serialize_glyphs(
      buffer,
      start,
      end,
      buf,
      buf_size,
      buf_consumed,
      font,
      format,
      flags,
    );
  }

  late final _buffer_serialize_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<hb_buffer>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<hb_font>,
              ffi.Int32,
              ffi.Int32)>>('hb_buffer_serialize_glyphs');
  late final _buffer_serialize_glyphs = _buffer_serialize_glyphsPtr.asFunction<
      int Function(ffi.Pointer<hb_buffer>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<hb_font>, int, int)>();

  int buffer_serialize_unicode(
    ffi.Pointer<hb_buffer> buffer,
    int start,
    int end,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.UnsignedInt> buf_consumed,
    int format,
    int flags,
  ) {
    return _buffer_serialize_unicode(
      buffer,
      start,
      end,
      buf,
      buf_size,
      buf_consumed,
      format,
      flags,
    );
  }

  late final _buffer_serialize_unicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_buffer>, ffi.UnsignedInt, ffi.UnsignedInt, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedInt>, ffi.Int32, ffi.Int32)>>('hb_buffer_serialize_unicode');
  late final _buffer_serialize_unicode = _buffer_serialize_unicodePtr.asFunction<
      int Function(
          ffi.Pointer<hb_buffer>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedInt>, int, int)>();

  int buffer_serialize(
    ffi.Pointer<hb_buffer> buffer,
    int start,
    int end,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.UnsignedInt> buf_consumed,
    ffi.Pointer<hb_font> font,
    int format,
    int flags,
  ) {
    return _buffer_serialize(
      buffer,
      start,
      end,
      buf,
      buf_size,
      buf_consumed,
      font,
      format,
      flags,
    );
  }

  late final _buffer_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<hb_buffer>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<hb_font>,
              ffi.Int32,
              ffi.Int32)>>('hb_buffer_serialize');
  late final _buffer_serialize = _buffer_serializePtr.asFunction<
      int Function(ffi.Pointer<hb_buffer>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<hb_font>, int, int)>();

  int buffer_deserialize_glyphs(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> end_ptr,
    ffi.Pointer<hb_font> font,
    int format,
  ) {
    return _buffer_deserialize_glyphs(
      buffer,
      buf,
      buf_len,
      end_ptr,
      font,
      format,
    );
  }

  late final _buffer_deserialize_glyphsPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<hb_font>, ffi.Int32)>>('hb_buffer_deserialize_glyphs');
  late final _buffer_deserialize_glyphs = _buffer_deserialize_glyphsPtr.asFunction<
      int Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<hb_font>, int)>();

  int buffer_deserialize_unicode(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> end_ptr,
    int format,
  ) {
    return _buffer_deserialize_unicode(
      buffer,
      buf,
      buf_len,
      end_ptr,
      format,
    );
  }

  late final _buffer_deserialize_unicodePtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int32)>>('hb_buffer_deserialize_unicode');
  late final _buffer_deserialize_unicode = _buffer_deserialize_unicodePtr.asFunction<
      int Function(ffi.Pointer<hb_buffer>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int buffer_diff(
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_buffer> reference,
    int dottedcircle_glyph,
    int position_fuzz,
  ) {
    return _buffer_diff(
      buffer,
      reference,
      dottedcircle_glyph,
      position_fuzz,
    );
  }

  late final _buffer_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<hb_buffer>, ffi.Pointer<hb_buffer>, hb_codepoint, ffi.UnsignedInt)>>('hb_buffer_diff');
  late final _buffer_diff =
      _buffer_diffPtr.asFunction<int Function(ffi.Pointer<hb_buffer>, ffi.Pointer<hb_buffer>, int, int)>();

  void buffer_set_message_func(
    ffi.Pointer<hb_buffer> buffer,
    hb_buffer_message_func func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func destroy,
  ) {
    return _buffer_set_message_func(
      buffer,
      func,
      user_data,
      destroy,
    );
  }

  late final _buffer_set_message_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer>, hb_buffer_message_func, ffi.Pointer<ffi.Void>,
              hb_destroy_func)>>('hb_buffer_set_message_func');
  late final _buffer_set_message_func = _buffer_set_message_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_buffer>, hb_buffer_message_func, ffi.Pointer<ffi.Void>, hb_destroy_func)>();

  void shape(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_feature> features,
    int num_features,
  ) {
    return _shape(
      font,
      buffer,
      features,
      num_features,
    );
  }

  late final _shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hb_font>, ffi.Pointer<hb_buffer>, ffi.Pointer<hb_feature>, ffi.UnsignedInt)>>('hb_shape');
  late final _shape =
      _shapePtr.asFunction<void Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_buffer>, ffi.Pointer<hb_feature>, int)>();

  int shape_full(
    ffi.Pointer<hb_font> font,
    ffi.Pointer<hb_buffer> buffer,
    ffi.Pointer<hb_feature> features,
    int num_features,
    ffi.Pointer<ffi.Pointer<ffi.Char>> shaper_list,
  ) {
    return _shape_full(
      font,
      buffer,
      features,
      num_features,
      shaper_list,
    );
  }

  late final _shape_fullPtr = _lookup<
      ffi.NativeFunction<
          hb_bool Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_buffer>, ffi.Pointer<hb_feature>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hb_shape_full');
  late final _shape_full = _shape_fullPtr.asFunction<
      int Function(ffi.Pointer<hb_font>, ffi.Pointer<hb_buffer>, ffi.Pointer<hb_feature>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> shape_list_shapers() {
    return _shape_list_shapers();
  }

  late final _shape_list_shapersPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>('hb_shape_list_shapers');
  late final _shape_list_shapers = _shape_list_shapersPtr.asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<hb_face> ft_face_create(
    FT_Face ft_face,
    hb_destroy_func destroy,
  ) {
    return _ft_face_create(
      ft_face,
      destroy,
    );
  }

  late final _ft_face_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function(FT_Face, hb_destroy_func)>>('hb_ft_face_create');
  late final _ft_face_create = _ft_face_createPtr.asFunction<ffi.Pointer<hb_face> Function(FT_Face, hb_destroy_func)>();

  ffi.Pointer<hb_face> ft_face_create_cached(
    FT_Face ft_face,
  ) {
    return _ft_face_create_cached(
      ft_face,
    );
  }

  late final _ft_face_create_cachedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function(FT_Face)>>('hb_ft_face_create_cached');
  late final _ft_face_create_cached = _ft_face_create_cachedPtr.asFunction<ffi.Pointer<hb_face> Function(FT_Face)>();

  ffi.Pointer<hb_face> ft_face_create_referenced(
    FT_Face ft_face,
  ) {
    return _ft_face_create_referenced(
      ft_face,
    );
  }

  late final _ft_face_create_referencedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face> Function(FT_Face)>>('hb_ft_face_create_referenced');
  late final _ft_face_create_referenced =
      _ft_face_create_referencedPtr.asFunction<ffi.Pointer<hb_face> Function(FT_Face)>();

  ffi.Pointer<hb_font> ft_font_create(
    FT_Face ft_face,
    hb_destroy_func destroy,
  ) {
    return _ft_font_create(
      ft_face,
      destroy,
    );
  }

  late final _ft_font_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font> Function(FT_Face, hb_destroy_func)>>('hb_ft_font_create');
  late final _ft_font_create = _ft_font_createPtr.asFunction<ffi.Pointer<hb_font> Function(FT_Face, hb_destroy_func)>();

  ffi.Pointer<hb_font> ft_font_create_referenced(
    FT_Face ft_face,
  ) {
    return _ft_font_create_referenced(
      ft_face,
    );
  }

  late final _ft_font_create_referencedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font> Function(FT_Face)>>('hb_ft_font_create_referenced');
  late final _ft_font_create_referenced =
      _ft_font_create_referencedPtr.asFunction<ffi.Pointer<hb_font> Function(FT_Face)>();

  FT_Face ft_font_get_face(
    ffi.Pointer<hb_font> font,
  ) {
    return _ft_font_get_face(
      font,
    );
  }

  late final _ft_font_get_facePtr =
      _lookup<ffi.NativeFunction<FT_Face Function(ffi.Pointer<hb_font>)>>('hb_ft_font_get_face');
  late final _ft_font_get_face = _ft_font_get_facePtr.asFunction<FT_Face Function(ffi.Pointer<hb_font>)>();

  FT_Face ft_font_lock_face(
    ffi.Pointer<hb_font> font,
  ) {
    return _ft_font_lock_face(
      font,
    );
  }

  late final _ft_font_lock_facePtr =
      _lookup<ffi.NativeFunction<FT_Face Function(ffi.Pointer<hb_font>)>>('hb_ft_font_lock_face');
  late final _ft_font_lock_face = _ft_font_lock_facePtr.asFunction<FT_Face Function(ffi.Pointer<hb_font>)>();

  void ft_font_unlock_face(
    ffi.Pointer<hb_font> font,
  ) {
    return _ft_font_unlock_face(
      font,
    );
  }

  late final _ft_font_unlock_facePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>)>>('hb_ft_font_unlock_face');
  late final _ft_font_unlock_face = _ft_font_unlock_facePtr.asFunction<void Function(ffi.Pointer<hb_font>)>();

  void ft_font_set_load_flags(
    ffi.Pointer<hb_font> font,
    int load_flags,
  ) {
    return _ft_font_set_load_flags(
      font,
      load_flags,
    );
  }

  late final _ft_font_set_load_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>, ffi.Int)>>('hb_ft_font_set_load_flags');
  late final _ft_font_set_load_flags =
      _ft_font_set_load_flagsPtr.asFunction<void Function(ffi.Pointer<hb_font>, int)>();

  int ft_font_get_load_flags(
    ffi.Pointer<hb_font> font,
  ) {
    return _ft_font_get_load_flags(
      font,
    );
  }

  late final _ft_font_get_load_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<hb_font>)>>('hb_ft_font_get_load_flags');
  late final _ft_font_get_load_flags = _ft_font_get_load_flagsPtr.asFunction<int Function(ffi.Pointer<hb_font>)>();

  void ft_font_changed(
    ffi.Pointer<hb_font> font,
  ) {
    return _ft_font_changed(
      font,
    );
  }

  late final _ft_font_changedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>)>>('hb_ft_font_changed');
  late final _ft_font_changed = _ft_font_changedPtr.asFunction<void Function(ffi.Pointer<hb_font>)>();

  int ft_hb_font_changed(
    ffi.Pointer<hb_font> font,
  ) {
    return _ft_hb_font_changed(
      font,
    );
  }

  late final _ft_hb_font_changedPtr =
      _lookup<ffi.NativeFunction<hb_bool Function(ffi.Pointer<hb_font>)>>('hb_ft_hb_font_changed');
  late final _ft_hb_font_changed = _ft_hb_font_changedPtr.asFunction<int Function(ffi.Pointer<hb_font>)>();

  void ft_font_set_funcs(
    ffi.Pointer<hb_font> font,
  ) {
    return _ft_font_set_funcs(
      font,
    );
  }

  late final _ft_font_set_funcsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font>)>>('hb_ft_font_set_funcs');
  late final _ft_font_set_funcs = _ft_font_set_funcsPtr.asFunction<void Function(ffi.Pointer<hb_font>)>();
}

typedef hb_tag = ffi.Uint32;

abstract class hb_direction {
  static const int HB_DIRECTION_INVALID = 0;
  static const int HB_DIRECTION_LTR = 4;
  static const int HB_DIRECTION_RTL = 5;
  static const int HB_DIRECTION_TTB = 6;
  static const int HB_DIRECTION_BTT = 7;
}

final class hb_language_impl extends ffi.Opaque {}

typedef hb_language = ffi.Pointer<hb_language_impl>;
typedef hb_bool = ffi.Int;

abstract class hb_script {
  static const int HB_SCRIPT_COMMON = 1517910393;
  static const int HB_SCRIPT_INHERITED = 1516858984;
  static const int HB_SCRIPT_UNKNOWN = 1517976186;
  static const int HB_SCRIPT_ARABIC = 1098015074;
  static const int HB_SCRIPT_ARMENIAN = 1098018158;
  static const int HB_SCRIPT_BENGALI = 1113943655;
  static const int HB_SCRIPT_CYRILLIC = 1132032620;
  static const int HB_SCRIPT_DEVANAGARI = 1147500129;
  static const int HB_SCRIPT_GEORGIAN = 1197830002;
  static const int HB_SCRIPT_GREEK = 1198679403;
  static const int HB_SCRIPT_GUJARATI = 1198877298;
  static const int HB_SCRIPT_GURMUKHI = 1198879349;
  static const int HB_SCRIPT_HANGUL = 1214344807;
  static const int HB_SCRIPT_HAN = 1214344809;
  static const int HB_SCRIPT_HEBREW = 1214603890;
  static const int HB_SCRIPT_HIRAGANA = 1214870113;
  static const int HB_SCRIPT_KANNADA = 1265525857;
  static const int HB_SCRIPT_KATAKANA = 1264676449;
  static const int HB_SCRIPT_LAO = 1281453935;
  static const int HB_SCRIPT_LATIN = 1281455214;
  static const int HB_SCRIPT_MALAYALAM = 1298954605;
  static const int HB_SCRIPT_ORIYA = 1332902241;
  static const int HB_SCRIPT_TAMIL = 1415671148;
  static const int HB_SCRIPT_TELUGU = 1415933045;
  static const int HB_SCRIPT_THAI = 1416126825;
  static const int HB_SCRIPT_TIBETAN = 1416192628;
  static const int HB_SCRIPT_BOPOMOFO = 1114599535;
  static const int HB_SCRIPT_BRAILLE = 1114792297;
  static const int HB_SCRIPT_CANADIAN_SYLLABICS = 1130458739;
  static const int HB_SCRIPT_CHEROKEE = 1130915186;
  static const int HB_SCRIPT_ETHIOPIC = 1165256809;
  static const int HB_SCRIPT_KHMER = 1265134962;
  static const int HB_SCRIPT_MONGOLIAN = 1299148391;
  static const int HB_SCRIPT_MYANMAR = 1299803506;
  static const int HB_SCRIPT_OGHAM = 1332175213;
  static const int HB_SCRIPT_RUNIC = 1383427698;
  static const int HB_SCRIPT_SINHALA = 1399418472;
  static const int HB_SCRIPT_SYRIAC = 1400468067;
  static const int HB_SCRIPT_THAANA = 1416126817;
  static const int HB_SCRIPT_YI = 1500080489;
  static const int HB_SCRIPT_DESERET = 1148416628;
  static const int HB_SCRIPT_GOTHIC = 1198486632;
  static const int HB_SCRIPT_OLD_ITALIC = 1232363884;
  static const int HB_SCRIPT_BUHID = 1114990692;
  static const int HB_SCRIPT_HANUNOO = 1214344815;
  static const int HB_SCRIPT_TAGALOG = 1416064103;
  static const int HB_SCRIPT_TAGBANWA = 1415669602;
  static const int HB_SCRIPT_CYPRIOT = 1131442804;
  static const int HB_SCRIPT_LIMBU = 1281977698;
  static const int HB_SCRIPT_LINEAR_B = 1281977954;
  static const int HB_SCRIPT_OSMANYA = 1332964705;
  static const int HB_SCRIPT_SHAVIAN = 1399349623;
  static const int HB_SCRIPT_TAI_LE = 1415670885;
  static const int HB_SCRIPT_UGARITIC = 1432838514;
  static const int HB_SCRIPT_BUGINESE = 1114990441;
  static const int HB_SCRIPT_COPTIC = 1131376756;
  static const int HB_SCRIPT_GLAGOLITIC = 1198285159;
  static const int HB_SCRIPT_KHAROSHTHI = 1265131890;
  static const int HB_SCRIPT_NEW_TAI_LUE = 1415670901;
  static const int HB_SCRIPT_OLD_PERSIAN = 1483761007;
  static const int HB_SCRIPT_SYLOTI_NAGRI = 1400466543;
  static const int HB_SCRIPT_TIFINAGH = 1415999079;
  static const int HB_SCRIPT_BALINESE = 1113681001;
  static const int HB_SCRIPT_CUNEIFORM = 1483961720;
  static const int HB_SCRIPT_NKO = 1315663727;
  static const int HB_SCRIPT_PHAGS_PA = 1349017959;
  static const int HB_SCRIPT_PHOENICIAN = 1349021304;
  static const int HB_SCRIPT_CARIAN = 1130459753;
  static const int HB_SCRIPT_CHAM = 1130914157;
  static const int HB_SCRIPT_KAYAH_LI = 1264675945;
  static const int HB_SCRIPT_LEPCHA = 1281716323;
  static const int HB_SCRIPT_LYCIAN = 1283023721;
  static const int HB_SCRIPT_LYDIAN = 1283023977;
  static const int HB_SCRIPT_OL_CHIKI = 1332503403;
  static const int HB_SCRIPT_REJANG = 1382706791;
  static const int HB_SCRIPT_SAURASHTRA = 1398895986;
  static const int HB_SCRIPT_SUNDANESE = 1400204900;
  static const int HB_SCRIPT_VAI = 1449224553;
  static const int HB_SCRIPT_AVESTAN = 1098281844;
  static const int HB_SCRIPT_BAMUM = 1113681269;
  static const int HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = 1164409200;
  static const int HB_SCRIPT_IMPERIAL_ARAMAIC = 1098018153;
  static const int HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = 1349020777;
  static const int HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = 1349678185;
  static const int HB_SCRIPT_JAVANESE = 1247901281;
  static const int HB_SCRIPT_KAITHI = 1265920105;
  static const int HB_SCRIPT_LISU = 1281979253;
  static const int HB_SCRIPT_MEETEI_MAYEK = 1299473769;
  static const int HB_SCRIPT_OLD_SOUTH_ARABIAN = 1398895202;
  static const int HB_SCRIPT_OLD_TURKIC = 1332898664;
  static const int HB_SCRIPT_SAMARITAN = 1398893938;
  static const int HB_SCRIPT_TAI_THAM = 1281453665;
  static const int HB_SCRIPT_TAI_VIET = 1415673460;
  static const int HB_SCRIPT_BATAK = 1113683051;
  static const int HB_SCRIPT_BRAHMI = 1114792296;
  static const int HB_SCRIPT_MANDAIC = 1298230884;
  static const int HB_SCRIPT_CHAKMA = 1130457965;
  static const int HB_SCRIPT_MEROITIC_CURSIVE = 1298494051;
  static const int HB_SCRIPT_MEROITIC_HIEROGLYPHS = 1298494063;
  static const int HB_SCRIPT_MIAO = 1349284452;
  static const int HB_SCRIPT_SHARADA = 1399353956;
  static const int HB_SCRIPT_SORA_SOMPENG = 1399812705;
  static const int HB_SCRIPT_TAKRI = 1415670642;
  static const int HB_SCRIPT_BASSA_VAH = 1113682803;
  static const int HB_SCRIPT_CAUCASIAN_ALBANIAN = 1097295970;
  static const int HB_SCRIPT_DUPLOYAN = 1148547180;
  static const int HB_SCRIPT_ELBASAN = 1164730977;
  static const int HB_SCRIPT_GRANTHA = 1198678382;
  static const int HB_SCRIPT_KHOJKI = 1265135466;
  static const int HB_SCRIPT_KHUDAWADI = 1399418468;
  static const int HB_SCRIPT_LINEAR_A = 1281977953;
  static const int HB_SCRIPT_MAHAJANI = 1298229354;
  static const int HB_SCRIPT_MANICHAEAN = 1298230889;
  static const int HB_SCRIPT_MENDE_KIKAKUI = 1298493028;
  static const int HB_SCRIPT_MODI = 1299145833;
  static const int HB_SCRIPT_MRO = 1299345263;
  static const int HB_SCRIPT_NABATAEAN = 1315070324;
  static const int HB_SCRIPT_OLD_NORTH_ARABIAN = 1315009122;
  static const int HB_SCRIPT_OLD_PERMIC = 1348825709;
  static const int HB_SCRIPT_PAHAWH_HMONG = 1215131239;
  static const int HB_SCRIPT_PALMYRENE = 1348562029;
  static const int HB_SCRIPT_PAU_CIN_HAU = 1348564323;
  static const int HB_SCRIPT_PSALTER_PAHLAVI = 1349020784;
  static const int HB_SCRIPT_SIDDHAM = 1399415908;
  static const int HB_SCRIPT_TIRHUTA = 1416196712;
  static const int HB_SCRIPT_WARANG_CITI = 1466004065;
  static const int HB_SCRIPT_AHOM = 1097363309;
  static const int HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = 1215067511;
  static const int HB_SCRIPT_HATRAN = 1214346354;
  static const int HB_SCRIPT_MULTANI = 1299541108;
  static const int HB_SCRIPT_OLD_HUNGARIAN = 1215655527;
  static const int HB_SCRIPT_SIGNWRITING = 1399287415;
  static const int HB_SCRIPT_ADLAM = 1097100397;
  static const int HB_SCRIPT_BHAIKSUKI = 1114139507;
  static const int HB_SCRIPT_MARCHEN = 1298231907;
  static const int HB_SCRIPT_OSAGE = 1332963173;
  static const int HB_SCRIPT_TANGUT = 1415671399;
  static const int HB_SCRIPT_NEWA = 1315272545;
  static const int HB_SCRIPT_MASARAM_GONDI = 1198485101;
  static const int HB_SCRIPT_NUSHU = 1316186229;
  static const int HB_SCRIPT_SOYOMBO = 1399814511;
  static const int HB_SCRIPT_ZANABAZAR_SQUARE = 1516334690;
  static const int HB_SCRIPT_DOGRA = 1148151666;
  static const int HB_SCRIPT_GUNJALA_GONDI = 1198485095;
  static const int HB_SCRIPT_HANIFI_ROHINGYA = 1383032935;
  static const int HB_SCRIPT_MAKASAR = 1298230113;
  static const int HB_SCRIPT_MEDEFAIDRIN = 1298490470;
  static const int HB_SCRIPT_OLD_SOGDIAN = 1399809903;
  static const int HB_SCRIPT_SOGDIAN = 1399809892;
  static const int HB_SCRIPT_ELYMAIC = 1164736877;
  static const int HB_SCRIPT_NANDINAGARI = 1315008100;
  static const int HB_SCRIPT_NYIAKENG_PUACHUE_HMONG = 1215131248;
  static const int HB_SCRIPT_WANCHO = 1466132591;
  static const int HB_SCRIPT_CHORASMIAN = 1130918515;
  static const int HB_SCRIPT_DIVES_AKURU = 1147756907;
  static const int HB_SCRIPT_KHITAN_SMALL_SCRIPT = 1265202291;
  static const int HB_SCRIPT_YEZIDI = 1499822697;
  static const int HB_SCRIPT_CYPRO_MINOAN = 1131441518;
  static const int HB_SCRIPT_OLD_UYGHUR = 1333094258;
  static const int HB_SCRIPT_TANGSA = 1416524641;
  static const int HB_SCRIPT_TOTO = 1416590447;
  static const int HB_SCRIPT_VITHKUQI = 1449751656;
  static const int HB_SCRIPT_MATH = 1517122664;
  static const int HB_SCRIPT_KAWI = 1264678761;
  static const int HB_SCRIPT_NAG_MUNDARI = 1315006317;
  static const int HB_SCRIPT_INVALID = 0;
  static const int HB_SCRIPT_MAX_VALUE = 2147483647;
  static const int HB_SCRIPT_MAX_VALUE_SIGNED = 2147483647;
}

final class hb_user_data_key extends ffi.Struct {
  @ffi.Char()
  external int unused;
}

final class hb_feature extends ffi.Struct {
  @hb_tag()
  external int tag;

  @ffi.Uint32()
  external int value;

  @ffi.UnsignedInt()
  external int start;

  @ffi.UnsignedInt()
  external int end;
}

final class hb_variation extends ffi.Struct {
  @hb_tag()
  external int tag;

  @ffi.Float()
  external double value;
}

typedef hb_color = ffi.Uint32;

abstract class hb_memory_mode {
  static const int HB_MEMORY_MODE_DUPLICATE = 0;
  static const int HB_MEMORY_MODE_READONLY = 1;
  static const int HB_MEMORY_MODE_WRITABLE = 2;
  static const int HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3;
}

final class hb_blob extends ffi.Opaque {}

typedef hb_destroy_func = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> user_data)>>;

final class hb_face extends ffi.Opaque {}

typedef hb_reference_table_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<hb_blob> Function(ffi.Pointer<hb_face> face, hb_tag tag, ffi.Pointer<ffi.Void> user_data)>>;

final class hb_set extends ffi.Opaque {}

typedef hb_codepoint = ffi.Uint32;

final class hb_font extends ffi.Opaque {}

final class hb_font_funcs extends ffi.Opaque {}

final class hb_font_extents extends ffi.Struct {
  @hb_position()
  external int ascender;

  @hb_position()
  external int descender;

  @hb_position()
  external int line_gap;

  @hb_position()
  external int reserved9;

  @hb_position()
  external int reserved8;

  @hb_position()
  external int reserved7;

  @hb_position()
  external int reserved6;

  @hb_position()
  external int reserved5;

  @hb_position()
  external int reserved4;

  @hb_position()
  external int reserved3;

  @hb_position()
  external int reserved2;

  @hb_position()
  external int reserved1;
}

typedef hb_position = ffi.Int32;

final class hb_glyph_extents extends ffi.Struct {
  @hb_position()
  external int x_bearing;

  @hb_position()
  external int y_bearing;

  @hb_position()
  external int width;

  @hb_position()
  external int height;
}

typedef hb_font_get_font_h_extents_func = hb_font_get_font_extents_func;
typedef hb_font_get_font_extents_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data,
            ffi.Pointer<hb_font_extents> extents, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_font_v_extents_func = hb_font_get_font_extents_func;
typedef hb_font_get_nominal_glyph_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint unicode,
            ffi.Pointer<hb_codepoint> glyph, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_nominal_glyphs_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.UnsignedInt Function(
            ffi.Pointer<hb_font> font,
            ffi.Pointer<ffi.Void> font_data,
            ffi.UnsignedInt count,
            ffi.Pointer<hb_codepoint> first_unicode,
            ffi.UnsignedInt unicode_stride,
            ffi.Pointer<hb_codepoint> first_glyph,
            ffi.UnsignedInt glyph_stride,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_variation_glyph_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint unicode,
            hb_codepoint variation_selector, ffi.Pointer<hb_codepoint> glyph, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_h_advance_func = hb_font_get_glyph_advance_func;
typedef hb_font_get_glyph_advance_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_position Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint glyph,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_v_advance_func = hb_font_get_glyph_advance_func;
typedef hb_font_get_glyph_h_advances_func = hb_font_get_glyph_advances_func;
typedef hb_font_get_glyph_advances_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<hb_font> font,
            ffi.Pointer<ffi.Void> font_data,
            ffi.UnsignedInt count,
            ffi.Pointer<hb_codepoint> first_glyph,
            ffi.UnsignedInt glyph_stride,
            ffi.Pointer<hb_position> first_advance,
            ffi.UnsignedInt advance_stride,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_v_advances_func = hb_font_get_glyph_advances_func;
typedef hb_font_get_glyph_h_origin_func = hb_font_get_glyph_origin_func;
typedef hb_font_get_glyph_origin_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint glyph,
            ffi.Pointer<hb_position> x, ffi.Pointer<hb_position> y, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_v_origin_func = hb_font_get_glyph_origin_func;
typedef hb_font_get_glyph_h_kerning_func = hb_font_get_glyph_kerning_func;
typedef hb_font_get_glyph_kerning_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_position Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint first_glyph,
            hb_codepoint second_glyph, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_extents_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint glyph,
            ffi.Pointer<hb_glyph_extents> extents, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_contour_point_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(
            ffi.Pointer<hb_font> font,
            ffi.Pointer<ffi.Void> font_data,
            hb_codepoint glyph,
            ffi.UnsignedInt point_index,
            ffi.Pointer<hb_position> x,
            ffi.Pointer<hb_position> y,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_name_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint glyph,
            ffi.Pointer<ffi.Char> name, ffi.UnsignedInt size, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_from_name_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, ffi.Pointer<ffi.Char> name,
            ffi.Int len, ffi.Pointer<hb_codepoint> glyph, ffi.Pointer<ffi.Void> user_data)>>;
typedef hb_font_get_glyph_shape_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Void> font_data, hb_codepoint glyph,
            ffi.Pointer<hb_draw_funcs> draw_funcs, ffi.Pointer<ffi.Void> draw_data, ffi.Pointer<ffi.Void> user_data)>>;

final class hb_draw_funcs extends ffi.Opaque {}

final class hb_glyph_info extends ffi.Struct {
  @hb_codepoint()
  external int codepoint;

  @hb_mask()
  external int mask;

  @ffi.Uint32()
  external int cluster;

  external hb_var_int var1;

  external hb_var_int var2;
}

typedef hb_mask = ffi.Uint32;
typedef hb_var_int = _hb_var_int;

final class _hb_var_int extends ffi.Union {
  @ffi.Uint32()
  external int u32;

  @ffi.Int32()
  external int i32;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint16> u16;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int16> i16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> u8;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> i8;
}

abstract class hb_glyph_flags {
  static const int HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 1;
  static const int HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = 2;
  static const int HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL = 4;
  static const int HB_GLYPH_FLAG_DEFINED = 7;
}

final class hb_glyph_position extends ffi.Struct {
  @hb_position()
  external int x_advance;

  @hb_position()
  external int y_advance;

  @hb_position()
  external int x_offset;

  @hb_position()
  external int y_offset;

  external hb_var_int var1;
}

final class hb_segment_properties extends ffi.Struct {
  @ffi.Int32()
  external int direction;

  @ffi.Int32()
  external int script;

  external hb_language language;

  external ffi.Pointer<ffi.Void> reserved1;

  external ffi.Pointer<ffi.Void> reserved2;
}

final class hb_buffer extends ffi.Opaque {}

abstract class hb_buffer_content_type {
  static const int HB_BUFFER_CONTENT_TYPE_INVALID = 0;
  static const int HB_BUFFER_CONTENT_TYPE_UNICODE = 1;
  static const int HB_BUFFER_CONTENT_TYPE_GLYPHS = 2;
}

final class hb_unicode_funcs extends ffi.Opaque {}

abstract class hb_buffer_flags {
  static const int HB_BUFFER_FLAG_DEFAULT = 0;
  static const int HB_BUFFER_FLAG_BOT = 1;
  static const int HB_BUFFER_FLAG_EOT = 2;
  static const int HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4;
  static const int HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 8;
  static const int HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 16;
  static const int HB_BUFFER_FLAG_VERIFY = 32;
  static const int HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = 64;
  static const int HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL = 128;
  static const int HB_BUFFER_FLAG_DEFINED = 255;
}

abstract class hb_buffer_cluster_level {
  static const int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0;
  static const int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1;
  static const int HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2;
  static const int HB_BUFFER_CLUSTER_LEVEL_DEFAULT = 0;
}

abstract class hb_buffer_serialize_flags {
  static const int HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4;
  static const int HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8;
  static const int HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 16;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 32;
  static const int HB_BUFFER_SERIALIZE_FLAG_DEFINED = 63;
}

abstract class hb_buffer_serialize_format {
  static const int HB_BUFFER_SERIALIZE_FORMAT_TEXT = 1413830740;
  static const int HB_BUFFER_SERIALIZE_FORMAT_JSON = 1246973774;
  static const int HB_BUFFER_SERIALIZE_FORMAT_INVALID = 0;
}

abstract class hb_buffer_diff_flags {
  static const int HB_BUFFER_DIFF_FLAG_EQUAL = 0;
  static const int HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 1;
  static const int HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 2;
  static const int HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 4;
  static const int HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 8;
  static const int HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 16;
  static const int HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 32;
  static const int HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 64;
  static const int HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 128;
}

typedef hb_buffer_message_func = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool Function(ffi.Pointer<hb_buffer> buffer, ffi.Pointer<hb_font> font, ffi.Pointer<ffi.Char> message,
            ffi.Pointer<ffi.Void> user_data)>>;

const int HB_TAG_NONE = 0;

const int HB_TAG_MAX = 4294967295;

const int HB_TAG_MAX_SIGNED = 2147483647;

const int HB_FEATURE_GLOBAL_START = 0;

const int HB_FEATURE_GLOBAL_END = 4294967295;

const int HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT = 65533;
