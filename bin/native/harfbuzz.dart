// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, unused_element, camel_case_types, unused_field, constant_identifier_names

import 'dart:ffi' as ffi;

class HarfbuzzLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HarfbuzzLibrary(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HarfbuzzLibrary.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  int hb_tag_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _hb_tag_from_string(
      str,
      len,
    );
  }

  late final _hb_tag_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_tag_t Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_tag_from_string');
  late final _hb_tag_from_string = _hb_tag_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void hb_tag_to_string(
    int tag,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _hb_tag_to_string(
      tag,
      buf,
    );
  }

  late final _hb_tag_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(hb_tag_t, ffi.Pointer<ffi.Char>)>>('hb_tag_to_string');
  late final _hb_tag_to_string = _hb_tag_to_stringPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int hb_direction_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _hb_direction_from_string(
      str,
      len,
    );
  }

  late final _hb_direction_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_direction_from_string');
  late final _hb_direction_from_string =
      _hb_direction_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> hb_direction_to_string(
    int direction,
  ) {
    return _hb_direction_to_string(
      direction,
    );
  }

  late final _hb_direction_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>('hb_direction_to_string');
  late final _hb_direction_to_string = _hb_direction_to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  hb_language_t hb_language_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _hb_language_from_string(
      str,
      len,
    );
  }

  late final _hb_language_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_language_t Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_language_from_string');
  late final _hb_language_from_string =
      _hb_language_from_stringPtr.asFunction<hb_language_t Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> hb_language_to_string(
    hb_language_t language,
  ) {
    return _hb_language_to_string(
      language,
    );
  }

  late final _hb_language_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(hb_language_t)>>('hb_language_to_string');
  late final _hb_language_to_string =
      _hb_language_to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(hb_language_t)>();

  hb_language_t hb_language_get_default() {
    return _hb_language_get_default();
  }

  late final _hb_language_get_defaultPtr =
      _lookup<ffi.NativeFunction<hb_language_t Function()>>('hb_language_get_default');
  late final _hb_language_get_default = _hb_language_get_defaultPtr.asFunction<hb_language_t Function()>();

  int hb_language_matches(
    hb_language_t language,
    hb_language_t specific,
  ) {
    return _hb_language_matches(
      language,
      specific,
    );
  }

  late final _hb_language_matchesPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(hb_language_t, hb_language_t)>>('hb_language_matches');
  late final _hb_language_matches = _hb_language_matchesPtr.asFunction<int Function(hb_language_t, hb_language_t)>();

  int hb_script_from_iso15924_tag(
    int tag,
  ) {
    return _hb_script_from_iso15924_tag(
      tag,
    );
  }

  late final _hb_script_from_iso15924_tagPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(hb_tag_t)>>('hb_script_from_iso15924_tag');
  late final _hb_script_from_iso15924_tag = _hb_script_from_iso15924_tagPtr.asFunction<int Function(int)>();

  int hb_script_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _hb_script_from_string(
      str,
      len,
    );
  }

  late final _hb_script_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('hb_script_from_string');
  late final _hb_script_from_string = _hb_script_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int hb_script_to_iso15924_tag(
    int script,
  ) {
    return _hb_script_to_iso15924_tag(
      script,
    );
  }

  late final _hb_script_to_iso15924_tagPtr =
      _lookup<ffi.NativeFunction<hb_tag_t Function(ffi.Int32)>>('hb_script_to_iso15924_tag');
  late final _hb_script_to_iso15924_tag = _hb_script_to_iso15924_tagPtr.asFunction<int Function(int)>();

  int hb_script_get_horizontal_direction(
    int script,
  ) {
    return _hb_script_get_horizontal_direction(
      script,
    );
  }

  late final _hb_script_get_horizontal_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('hb_script_get_horizontal_direction');
  late final _hb_script_get_horizontal_direction =
      _hb_script_get_horizontal_directionPtr.asFunction<int Function(int)>();

  int hb_feature_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<hb_feature_t> feature,
  ) {
    return _hb_feature_from_string(
      str,
      len,
      feature,
    );
  }

  late final _hb_feature_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<hb_feature_t>)>>(
          'hb_feature_from_string');
  late final _hb_feature_from_string =
      _hb_feature_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_feature_t>)>();

  void hb_feature_to_string(
    ffi.Pointer<hb_feature_t> feature,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _hb_feature_to_string(
      feature,
      buf,
      size,
    );
  }

  late final _hb_feature_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_feature_t>, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>(
          'hb_feature_to_string');
  late final _hb_feature_to_string =
      _hb_feature_to_stringPtr.asFunction<void Function(ffi.Pointer<hb_feature_t>, ffi.Pointer<ffi.Char>, int)>();

  int hb_variation_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
    ffi.Pointer<hb_variation_t> variation,
  ) {
    return _hb_variation_from_string(
      str,
      len,
      variation,
    );
  }

  late final _hb_variation_from_stringPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<hb_variation_t>)>>(
          'hb_variation_from_string');
  late final _hb_variation_from_string =
      _hb_variation_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_variation_t>)>();

  void hb_variation_to_string(
    ffi.Pointer<hb_variation_t> variation,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _hb_variation_to_string(
      variation,
      buf,
      size,
    );
  }

  late final _hb_variation_to_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_variation_t>, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>(
      'hb_variation_to_string');
  late final _hb_variation_to_string =
      _hb_variation_to_stringPtr.asFunction<void Function(ffi.Pointer<hb_variation_t>, ffi.Pointer<ffi.Char>, int)>();

  int hb_color_get_alpha(
    int color,
  ) {
    return _hb_color_get_alpha(
      color,
    );
  }

  late final _hb_color_get_alphaPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color_t)>>('hb_color_get_alpha');
  late final _hb_color_get_alpha = _hb_color_get_alphaPtr.asFunction<int Function(int)>();

  int hb_color_get_red(
    int color,
  ) {
    return _hb_color_get_red(
      color,
    );
  }

  late final _hb_color_get_redPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color_t)>>('hb_color_get_red');
  late final _hb_color_get_red = _hb_color_get_redPtr.asFunction<int Function(int)>();

  int hb_color_get_green(
    int color,
  ) {
    return _hb_color_get_green(
      color,
    );
  }

  late final _hb_color_get_greenPtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color_t)>>('hb_color_get_green');
  late final _hb_color_get_green = _hb_color_get_greenPtr.asFunction<int Function(int)>();

  int hb_color_get_blue(
    int color,
  ) {
    return _hb_color_get_blue(
      color,
    );
  }

  late final _hb_color_get_bluePtr = _lookup<ffi.NativeFunction<ffi.Uint8 Function(hb_color_t)>>('hb_color_get_blue');
  late final _hb_color_get_blue = _hb_color_get_bluePtr.asFunction<int Function(int)>();

  ffi.Pointer<hb_blob_t> hb_blob_create(
    ffi.Pointer<ffi.Char> data,
    int length,
    int mode,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_blob_create(
      data,
      length,
      mode,
      user_data,
      destroy,
    );
  }

  late final _hb_blob_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.Int32, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_blob_create');
  late final _hb_blob_create = _hb_blob_createPtr.asFunction<
      ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  ffi.Pointer<hb_blob_t> hb_blob_create_or_fail(
    ffi.Pointer<ffi.Char> data,
    int length,
    int mode,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_blob_create_or_fail(
      data,
      length,
      mode,
      user_data,
      destroy,
    );
  }

  late final _hb_blob_create_or_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.Int32, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_blob_create_or_fail');
  late final _hb_blob_create_or_fail = _hb_blob_create_or_failPtr.asFunction<
      ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  ffi.Pointer<hb_blob_t> hb_blob_create_from_file(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _hb_blob_create_from_file(
      file_name,
    );
  }

  late final _hb_blob_create_from_filePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>)>>('hb_blob_create_from_file');
  late final _hb_blob_create_from_file =
      _hb_blob_create_from_filePtr.asFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<hb_blob_t> hb_blob_create_from_file_or_fail(
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _hb_blob_create_from_file_or_fail(
      file_name,
    );
  }

  late final _hb_blob_create_from_file_or_failPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>)>>(
          'hb_blob_create_from_file_or_fail');
  late final _hb_blob_create_from_file_or_fail =
      _hb_blob_create_from_file_or_failPtr.asFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<hb_blob_t> hb_blob_create_sub_blob(
    ffi.Pointer<hb_blob_t> parent,
    int offset,
    int length,
  ) {
    return _hb_blob_create_sub_blob(
      parent,
      offset,
      length,
    );
  }

  late final _hb_blob_create_sub_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_blob_t> Function(
              ffi.Pointer<hb_blob_t>, ffi.UnsignedInt, ffi.UnsignedInt)>>('hb_blob_create_sub_blob');
  late final _hb_blob_create_sub_blob =
      _hb_blob_create_sub_blobPtr.asFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_blob_t>, int, int)>();

  ffi.Pointer<hb_blob_t> hb_blob_copy_writable_or_fail(
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_blob_copy_writable_or_fail(
      blob,
    );
  }

  late final _hb_blob_copy_writable_or_failPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_blob_t>)>>(
          'hb_blob_copy_writable_or_fail');
  late final _hb_blob_copy_writable_or_fail =
      _hb_blob_copy_writable_or_failPtr.asFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_blob_t>)>();

  ffi.Pointer<hb_blob_t> hb_blob_get_empty() {
    return _hb_blob_get_empty();
  }

  late final _hb_blob_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function()>>('hb_blob_get_empty');
  late final _hb_blob_get_empty = _hb_blob_get_emptyPtr.asFunction<ffi.Pointer<hb_blob_t> Function()>();

  ffi.Pointer<hb_blob_t> hb_blob_reference(
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_blob_reference(
      blob,
    );
  }

  late final _hb_blob_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_blob_t>)>>('hb_blob_reference');
  late final _hb_blob_reference =
      _hb_blob_referencePtr.asFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_blob_t>)>();

  void hb_blob_destroy(
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_blob_destroy(
      blob,
    );
  }

  late final _hb_blob_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_blob_t>)>>('hb_blob_destroy');
  late final _hb_blob_destroy = _hb_blob_destroyPtr.asFunction<void Function(ffi.Pointer<hb_blob_t>)>();

  int hb_blob_set_user_data(
    ffi.Pointer<hb_blob_t> blob,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_blob_set_user_data(
      blob,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_blob_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_blob_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_blob_set_user_data');
  late final _hb_blob_set_user_data = _hb_blob_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_blob_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_blob_get_user_data(
    ffi.Pointer<hb_blob_t> blob,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_blob_get_user_data(
      blob,
      key,
    );
  }

  late final _hb_blob_get_user_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_blob_t>, ffi.Pointer<hb_user_data_key_t>)>>(
      'hb_blob_get_user_data');
  late final _hb_blob_get_user_data = _hb_blob_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_blob_t>, ffi.Pointer<hb_user_data_key_t>)>();

  void hb_blob_make_immutable(
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_blob_make_immutable(
      blob,
    );
  }

  late final _hb_blob_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_blob_t>)>>('hb_blob_make_immutable');
  late final _hb_blob_make_immutable = _hb_blob_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_blob_t>)>();

  int hb_blob_is_immutable(
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_blob_is_immutable(
      blob,
    );
  }

  late final _hb_blob_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_blob_t>)>>('hb_blob_is_immutable');
  late final _hb_blob_is_immutable = _hb_blob_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_blob_t>)>();

  int hb_blob_get_length(
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_blob_get_length(
      blob,
    );
  }

  late final _hb_blob_get_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_blob_t>)>>('hb_blob_get_length');
  late final _hb_blob_get_length = _hb_blob_get_lengthPtr.asFunction<int Function(ffi.Pointer<hb_blob_t>)>();

  ffi.Pointer<ffi.Char> hb_blob_get_data(
    ffi.Pointer<hb_blob_t> blob,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _hb_blob_get_data(
      blob,
      length,
    );
  }

  late final _hb_blob_get_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob_t>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'hb_blob_get_data');
  late final _hb_blob_get_data = _hb_blob_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> hb_blob_get_data_writable(
    ffi.Pointer<hb_blob_t> blob,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _hb_blob_get_data_writable(
      blob,
      length,
    );
  }

  late final _hb_blob_get_data_writablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob_t>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'hb_blob_get_data_writable');
  late final _hb_blob_get_data_writable = _hb_blob_get_data_writablePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_blob_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<hb_unicode_funcs_t> hb_unicode_funcs_get_default() {
    return _hb_unicode_funcs_get_default();
  }

  late final _hb_unicode_funcs_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_unicode_funcs_t> Function()>>('hb_unicode_funcs_get_default');
  late final _hb_unicode_funcs_get_default =
      _hb_unicode_funcs_get_defaultPtr.asFunction<ffi.Pointer<hb_unicode_funcs_t> Function()>();

  ffi.Pointer<hb_unicode_funcs_t> hb_unicode_funcs_create(
    ffi.Pointer<hb_unicode_funcs_t> parent,
  ) {
    return _hb_unicode_funcs_create(
      parent,
    );
  }

  late final _hb_unicode_funcs_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_unicode_funcs_t>)>>(
          'hb_unicode_funcs_create');
  late final _hb_unicode_funcs_create = _hb_unicode_funcs_createPtr
      .asFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_unicode_funcs_t>)>();

  ffi.Pointer<hb_unicode_funcs_t> hb_unicode_funcs_get_empty() {
    return _hb_unicode_funcs_get_empty();
  }

  late final _hb_unicode_funcs_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_unicode_funcs_t> Function()>>('hb_unicode_funcs_get_empty');
  late final _hb_unicode_funcs_get_empty =
      _hb_unicode_funcs_get_emptyPtr.asFunction<ffi.Pointer<hb_unicode_funcs_t> Function()>();

  ffi.Pointer<hb_unicode_funcs_t> hb_unicode_funcs_reference(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
  ) {
    return _hb_unicode_funcs_reference(
      ufuncs,
    );
  }

  late final _hb_unicode_funcs_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_unicode_funcs_t>)>>(
          'hb_unicode_funcs_reference');
  late final _hb_unicode_funcs_reference = _hb_unicode_funcs_referencePtr
      .asFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_unicode_funcs_t>)>();

  void hb_unicode_funcs_destroy(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
  ) {
    return _hb_unicode_funcs_destroy(
      ufuncs,
    );
  }

  late final _hb_unicode_funcs_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>)>>('hb_unicode_funcs_destroy');
  late final _hb_unicode_funcs_destroy =
      _hb_unicode_funcs_destroyPtr.asFunction<void Function(ffi.Pointer<hb_unicode_funcs_t>)>();

  int hb_unicode_funcs_set_user_data(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_unicode_funcs_set_user_data(
      ufuncs,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_unicode_funcs_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_unicode_funcs_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_unicode_funcs_set_user_data');
  late final _hb_unicode_funcs_set_user_data = _hb_unicode_funcs_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<hb_unicode_funcs_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_unicode_funcs_get_user_data(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_unicode_funcs_get_user_data(
      ufuncs,
      key,
    );
  }

  late final _hb_unicode_funcs_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<hb_unicode_funcs_t>, ffi.Pointer<hb_user_data_key_t>)>>('hb_unicode_funcs_get_user_data');
  late final _hb_unicode_funcs_get_user_data = _hb_unicode_funcs_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_unicode_funcs_t>, ffi.Pointer<hb_user_data_key_t>)>();

  void hb_unicode_funcs_make_immutable(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
  ) {
    return _hb_unicode_funcs_make_immutable(
      ufuncs,
    );
  }

  late final _hb_unicode_funcs_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>)>>(
          'hb_unicode_funcs_make_immutable');
  late final _hb_unicode_funcs_make_immutable =
      _hb_unicode_funcs_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_unicode_funcs_t>)>();

  int hb_unicode_funcs_is_immutable(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
  ) {
    return _hb_unicode_funcs_is_immutable(
      ufuncs,
    );
  }

  late final _hb_unicode_funcs_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_unicode_funcs_t>)>>('hb_unicode_funcs_is_immutable');
  late final _hb_unicode_funcs_is_immutable =
      _hb_unicode_funcs_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>)>();

  ffi.Pointer<hb_unicode_funcs_t> hb_unicode_funcs_get_parent(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
  ) {
    return _hb_unicode_funcs_get_parent(
      ufuncs,
    );
  }

  late final _hb_unicode_funcs_get_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_unicode_funcs_t>)>>(
          'hb_unicode_funcs_get_parent');
  late final _hb_unicode_funcs_get_parent = _hb_unicode_funcs_get_parentPtr
      .asFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_unicode_funcs_t>)>();

  /// hb_unicode_funcs_set_combining_class_func:
  /// @ufuncs: A Unicode-functions structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_combining_class_func_t.
  ///
  /// Since: 0.9.2
  void hb_unicode_funcs_set_combining_class_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_combining_class_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_combining_class_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_combining_class_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_combining_class_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_unicode_funcs_set_combining_class_func');
  late final _hb_unicode_funcs_set_combining_class_func = _hb_unicode_funcs_set_combining_class_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_combining_class_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_unicode_funcs_set_general_category_func:
  /// @ufuncs: A Unicode-functions structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_general_category_func_t.
  ///
  /// Since: 0.9.2
  void hb_unicode_funcs_set_general_category_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_general_category_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_general_category_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_general_category_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_general_category_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_unicode_funcs_set_general_category_func');
  late final _hb_unicode_funcs_set_general_category_func = _hb_unicode_funcs_set_general_category_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_general_category_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_unicode_funcs_set_mirroring_func:
  /// @ufuncs: A Unicode-functions structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_mirroring_func_t.
  ///
  /// Since: 0.9.2
  void hb_unicode_funcs_set_mirroring_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_mirroring_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_mirroring_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_mirroring_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_mirroring_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_unicode_funcs_set_mirroring_func');
  late final _hb_unicode_funcs_set_mirroring_func = _hb_unicode_funcs_set_mirroring_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_mirroring_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_unicode_funcs_set_script_func:
  /// @ufuncs: A Unicode-functions structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_script_func_t.
  ///
  /// Since: 0.9.2
  void hb_unicode_funcs_set_script_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_script_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_script_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_script_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_script_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_unicode_funcs_set_script_func');
  late final _hb_unicode_funcs_set_script_func = _hb_unicode_funcs_set_script_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_script_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_unicode_funcs_set_compose_func:
  /// @ufuncs: A Unicode-functions structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_compose_func_t.
  ///
  /// Since: 0.9.2
  void hb_unicode_funcs_set_compose_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_compose_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_compose_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_compose_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_compose_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_unicode_funcs_set_compose_func');
  late final _hb_unicode_funcs_set_compose_func = _hb_unicode_funcs_set_compose_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_compose_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_unicode_funcs_set_decompose_func:
  /// @ufuncs: A Unicode-functions structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_decompose_func_t.
  ///
  /// Since: 0.9.2
  void hb_unicode_funcs_set_decompose_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_decompose_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_decompose_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_decompose_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_decompose_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_unicode_funcs_set_decompose_func');
  late final _hb_unicode_funcs_set_decompose_func = _hb_unicode_funcs_set_decompose_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_decompose_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_unicode_combining_class:
  /// @ufuncs: The Unicode-functions structure
  /// @unicode: The code point to query
  ///
  /// Retrieves the Canonical Combining Class (ccc) property
  /// of code point @unicode.
  ///
  /// Return value: The #hb_unicode_combining_class_t of @unicode
  ///
  /// Since: 0.9.2
  int hb_unicode_combining_class(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int unicode,
  ) {
    return _hb_unicode_combining_class(
      ufuncs,
      unicode,
    );
  }

  late final _hb_unicode_combining_classPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t)>>(
          'hb_unicode_combining_class');
  late final _hb_unicode_combining_class =
      _hb_unicode_combining_classPtr.asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>, int)>();

  /// hb_unicode_general_category:
  /// @ufuncs: The Unicode-functions structure
  /// @unicode: The code point to query
  ///
  /// Retrieves the General Category (gc) property
  /// of code point @unicode.
  ///
  /// Return value: The #hb_unicode_general_category_t of @unicode
  ///
  /// Since: 0.9.2
  int hb_unicode_general_category(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int unicode,
  ) {
    return _hb_unicode_general_category(
      ufuncs,
      unicode,
    );
  }

  late final _hb_unicode_general_categoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t)>>(
          'hb_unicode_general_category');
  late final _hb_unicode_general_category =
      _hb_unicode_general_categoryPtr.asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>, int)>();

  /// hb_unicode_mirroring:
  /// @ufuncs: The Unicode-functions structure
  /// @unicode: The code point to query
  ///
  /// Retrieves the Bi-directional Mirroring Glyph code
  /// point defined for code point @unicode.
  ///
  /// Return value: The #hb_codepoint_t of the Mirroring Glyph for @unicode
  ///
  /// Since: 0.9.2
  int hb_unicode_mirroring(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int unicode,
  ) {
    return _hb_unicode_mirroring(
      ufuncs,
      unicode,
    );
  }

  late final _hb_unicode_mirroringPtr =
      _lookup<ffi.NativeFunction<hb_codepoint_t Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t)>>(
          'hb_unicode_mirroring');
  late final _hb_unicode_mirroring =
      _hb_unicode_mirroringPtr.asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>, int)>();

  /// hb_unicode_script:
  /// @ufuncs: The Unicode-functions structure
  /// @unicode: The code point to query
  ///
  /// Retrieves the #hb_script_t script to which code
  /// point @unicode belongs.
  ///
  /// Return value: The #hb_script_t of @unicode
  ///
  /// Since: 0.9.2
  int hb_unicode_script(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int unicode,
  ) {
    return _hb_unicode_script(
      ufuncs,
      unicode,
    );
  }

  late final _hb_unicode_scriptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t)>>(
          'hb_unicode_script');
  late final _hb_unicode_script =
      _hb_unicode_scriptPtr.asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>, int)>();

  int hb_unicode_compose(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int a,
    int b,
    ffi.Pointer<hb_codepoint_t> ab,
  ) {
    return _hb_unicode_compose(
      ufuncs,
      a,
      b,
      ab,
    );
  }

  late final _hb_unicode_composePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, hb_codepoint_t,
              ffi.Pointer<hb_codepoint_t>)>>('hb_unicode_compose');
  late final _hb_unicode_compose = _hb_unicode_composePtr
      .asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>, int, int, ffi.Pointer<hb_codepoint_t>)>();

  int hb_unicode_decompose(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int ab,
    ffi.Pointer<hb_codepoint_t> a,
    ffi.Pointer<hb_codepoint_t> b,
  ) {
    return _hb_unicode_decompose(
      ufuncs,
      ab,
      a,
      b,
    );
  }

  late final _hb_unicode_decomposePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<hb_codepoint_t>,
              ffi.Pointer<hb_codepoint_t>)>>('hb_unicode_decompose');
  late final _hb_unicode_decompose = _hb_unicode_decomposePtr.asFunction<
      int Function(ffi.Pointer<hb_unicode_funcs_t>, int, ffi.Pointer<hb_codepoint_t>, ffi.Pointer<hb_codepoint_t>)>();

  ffi.Pointer<hb_set_t> hb_set_create() {
    return _hb_set_create();
  }

  late final _hb_set_createPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_set_t> Function()>>('hb_set_create');
  late final _hb_set_create = _hb_set_createPtr.asFunction<ffi.Pointer<hb_set_t> Function()>();

  ffi.Pointer<hb_set_t> hb_set_get_empty() {
    return _hb_set_get_empty();
  }

  late final _hb_set_get_emptyPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_set_t> Function()>>('hb_set_get_empty');
  late final _hb_set_get_empty = _hb_set_get_emptyPtr.asFunction<ffi.Pointer<hb_set_t> Function()>();

  ffi.Pointer<hb_set_t> hb_set_reference(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_reference(
      set1,
    );
  }

  late final _hb_set_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_set_t> Function(ffi.Pointer<hb_set_t>)>>('hb_set_reference');
  late final _hb_set_reference =
      _hb_set_referencePtr.asFunction<ffi.Pointer<hb_set_t> Function(ffi.Pointer<hb_set_t>)>();

  void hb_set_destroy(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_destroy(
      set1,
    );
  }

  late final _hb_set_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>)>>('hb_set_destroy');
  late final _hb_set_destroy = _hb_set_destroyPtr.asFunction<void Function(ffi.Pointer<hb_set_t>)>();

  int hb_set_set_user_data(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_set_set_user_data(
      set1,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_set_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_set_set_user_data');
  late final _hb_set_set_user_data = _hb_set_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_set_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_set_get_user_data(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_set_get_user_data(
      set1,
      key,
    );
  }

  late final _hb_set_get_user_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_user_data_key_t>)>>(
      'hb_set_get_user_data');
  late final _hb_set_get_user_data = _hb_set_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_user_data_key_t>)>();

  int hb_set_allocation_successful(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_allocation_successful(
      set1,
    );
  }

  late final _hb_set_allocation_successfulPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_set_t>)>>('hb_set_allocation_successful');
  late final _hb_set_allocation_successful =
      _hb_set_allocation_successfulPtr.asFunction<int Function(ffi.Pointer<hb_set_t>)>();

  ffi.Pointer<hb_set_t> hb_set_copy(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_copy(
      set1,
    );
  }

  late final _hb_set_copyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_set_t> Function(ffi.Pointer<hb_set_t>)>>('hb_set_copy');
  late final _hb_set_copy = _hb_set_copyPtr.asFunction<ffi.Pointer<hb_set_t> Function(ffi.Pointer<hb_set_t>)>();

  void hb_set_clear(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_clear(
      set1,
    );
  }

  late final _hb_set_clearPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>)>>('hb_set_clear');
  late final _hb_set_clear = _hb_set_clearPtr.asFunction<void Function(ffi.Pointer<hb_set_t>)>();

  int hb_set_is_empty(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_is_empty(
      set1,
    );
  }

  late final _hb_set_is_emptyPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_set_t>)>>('hb_set_is_empty');
  late final _hb_set_is_empty = _hb_set_is_emptyPtr.asFunction<int Function(ffi.Pointer<hb_set_t>)>();

  void hb_set_invert(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_invert(
      set1,
    );
  }

  late final _hb_set_invertPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>)>>('hb_set_invert');
  late final _hb_set_invert = _hb_set_invertPtr.asFunction<void Function(ffi.Pointer<hb_set_t>)>();

  int hb_set_has(
    ffi.Pointer<hb_set_t> set1,
    int codepoint,
  ) {
    return _hb_set_has(
      set1,
      codepoint,
    );
  }

  late final _hb_set_hasPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_set_t>, hb_codepoint_t)>>('hb_set_has');
  late final _hb_set_has = _hb_set_hasPtr.asFunction<int Function(ffi.Pointer<hb_set_t>, int)>();

  void hb_set_add(
    ffi.Pointer<hb_set_t> set1,
    int codepoint,
  ) {
    return _hb_set_add(
      set1,
      codepoint,
    );
  }

  late final _hb_set_addPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, hb_codepoint_t)>>('hb_set_add');
  late final _hb_set_add = _hb_set_addPtr.asFunction<void Function(ffi.Pointer<hb_set_t>, int)>();

  void hb_set_add_range(
    ffi.Pointer<hb_set_t> set1,
    int first,
    int last,
  ) {
    return _hb_set_add_range(
      set1,
      first,
      last,
    );
  }

  late final _hb_set_add_rangePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, hb_codepoint_t, hb_codepoint_t)>>(
          'hb_set_add_range');
  late final _hb_set_add_range = _hb_set_add_rangePtr.asFunction<void Function(ffi.Pointer<hb_set_t>, int, int)>();

  void hb_set_add_sorted_array(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_codepoint_t> sorted_codepoints,
    int num_codepoints,
  ) {
    return _hb_set_add_sorted_array(
      set1,
      sorted_codepoints,
      num_codepoints,
    );
  }

  late final _hb_set_add_sorted_arrayPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>, ffi.UnsignedInt)>>(
      'hb_set_add_sorted_array');
  late final _hb_set_add_sorted_array =
      _hb_set_add_sorted_arrayPtr.asFunction<void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>, int)>();

  void hb_set_del(
    ffi.Pointer<hb_set_t> set1,
    int codepoint,
  ) {
    return _hb_set_del(
      set1,
      codepoint,
    );
  }

  late final _hb_set_delPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, hb_codepoint_t)>>('hb_set_del');
  late final _hb_set_del = _hb_set_delPtr.asFunction<void Function(ffi.Pointer<hb_set_t>, int)>();

  void hb_set_del_range(
    ffi.Pointer<hb_set_t> set1,
    int first,
    int last,
  ) {
    return _hb_set_del_range(
      set1,
      first,
      last,
    );
  }

  late final _hb_set_del_rangePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, hb_codepoint_t, hb_codepoint_t)>>(
          'hb_set_del_range');
  late final _hb_set_del_range = _hb_set_del_rangePtr.asFunction<void Function(ffi.Pointer<hb_set_t>, int, int)>();

  int hb_set_is_equal(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_set_t> other,
  ) {
    return _hb_set_is_equal(
      set1,
      other,
    );
  }

  late final _hb_set_is_equalPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>>('hb_set_is_equal');
  late final _hb_set_is_equal =
      _hb_set_is_equalPtr.asFunction<int Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>();

  int hb_set_hash(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_hash(
      set1,
    );
  }

  late final _hb_set_hashPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_set_t>)>>('hb_set_hash');
  late final _hb_set_hash = _hb_set_hashPtr.asFunction<int Function(ffi.Pointer<hb_set_t>)>();

  int hb_set_is_subset(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_set_t> larger_set,
  ) {
    return _hb_set_is_subset(
      set1,
      larger_set,
    );
  }

  late final _hb_set_is_subsetPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>>('hb_set_is_subset');
  late final _hb_set_is_subset =
      _hb_set_is_subsetPtr.asFunction<int Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>();

  void hb_set_set(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_set_t> other,
  ) {
    return _hb_set_set(
      set1,
      other,
    );
  }

  late final _hb_set_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>>('hb_set_set');
  late final _hb_set_set = _hb_set_setPtr.asFunction<void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>();

  void hb_set_union(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_set_t> other,
  ) {
    return _hb_set_union(
      set1,
      other,
    );
  }

  late final _hb_set_unionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>>('hb_set_union');
  late final _hb_set_union = _hb_set_unionPtr.asFunction<void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>();

  void hb_set_intersect(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_set_t> other,
  ) {
    return _hb_set_intersect(
      set1,
      other,
    );
  }

  late final _hb_set_intersectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>>('hb_set_intersect');
  late final _hb_set_intersect =
      _hb_set_intersectPtr.asFunction<void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>();

  void hb_set_subtract(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_set_t> other,
  ) {
    return _hb_set_subtract(
      set1,
      other,
    );
  }

  late final _hb_set_subtractPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>>('hb_set_subtract');
  late final _hb_set_subtract =
      _hb_set_subtractPtr.asFunction<void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>();

  void hb_set_symmetric_difference(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_set_t> other,
  ) {
    return _hb_set_symmetric_difference(
      set1,
      other,
    );
  }

  late final _hb_set_symmetric_differencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>>(
          'hb_set_symmetric_difference');
  late final _hb_set_symmetric_difference =
      _hb_set_symmetric_differencePtr.asFunction<void Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_set_t>)>();

  int hb_set_get_population(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_get_population(
      set1,
    );
  }

  late final _hb_set_get_populationPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_set_t>)>>('hb_set_get_population');
  late final _hb_set_get_population = _hb_set_get_populationPtr.asFunction<int Function(ffi.Pointer<hb_set_t>)>();

  int hb_set_get_min(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_get_min(
      set1,
    );
  }

  late final _hb_set_get_minPtr =
      _lookup<ffi.NativeFunction<hb_codepoint_t Function(ffi.Pointer<hb_set_t>)>>('hb_set_get_min');
  late final _hb_set_get_min = _hb_set_get_minPtr.asFunction<int Function(ffi.Pointer<hb_set_t>)>();

  int hb_set_get_max(
    ffi.Pointer<hb_set_t> set1,
  ) {
    return _hb_set_get_max(
      set1,
    );
  }

  late final _hb_set_get_maxPtr =
      _lookup<ffi.NativeFunction<hb_codepoint_t Function(ffi.Pointer<hb_set_t>)>>('hb_set_get_max');
  late final _hb_set_get_max = _hb_set_get_maxPtr.asFunction<int Function(ffi.Pointer<hb_set_t>)>();

  int hb_set_next(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_codepoint_t> codepoint,
  ) {
    return _hb_set_next(
      set1,
      codepoint,
    );
  }

  late final _hb_set_nextPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>)>>(
          'hb_set_next');
  late final _hb_set_next =
      _hb_set_nextPtr.asFunction<int Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>)>();

  int hb_set_previous(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_codepoint_t> codepoint,
  ) {
    return _hb_set_previous(
      set1,
      codepoint,
    );
  }

  late final _hb_set_previousPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>)>>(
          'hb_set_previous');
  late final _hb_set_previous =
      _hb_set_previousPtr.asFunction<int Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>)>();

  int hb_set_next_range(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_codepoint_t> first,
    ffi.Pointer<hb_codepoint_t> last,
  ) {
    return _hb_set_next_range(
      set1,
      first,
      last,
    );
  }

  late final _hb_set_next_rangePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(
              ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>, ffi.Pointer<hb_codepoint_t>)>>('hb_set_next_range');
  late final _hb_set_next_range = _hb_set_next_rangePtr
      .asFunction<int Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>, ffi.Pointer<hb_codepoint_t>)>();

  int hb_set_previous_range(
    ffi.Pointer<hb_set_t> set1,
    ffi.Pointer<hb_codepoint_t> first,
    ffi.Pointer<hb_codepoint_t> last,
  ) {
    return _hb_set_previous_range(
      set1,
      first,
      last,
    );
  }

  late final _hb_set_previous_rangePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>,
              ffi.Pointer<hb_codepoint_t>)>>('hb_set_previous_range');
  late final _hb_set_previous_range = _hb_set_previous_rangePtr
      .asFunction<int Function(ffi.Pointer<hb_set_t>, ffi.Pointer<hb_codepoint_t>, ffi.Pointer<hb_codepoint_t>)>();

  int hb_set_next_many(
    ffi.Pointer<hb_set_t> set1,
    int codepoint,
    ffi.Pointer<hb_codepoint_t> out,
    int size,
  ) {
    return _hb_set_next_many(
      set1,
      codepoint,
      out,
      size,
    );
  }

  late final _hb_set_next_manyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_set_t>, hb_codepoint_t, ffi.Pointer<hb_codepoint_t>,
              ffi.UnsignedInt)>>('hb_set_next_many');
  late final _hb_set_next_many =
      _hb_set_next_manyPtr.asFunction<int Function(ffi.Pointer<hb_set_t>, int, ffi.Pointer<hb_codepoint_t>, int)>();

  int hb_face_count(
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_face_count(
      blob,
    );
  }

  late final _hb_face_countPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_blob_t>)>>('hb_face_count');
  late final _hb_face_count = _hb_face_countPtr.asFunction<int Function(ffi.Pointer<hb_blob_t>)>();

  ffi.Pointer<hb_face_t> hb_face_create(
    ffi.Pointer<hb_blob_t> blob,
    int index,
  ) {
    return _hb_face_create(
      blob,
      index,
    );
  }

  late final _hb_face_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face_t> Function(ffi.Pointer<hb_blob_t>, ffi.UnsignedInt)>>(
          'hb_face_create');
  late final _hb_face_create =
      _hb_face_createPtr.asFunction<ffi.Pointer<hb_face_t> Function(ffi.Pointer<hb_blob_t>, int)>();

  ffi.Pointer<hb_face_t> hb_face_create_for_tables(
    hb_reference_table_func_t reference_table_func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_face_create_for_tables(
      reference_table_func,
      user_data,
      destroy,
    );
  }

  late final _hb_face_create_for_tablesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_face_t> Function(
              hb_reference_table_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>>('hb_face_create_for_tables');
  late final _hb_face_create_for_tables = _hb_face_create_for_tablesPtr.asFunction<
      ffi.Pointer<hb_face_t> Function(hb_reference_table_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  ffi.Pointer<hb_face_t> hb_face_get_empty() {
    return _hb_face_get_empty();
  }

  late final _hb_face_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face_t> Function()>>('hb_face_get_empty');
  late final _hb_face_get_empty = _hb_face_get_emptyPtr.asFunction<ffi.Pointer<hb_face_t> Function()>();

  ffi.Pointer<hb_face_t> hb_face_reference(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_reference(
      face,
    );
  }

  late final _hb_face_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face_t> Function(ffi.Pointer<hb_face_t>)>>('hb_face_reference');
  late final _hb_face_reference =
      _hb_face_referencePtr.asFunction<ffi.Pointer<hb_face_t> Function(ffi.Pointer<hb_face_t>)>();

  void hb_face_destroy(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_destroy(
      face,
    );
  }

  late final _hb_face_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>)>>('hb_face_destroy');
  late final _hb_face_destroy = _hb_face_destroyPtr.asFunction<void Function(ffi.Pointer<hb_face_t>)>();

  int hb_face_set_user_data(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_face_set_user_data(
      face,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_face_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_face_set_user_data');
  late final _hb_face_set_user_data = _hb_face_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_face_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_face_get_user_data(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_face_get_user_data(
      face,
      key,
    );
  }

  late final _hb_face_get_user_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_user_data_key_t>)>>(
      'hb_face_get_user_data');
  late final _hb_face_get_user_data = _hb_face_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_user_data_key_t>)>();

  void hb_face_make_immutable(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_make_immutable(
      face,
    );
  }

  late final _hb_face_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>)>>('hb_face_make_immutable');
  late final _hb_face_make_immutable = _hb_face_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_face_t>)>();

  int hb_face_is_immutable(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_is_immutable(
      face,
    );
  }

  late final _hb_face_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_face_t>)>>('hb_face_is_immutable');
  late final _hb_face_is_immutable = _hb_face_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_face_t>)>();

  ffi.Pointer<hb_blob_t> hb_face_reference_table(
    ffi.Pointer<hb_face_t> face,
    int tag,
  ) {
    return _hb_face_reference_table(
      face,
      tag,
    );
  }

  late final _hb_face_reference_tablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_face_t>, hb_tag_t)>>(
          'hb_face_reference_table');
  late final _hb_face_reference_table =
      _hb_face_reference_tablePtr.asFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_face_t>, int)>();

  ffi.Pointer<hb_blob_t> hb_face_reference_blob(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_reference_blob(
      face,
    );
  }

  late final _hb_face_reference_blobPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_face_t>)>>('hb_face_reference_blob');
  late final _hb_face_reference_blob =
      _hb_face_reference_blobPtr.asFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_face_t>)>();

  void hb_face_set_index(
    ffi.Pointer<hb_face_t> face,
    int index,
  ) {
    return _hb_face_set_index(
      face,
      index,
    );
  }

  late final _hb_face_set_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>, ffi.UnsignedInt)>>('hb_face_set_index');
  late final _hb_face_set_index = _hb_face_set_indexPtr.asFunction<void Function(ffi.Pointer<hb_face_t>, int)>();

  int hb_face_get_index(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_get_index(
      face,
    );
  }

  late final _hb_face_get_indexPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_face_t>)>>('hb_face_get_index');
  late final _hb_face_get_index = _hb_face_get_indexPtr.asFunction<int Function(ffi.Pointer<hb_face_t>)>();

  void hb_face_set_upem(
    ffi.Pointer<hb_face_t> face,
    int upem,
  ) {
    return _hb_face_set_upem(
      face,
      upem,
    );
  }

  late final _hb_face_set_upemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>, ffi.UnsignedInt)>>('hb_face_set_upem');
  late final _hb_face_set_upem = _hb_face_set_upemPtr.asFunction<void Function(ffi.Pointer<hb_face_t>, int)>();

  int hb_face_get_upem(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_get_upem(
      face,
    );
  }

  late final _hb_face_get_upemPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_face_t>)>>('hb_face_get_upem');
  late final _hb_face_get_upem = _hb_face_get_upemPtr.asFunction<int Function(ffi.Pointer<hb_face_t>)>();

  void hb_face_set_glyph_count(
    ffi.Pointer<hb_face_t> face,
    int glyph_count,
  ) {
    return _hb_face_set_glyph_count(
      face,
      glyph_count,
    );
  }

  late final _hb_face_set_glyph_countPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>, ffi.UnsignedInt)>>(
          'hb_face_set_glyph_count');
  late final _hb_face_set_glyph_count =
      _hb_face_set_glyph_countPtr.asFunction<void Function(ffi.Pointer<hb_face_t>, int)>();

  int hb_face_get_glyph_count(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_face_get_glyph_count(
      face,
    );
  }

  late final _hb_face_get_glyph_countPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_face_t>)>>('hb_face_get_glyph_count');
  late final _hb_face_get_glyph_count = _hb_face_get_glyph_countPtr.asFunction<int Function(ffi.Pointer<hb_face_t>)>();

  int hb_face_get_table_tags(
    ffi.Pointer<hb_face_t> face,
    int start_offset,
    ffi.Pointer<ffi.UnsignedInt> table_count,
    ffi.Pointer<hb_tag_t> table_tags,
  ) {
    return _hb_face_get_table_tags(
      face,
      start_offset,
      table_count,
      table_tags,
    );
  }

  late final _hb_face_get_table_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_face_t>, ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<hb_tag_t>)>>('hb_face_get_table_tags');
  late final _hb_face_get_table_tags = _hb_face_get_table_tagsPtr
      .asFunction<int Function(ffi.Pointer<hb_face_t>, int, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<hb_tag_t>)>();

  void hb_face_collect_unicodes(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_set_t> out,
  ) {
    return _hb_face_collect_unicodes(
      face,
      out,
    );
  }

  late final _hb_face_collect_unicodesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_set_t>)>>(
          'hb_face_collect_unicodes');
  late final _hb_face_collect_unicodes =
      _hb_face_collect_unicodesPtr.asFunction<void Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_set_t>)>();

  void hb_face_collect_variation_selectors(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_set_t> out,
  ) {
    return _hb_face_collect_variation_selectors(
      face,
      out,
    );
  }

  late final _hb_face_collect_variation_selectorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_set_t>)>>(
          'hb_face_collect_variation_selectors');
  late final _hb_face_collect_variation_selectors = _hb_face_collect_variation_selectorsPtr
      .asFunction<void Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_set_t>)>();

  void hb_face_collect_variation_unicodes(
    ffi.Pointer<hb_face_t> face,
    int variation_selector,
    ffi.Pointer<hb_set_t> out,
  ) {
    return _hb_face_collect_variation_unicodes(
      face,
      variation_selector,
      out,
    );
  }

  late final _hb_face_collect_variation_unicodesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>, hb_codepoint_t, ffi.Pointer<hb_set_t>)>>(
          'hb_face_collect_variation_unicodes');
  late final _hb_face_collect_variation_unicodes = _hb_face_collect_variation_unicodesPtr
      .asFunction<void Function(ffi.Pointer<hb_face_t>, int, ffi.Pointer<hb_set_t>)>();

  ffi.Pointer<hb_face_t> hb_face_builder_create() {
    return _hb_face_builder_create();
  }

  late final _hb_face_builder_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face_t> Function()>>('hb_face_builder_create');
  late final _hb_face_builder_create = _hb_face_builder_createPtr.asFunction<ffi.Pointer<hb_face_t> Function()>();

  int hb_face_builder_add_table(
    ffi.Pointer<hb_face_t> face,
    int tag,
    ffi.Pointer<hb_blob_t> blob,
  ) {
    return _hb_face_builder_add_table(
      face,
      tag,
      blob,
    );
  }

  late final _hb_face_builder_add_tablePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_face_t>, hb_tag_t, ffi.Pointer<hb_blob_t>)>>(
          'hb_face_builder_add_table');
  late final _hb_face_builder_add_table =
      _hb_face_builder_add_tablePtr.asFunction<int Function(ffi.Pointer<hb_face_t>, int, ffi.Pointer<hb_blob_t>)>();

  void hb_face_builder_sort_tables(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_tag_t> tags,
  ) {
    return _hb_face_builder_sort_tables(
      face,
      tags,
    );
  }

  late final _hb_face_builder_sort_tablesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_tag_t>)>>(
          'hb_face_builder_sort_tables');
  late final _hb_face_builder_sort_tables =
      _hb_face_builder_sort_tablesPtr.asFunction<void Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_tag_t>)>();

  /// hb_draw_funcs_set_move_to_func:
  /// @dfuncs: draw functions object
  /// @func: (closure user_data) (destroy destroy) (scope notified): move-to callback
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets move-to callback to the draw functions object.
  ///
  /// Since: 4.0.0
  void hb_draw_funcs_set_move_to_func(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    hb_draw_move_to_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_draw_funcs_set_move_to_func(
      dfuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_draw_funcs_set_move_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_move_to_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_draw_funcs_set_move_to_func');
  late final _hb_draw_funcs_set_move_to_func = _hb_draw_funcs_set_move_to_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_move_to_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_draw_funcs_set_line_to_func:
  /// @dfuncs: draw functions object
  /// @func: (closure user_data) (destroy destroy) (scope notified): line-to callback
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets line-to callback to the draw functions object.
  ///
  /// Since: 4.0.0
  void hb_draw_funcs_set_line_to_func(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    hb_draw_line_to_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_draw_funcs_set_line_to_func(
      dfuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_draw_funcs_set_line_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_line_to_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_draw_funcs_set_line_to_func');
  late final _hb_draw_funcs_set_line_to_func = _hb_draw_funcs_set_line_to_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_line_to_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_draw_funcs_set_quadratic_to_func:
  /// @dfuncs: draw functions object
  /// @func: (closure user_data) (destroy destroy) (scope notified): quadratic-to callback
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets quadratic-to callback to the draw functions object.
  ///
  /// Since: 4.0.0
  void hb_draw_funcs_set_quadratic_to_func(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    hb_draw_quadratic_to_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_draw_funcs_set_quadratic_to_func(
      dfuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_draw_funcs_set_quadratic_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_quadratic_to_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_draw_funcs_set_quadratic_to_func');
  late final _hb_draw_funcs_set_quadratic_to_func = _hb_draw_funcs_set_quadratic_to_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_draw_funcs_t>, hb_draw_quadratic_to_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_draw_funcs_set_cubic_to_func:
  /// @dfuncs: draw functions
  /// @func: (closure user_data) (destroy destroy) (scope notified): cubic-to callback
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets cubic-to callback to the draw functions object.
  ///
  /// Since: 4.0.0
  void hb_draw_funcs_set_cubic_to_func(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    hb_draw_cubic_to_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_draw_funcs_set_cubic_to_func(
      dfuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_draw_funcs_set_cubic_to_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_cubic_to_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_draw_funcs_set_cubic_to_func');
  late final _hb_draw_funcs_set_cubic_to_func = _hb_draw_funcs_set_cubic_to_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_cubic_to_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_draw_funcs_set_close_path_func:
  /// @dfuncs: draw functions object
  /// @func: (closure user_data) (destroy destroy) (scope notified): close-path callback
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets close-path callback to the draw functions object.
  ///
  /// Since: 4.0.0
  void hb_draw_funcs_set_close_path_func(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    hb_draw_close_path_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_draw_funcs_set_close_path_func(
      dfuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_draw_funcs_set_close_path_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, hb_draw_close_path_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_draw_funcs_set_close_path_func');
  late final _hb_draw_funcs_set_close_path_func = _hb_draw_funcs_set_close_path_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_draw_funcs_t>, hb_draw_close_path_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  ffi.Pointer<hb_draw_funcs_t> hb_draw_funcs_create() {
    return _hb_draw_funcs_create();
  }

  late final _hb_draw_funcs_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_draw_funcs_t> Function()>>('hb_draw_funcs_create');
  late final _hb_draw_funcs_create = _hb_draw_funcs_createPtr.asFunction<ffi.Pointer<hb_draw_funcs_t> Function()>();

  ffi.Pointer<hb_draw_funcs_t> hb_draw_funcs_reference(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
  ) {
    return _hb_draw_funcs_reference(
      dfuncs,
    );
  }

  late final _hb_draw_funcs_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_draw_funcs_t> Function(ffi.Pointer<hb_draw_funcs_t>)>>(
          'hb_draw_funcs_reference');
  late final _hb_draw_funcs_reference =
      _hb_draw_funcs_referencePtr.asFunction<ffi.Pointer<hb_draw_funcs_t> Function(ffi.Pointer<hb_draw_funcs_t>)>();

  void hb_draw_funcs_destroy(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
  ) {
    return _hb_draw_funcs_destroy(
      dfuncs,
    );
  }

  late final _hb_draw_funcs_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>)>>('hb_draw_funcs_destroy');
  late final _hb_draw_funcs_destroy =
      _hb_draw_funcs_destroyPtr.asFunction<void Function(ffi.Pointer<hb_draw_funcs_t>)>();

  void hb_draw_funcs_make_immutable(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
  ) {
    return _hb_draw_funcs_make_immutable(
      dfuncs,
    );
  }

  late final _hb_draw_funcs_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>)>>('hb_draw_funcs_make_immutable');
  late final _hb_draw_funcs_make_immutable =
      _hb_draw_funcs_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_draw_funcs_t>)>();

  int hb_draw_funcs_is_immutable(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
  ) {
    return _hb_draw_funcs_is_immutable(
      dfuncs,
    );
  }

  late final _hb_draw_funcs_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_draw_funcs_t>)>>('hb_draw_funcs_is_immutable');
  late final _hb_draw_funcs_is_immutable =
      _hb_draw_funcs_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_draw_funcs_t>)>();

  void hb_draw_move_to(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    ffi.Pointer<ffi.Void> draw_data,
    ffi.Pointer<hb_draw_state_t> st,
    double to_x,
    double to_y,
  ) {
    return _hb_draw_move_to(
      dfuncs,
      draw_data,
      st,
      to_x,
      to_y,
    );
  }

  late final _hb_draw_move_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>,
              ffi.Float, ffi.Float)>>('hb_draw_move_to');
  late final _hb_draw_move_to = _hb_draw_move_toPtr.asFunction<
      void Function(
          ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, double, double)>();

  void hb_draw_line_to(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    ffi.Pointer<ffi.Void> draw_data,
    ffi.Pointer<hb_draw_state_t> st,
    double to_x,
    double to_y,
  ) {
    return _hb_draw_line_to(
      dfuncs,
      draw_data,
      st,
      to_x,
      to_y,
    );
  }

  late final _hb_draw_line_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>,
              ffi.Float, ffi.Float)>>('hb_draw_line_to');
  late final _hb_draw_line_to = _hb_draw_line_toPtr.asFunction<
      void Function(
          ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, double, double)>();

  void hb_draw_quadratic_to(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    ffi.Pointer<ffi.Void> draw_data,
    ffi.Pointer<hb_draw_state_t> st,
    double control_x,
    double control_y,
    double to_x,
    double to_y,
  ) {
    return _hb_draw_quadratic_to(
      dfuncs,
      draw_data,
      st,
      control_x,
      control_y,
      to_x,
      to_y,
    );
  }

  late final _hb_draw_quadratic_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>,
              ffi.Float, ffi.Float, ffi.Float, ffi.Float)>>('hb_draw_quadratic_to');
  late final _hb_draw_quadratic_to = _hb_draw_quadratic_toPtr.asFunction<
      void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, double, double,
          double, double)>();

  void hb_draw_cubic_to(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    ffi.Pointer<ffi.Void> draw_data,
    ffi.Pointer<hb_draw_state_t> st,
    double control1_x,
    double control1_y,
    double control2_x,
    double control2_y,
    double to_x,
    double to_y,
  ) {
    return _hb_draw_cubic_to(
      dfuncs,
      draw_data,
      st,
      control1_x,
      control1_y,
      control2_x,
      control2_y,
      to_x,
      to_y,
    );
  }

  late final _hb_draw_cubic_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>,
              ffi.Float, ffi.Float, ffi.Float, ffi.Float, ffi.Float, ffi.Float)>>('hb_draw_cubic_to');
  late final _hb_draw_cubic_to = _hb_draw_cubic_toPtr.asFunction<
      void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, double, double,
          double, double, double, double)>();

  void hb_draw_close_path(
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    ffi.Pointer<ffi.Void> draw_data,
    ffi.Pointer<hb_draw_state_t> st,
  ) {
    return _hb_draw_close_path(
      dfuncs,
      draw_data,
      st,
    );
  }

  late final _hb_draw_close_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<hb_draw_state_t>)>>('hb_draw_close_path');
  late final _hb_draw_close_path = _hb_draw_close_pathPtr
      .asFunction<void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>)>();

  ffi.Pointer<hb_font_funcs_t> hb_font_funcs_create() {
    return _hb_font_funcs_create();
  }

  late final _hb_font_funcs_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_funcs_t> Function()>>('hb_font_funcs_create');
  late final _hb_font_funcs_create = _hb_font_funcs_createPtr.asFunction<ffi.Pointer<hb_font_funcs_t> Function()>();

  ffi.Pointer<hb_font_funcs_t> hb_font_funcs_get_empty() {
    return _hb_font_funcs_get_empty();
  }

  late final _hb_font_funcs_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_funcs_t> Function()>>('hb_font_funcs_get_empty');
  late final _hb_font_funcs_get_empty =
      _hb_font_funcs_get_emptyPtr.asFunction<ffi.Pointer<hb_font_funcs_t> Function()>();

  ffi.Pointer<hb_font_funcs_t> hb_font_funcs_reference(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
  ) {
    return _hb_font_funcs_reference(
      ffuncs,
    );
  }

  late final _hb_font_funcs_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_funcs_t> Function(ffi.Pointer<hb_font_funcs_t>)>>(
          'hb_font_funcs_reference');
  late final _hb_font_funcs_reference =
      _hb_font_funcs_referencePtr.asFunction<ffi.Pointer<hb_font_funcs_t> Function(ffi.Pointer<hb_font_funcs_t>)>();

  void hb_font_funcs_destroy(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
  ) {
    return _hb_font_funcs_destroy(
      ffuncs,
    );
  }

  late final _hb_font_funcs_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_funcs_t>)>>('hb_font_funcs_destroy');
  late final _hb_font_funcs_destroy =
      _hb_font_funcs_destroyPtr.asFunction<void Function(ffi.Pointer<hb_font_funcs_t>)>();

  int hb_font_funcs_set_user_data(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_font_funcs_set_user_data(
      ffuncs,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_font_funcs_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_funcs_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_font_funcs_set_user_data');
  late final _hb_font_funcs_set_user_data = _hb_font_funcs_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<hb_font_funcs_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_font_funcs_get_user_data(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_font_funcs_get_user_data(
      ffuncs,
      key,
    );
  }

  late final _hb_font_funcs_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<hb_font_funcs_t>, ffi.Pointer<hb_user_data_key_t>)>>('hb_font_funcs_get_user_data');
  late final _hb_font_funcs_get_user_data = _hb_font_funcs_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_font_funcs_t>, ffi.Pointer<hb_user_data_key_t>)>();

  void hb_font_funcs_make_immutable(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
  ) {
    return _hb_font_funcs_make_immutable(
      ffuncs,
    );
  }

  late final _hb_font_funcs_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_funcs_t>)>>('hb_font_funcs_make_immutable');
  late final _hb_font_funcs_make_immutable =
      _hb_font_funcs_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_font_funcs_t>)>();

  int hb_font_funcs_is_immutable(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
  ) {
    return _hb_font_funcs_is_immutable(
      ffuncs,
    );
  }

  late final _hb_font_funcs_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_font_funcs_t>)>>('hb_font_funcs_is_immutable');
  late final _hb_font_funcs_is_immutable =
      _hb_font_funcs_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_font_funcs_t>)>();

  /// hb_font_funcs_set_font_h_extents_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_font_h_extents_func_t.
  ///
  /// Since: 1.1.2
  void hb_font_funcs_set_font_h_extents_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_font_h_extents_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_font_h_extents_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_font_h_extents_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_font_h_extents_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_font_h_extents_func');
  late final _hb_font_funcs_set_font_h_extents_func = _hb_font_funcs_set_font_h_extents_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_font_h_extents_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_font_v_extents_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_font_v_extents_func_t.
  ///
  /// Since: 1.1.2
  void hb_font_funcs_set_font_v_extents_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_font_v_extents_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_font_v_extents_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_font_v_extents_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_font_v_extents_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_font_v_extents_func');
  late final _hb_font_funcs_set_font_v_extents_func = _hb_font_funcs_set_font_v_extents_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_font_v_extents_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_nominal_glyph_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_nominal_glyph_func_t.
  ///
  /// Since: 1.2.3
  void hb_font_funcs_set_nominal_glyph_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_nominal_glyph_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_nominal_glyph_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_nominal_glyph_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_nominal_glyph_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_nominal_glyph_func');
  late final _hb_font_funcs_set_nominal_glyph_func = _hb_font_funcs_set_nominal_glyph_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_nominal_glyph_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_nominal_glyphs_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_nominal_glyphs_func_t.
  ///
  /// Since: 2.0.0
  void hb_font_funcs_set_nominal_glyphs_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_nominal_glyphs_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_nominal_glyphs_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_nominal_glyphs_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_nominal_glyphs_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_nominal_glyphs_func');
  late final _hb_font_funcs_set_nominal_glyphs_func = _hb_font_funcs_set_nominal_glyphs_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_nominal_glyphs_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_variation_glyph_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_variation_glyph_func_t.
  ///
  /// Since: 1.2.3
  void hb_font_funcs_set_variation_glyph_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_variation_glyph_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_variation_glyph_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_variation_glyph_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_variation_glyph_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_variation_glyph_func');
  late final _hb_font_funcs_set_variation_glyph_func = _hb_font_funcs_set_variation_glyph_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_variation_glyph_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_h_advance_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_h_advance_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_h_advance_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_h_advance_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_h_advance_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_h_advance_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_advance_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_h_advance_func');
  late final _hb_font_funcs_set_glyph_h_advance_func = _hb_font_funcs_set_glyph_h_advance_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_advance_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_v_advance_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_v_advance_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_v_advance_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_v_advance_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_v_advance_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_v_advance_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_advance_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_v_advance_func');
  late final _hb_font_funcs_set_glyph_v_advance_func = _hb_font_funcs_set_glyph_v_advance_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_advance_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_h_advances_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_h_advances_func_t.
  ///
  /// Since: 1.8.6
  void hb_font_funcs_set_glyph_h_advances_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_h_advances_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_h_advances_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_h_advances_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_advances_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_h_advances_func');
  late final _hb_font_funcs_set_glyph_h_advances_func = _hb_font_funcs_set_glyph_h_advances_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_advances_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_v_advances_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_v_advances_func_t.
  ///
  /// Since: 1.8.6
  void hb_font_funcs_set_glyph_v_advances_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_v_advances_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_v_advances_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_v_advances_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_advances_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_v_advances_func');
  late final _hb_font_funcs_set_glyph_v_advances_func = _hb_font_funcs_set_glyph_v_advances_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_advances_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_h_origin_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_h_origin_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_h_origin_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_h_origin_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_h_origin_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_h_origin_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_origin_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_h_origin_func');
  late final _hb_font_funcs_set_glyph_h_origin_func = _hb_font_funcs_set_glyph_h_origin_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_origin_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_v_origin_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_v_origin_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_v_origin_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_v_origin_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_v_origin_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_v_origin_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_origin_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_v_origin_func');
  late final _hb_font_funcs_set_glyph_v_origin_func = _hb_font_funcs_set_glyph_v_origin_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_origin_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_h_kerning_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_h_kerning_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_h_kerning_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_h_kerning_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_h_kerning_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_h_kerning_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_kerning_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_h_kerning_func');
  late final _hb_font_funcs_set_glyph_h_kerning_func = _hb_font_funcs_set_glyph_h_kerning_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_h_kerning_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_extents_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_extents_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_extents_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_extents_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_extents_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_extents_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_extents_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_extents_func');
  late final _hb_font_funcs_set_glyph_extents_func = _hb_font_funcs_set_glyph_extents_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_extents_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_contour_point_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_contour_point_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_contour_point_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_contour_point_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_contour_point_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_contour_point_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_contour_point_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_contour_point_func');
  late final _hb_font_funcs_set_glyph_contour_point_func = _hb_font_funcs_set_glyph_contour_point_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_contour_point_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_name_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_name_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_name_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_name_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_name_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_name_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_name_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_name_func');
  late final _hb_font_funcs_set_glyph_name_func = _hb_font_funcs_set_glyph_name_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_name_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_from_name_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_from_name_func_t.
  ///
  /// Since: 0.9.2
  void hb_font_funcs_set_glyph_from_name_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_from_name_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_from_name_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_from_name_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_from_name_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_from_name_func');
  late final _hb_font_funcs_set_glyph_from_name_func = _hb_font_funcs_set_glyph_from_name_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_from_name_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_font_funcs_set_glyph_shape_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_shape_func_t.
  ///
  /// Since: 4.0.0
  void hb_font_funcs_set_glyph_shape_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_shape_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_shape_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_shape_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_shape_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_shape_func');
  late final _hb_font_funcs_set_glyph_shape_func = _hb_font_funcs_set_glyph_shape_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_shape_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  int hb_font_get_h_extents(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_font_extents_t> extents,
  ) {
    return _hb_font_get_h_extents(
      font,
      extents,
    );
  }

  late final _hb_font_get_h_extentsPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_extents_t>)>>(
          'hb_font_get_h_extents');
  late final _hb_font_get_h_extents =
      _hb_font_get_h_extentsPtr.asFunction<int Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_extents_t>)>();

  int hb_font_get_v_extents(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_font_extents_t> extents,
  ) {
    return _hb_font_get_v_extents(
      font,
      extents,
    );
  }

  late final _hb_font_get_v_extentsPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_extents_t>)>>(
          'hb_font_get_v_extents');
  late final _hb_font_get_v_extents =
      _hb_font_get_v_extentsPtr.asFunction<int Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_extents_t>)>();

  int hb_font_get_nominal_glyph(
    ffi.Pointer<hb_font_t> font,
    int unicode,
    ffi.Pointer<hb_codepoint_t> glyph,
  ) {
    return _hb_font_get_nominal_glyph(
      font,
      unicode,
      glyph,
    );
  }

  late final _hb_font_get_nominal_glyphPtr = _lookup<
          ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Pointer<hb_codepoint_t>)>>(
      'hb_font_get_nominal_glyph');
  late final _hb_font_get_nominal_glyph = _hb_font_get_nominal_glyphPtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_codepoint_t>)>();

  int hb_font_get_variation_glyph(
    ffi.Pointer<hb_font_t> font,
    int unicode,
    int variation_selector,
    ffi.Pointer<hb_codepoint_t> glyph,
  ) {
    return _hb_font_get_variation_glyph(
      font,
      unicode,
      variation_selector,
      glyph,
    );
  }

  late final _hb_font_get_variation_glyphPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, hb_codepoint_t,
              ffi.Pointer<hb_codepoint_t>)>>('hb_font_get_variation_glyph');
  late final _hb_font_get_variation_glyph = _hb_font_get_variation_glyphPtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_codepoint_t>)>();

  int hb_font_get_nominal_glyphs(
    ffi.Pointer<hb_font_t> font,
    int count,
    ffi.Pointer<hb_codepoint_t> first_unicode,
    int unicode_stride,
    ffi.Pointer<hb_codepoint_t> first_glyph,
    int glyph_stride,
  ) {
    return _hb_font_get_nominal_glyphs(
      font,
      count,
      first_unicode,
      unicode_stride,
      first_glyph,
      glyph_stride,
    );
  }

  late final _hb_font_get_nominal_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_font_t>, ffi.UnsignedInt, ffi.Pointer<hb_codepoint_t>,
              ffi.UnsignedInt, ffi.Pointer<hb_codepoint_t>, ffi.UnsignedInt)>>('hb_font_get_nominal_glyphs');
  late final _hb_font_get_nominal_glyphs = _hb_font_get_nominal_glyphsPtr.asFunction<
      int Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_codepoint_t>, int, ffi.Pointer<hb_codepoint_t>, int)>();

  int hb_font_get_glyph_h_advance(
    ffi.Pointer<hb_font_t> font,
    int glyph,
  ) {
    return _hb_font_get_glyph_h_advance(
      font,
      glyph,
    );
  }

  late final _hb_font_get_glyph_h_advancePtr =
      _lookup<ffi.NativeFunction<hb_position_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t)>>(
          'hb_font_get_glyph_h_advance');
  late final _hb_font_get_glyph_h_advance =
      _hb_font_get_glyph_h_advancePtr.asFunction<int Function(ffi.Pointer<hb_font_t>, int)>();

  int hb_font_get_glyph_v_advance(
    ffi.Pointer<hb_font_t> font,
    int glyph,
  ) {
    return _hb_font_get_glyph_v_advance(
      font,
      glyph,
    );
  }

  late final _hb_font_get_glyph_v_advancePtr =
      _lookup<ffi.NativeFunction<hb_position_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t)>>(
          'hb_font_get_glyph_v_advance');
  late final _hb_font_get_glyph_v_advance =
      _hb_font_get_glyph_v_advancePtr.asFunction<int Function(ffi.Pointer<hb_font_t>, int)>();

  void hb_font_get_glyph_h_advances(
    ffi.Pointer<hb_font_t> font,
    int count,
    ffi.Pointer<hb_codepoint_t> first_glyph,
    int glyph_stride,
    ffi.Pointer<hb_position_t> first_advance,
    int advance_stride,
  ) {
    return _hb_font_get_glyph_h_advances(
      font,
      count,
      first_glyph,
      glyph_stride,
      first_advance,
      advance_stride,
    );
  }

  late final _hb_font_get_glyph_h_advancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.UnsignedInt, ffi.Pointer<hb_codepoint_t>, ffi.UnsignedInt,
              ffi.Pointer<hb_position_t>, ffi.UnsignedInt)>>('hb_font_get_glyph_h_advances');
  late final _hb_font_get_glyph_h_advances = _hb_font_get_glyph_h_advancesPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_codepoint_t>, int, ffi.Pointer<hb_position_t>, int)>();

  void hb_font_get_glyph_v_advances(
    ffi.Pointer<hb_font_t> font,
    int count,
    ffi.Pointer<hb_codepoint_t> first_glyph,
    int glyph_stride,
    ffi.Pointer<hb_position_t> first_advance,
    int advance_stride,
  ) {
    return _hb_font_get_glyph_v_advances(
      font,
      count,
      first_glyph,
      glyph_stride,
      first_advance,
      advance_stride,
    );
  }

  late final _hb_font_get_glyph_v_advancesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.UnsignedInt, ffi.Pointer<hb_codepoint_t>, ffi.UnsignedInt,
              ffi.Pointer<hb_position_t>, ffi.UnsignedInt)>>('hb_font_get_glyph_v_advances');
  late final _hb_font_get_glyph_v_advances = _hb_font_get_glyph_v_advancesPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_codepoint_t>, int, ffi.Pointer<hb_position_t>, int)>();

  int hb_font_get_glyph_h_origin(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_get_glyph_h_origin(
      font,
      glyph,
      x,
      y,
    );
  }

  late final _hb_font_get_glyph_h_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Pointer<hb_position_t>,
              ffi.Pointer<hb_position_t>)>>('hb_font_get_glyph_h_origin');
  late final _hb_font_get_glyph_h_origin = _hb_font_get_glyph_h_originPtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  int hb_font_get_glyph_v_origin(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_get_glyph_v_origin(
      font,
      glyph,
      x,
      y,
    );
  }

  late final _hb_font_get_glyph_v_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Pointer<hb_position_t>,
              ffi.Pointer<hb_position_t>)>>('hb_font_get_glyph_v_origin');
  late final _hb_font_get_glyph_v_origin = _hb_font_get_glyph_v_originPtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  int hb_font_get_glyph_h_kerning(
    ffi.Pointer<hb_font_t> font,
    int left_glyph,
    int right_glyph,
  ) {
    return _hb_font_get_glyph_h_kerning(
      font,
      left_glyph,
      right_glyph,
    );
  }

  late final _hb_font_get_glyph_h_kerningPtr =
      _lookup<ffi.NativeFunction<hb_position_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, hb_codepoint_t)>>(
          'hb_font_get_glyph_h_kerning');
  late final _hb_font_get_glyph_h_kerning =
      _hb_font_get_glyph_h_kerningPtr.asFunction<int Function(ffi.Pointer<hb_font_t>, int, int)>();

  int hb_font_get_glyph_extents(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    ffi.Pointer<hb_glyph_extents_t> extents,
  ) {
    return _hb_font_get_glyph_extents(
      font,
      glyph,
      extents,
    );
  }

  late final _hb_font_get_glyph_extentsPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(
              ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Pointer<hb_glyph_extents_t>)>>('hb_font_get_glyph_extents');
  late final _hb_font_get_glyph_extents = _hb_font_get_glyph_extentsPtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_glyph_extents_t>)>();

  int hb_font_get_glyph_contour_point(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    int point_index,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_get_glyph_contour_point(
      font,
      glyph,
      point_index,
      x,
      y,
    );
  }

  late final _hb_font_get_glyph_contour_pointPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.UnsignedInt, ffi.Pointer<hb_position_t>,
              ffi.Pointer<hb_position_t>)>>('hb_font_get_glyph_contour_point');
  late final _hb_font_get_glyph_contour_point = _hb_font_get_glyph_contour_pointPtr.asFunction<
      int Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  int hb_font_get_glyph_name(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    ffi.Pointer<ffi.Char> name,
    int size,
  ) {
    return _hb_font_get_glyph_name(
      font,
      glyph,
      name,
      size,
    );
  }

  late final _hb_font_get_glyph_namePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('hb_font_get_glyph_name');
  late final _hb_font_get_glyph_name =
      _hb_font_get_glyph_namePtr.asFunction<int Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<ffi.Char>, int)>();

  int hb_font_get_glyph_from_name(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.Char> name,
    int len,
    ffi.Pointer<hb_codepoint_t> glyph,
  ) {
    return _hb_font_get_glyph_from_name(
      font,
      name,
      len,
      glyph,
    );
  }

  late final _hb_font_get_glyph_from_namePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<hb_codepoint_t>)>>('hb_font_get_glyph_from_name');
  late final _hb_font_get_glyph_from_name = _hb_font_get_glyph_from_namePtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_codepoint_t>)>();

  void hb_font_get_glyph_shape(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    ffi.Pointer<hb_draw_funcs_t> dfuncs,
    ffi.Pointer<ffi.Void> draw_data,
  ) {
    return _hb_font_get_glyph_shape(
      font,
      glyph,
      dfuncs,
      draw_data,
    );
  }

  late final _hb_font_get_glyph_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Pointer<hb_draw_funcs_t>,
              ffi.Pointer<ffi.Void>)>>('hb_font_get_glyph_shape');
  late final _hb_font_get_glyph_shape = _hb_font_get_glyph_shapePtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>)>();

  int hb_font_get_glyph(
    ffi.Pointer<hb_font_t> font,
    int unicode,
    int variation_selector,
    ffi.Pointer<hb_codepoint_t> glyph,
  ) {
    return _hb_font_get_glyph(
      font,
      unicode,
      variation_selector,
      glyph,
    );
  }

  late final _hb_font_get_glyphPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, hb_codepoint_t,
              ffi.Pointer<hb_codepoint_t>)>>('hb_font_get_glyph');
  late final _hb_font_get_glyph =
      _hb_font_get_glyphPtr.asFunction<int Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_codepoint_t>)>();

  void hb_font_get_extents_for_direction(
    ffi.Pointer<hb_font_t> font,
    int direction,
    ffi.Pointer<hb_font_extents_t> extents,
  ) {
    return _hb_font_get_extents_for_direction(
      font,
      direction,
      extents,
    );
  }

  late final _hb_font_get_extents_for_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Int32, ffi.Pointer<hb_font_extents_t>)>>(
          'hb_font_get_extents_for_direction');
  late final _hb_font_get_extents_for_direction = _hb_font_get_extents_for_directionPtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<hb_font_extents_t>)>();

  void hb_font_get_glyph_advance_for_direction(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_get_glyph_advance_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _hb_font_get_glyph_advance_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Int32, ffi.Pointer<hb_position_t>,
              ffi.Pointer<hb_position_t>)>>('hb_font_get_glyph_advance_for_direction');
  late final _hb_font_get_glyph_advance_for_direction = _hb_font_get_glyph_advance_for_directionPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  void hb_font_get_glyph_advances_for_direction(
    ffi.Pointer<hb_font_t> font,
    int direction,
    int count,
    ffi.Pointer<hb_codepoint_t> first_glyph,
    int glyph_stride,
    ffi.Pointer<hb_position_t> first_advance,
    int advance_stride,
  ) {
    return _hb_font_get_glyph_advances_for_direction(
      font,
      direction,
      count,
      first_glyph,
      glyph_stride,
      first_advance,
      advance_stride,
    );
  }

  late final _hb_font_get_glyph_advances_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hb_font_t>,
              ffi.Int32,
              ffi.UnsignedInt,
              ffi.Pointer<hb_codepoint_t>,
              ffi.UnsignedInt,
              ffi.Pointer<hb_position_t>,
              ffi.UnsignedInt)>>('hb_font_get_glyph_advances_for_direction');
  late final _hb_font_get_glyph_advances_for_direction = _hb_font_get_glyph_advances_for_directionPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_codepoint_t>, int, ffi.Pointer<hb_position_t>, int)>();

  void hb_font_get_glyph_origin_for_direction(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_get_glyph_origin_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _hb_font_get_glyph_origin_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Int32, ffi.Pointer<hb_position_t>,
              ffi.Pointer<hb_position_t>)>>('hb_font_get_glyph_origin_for_direction');
  late final _hb_font_get_glyph_origin_for_direction = _hb_font_get_glyph_origin_for_directionPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  void hb_font_add_glyph_origin_for_direction(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_add_glyph_origin_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _hb_font_add_glyph_origin_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Int32, ffi.Pointer<hb_position_t>,
              ffi.Pointer<hb_position_t>)>>('hb_font_add_glyph_origin_for_direction');
  late final _hb_font_add_glyph_origin_for_direction = _hb_font_add_glyph_origin_for_directionPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  void hb_font_subtract_glyph_origin_for_direction(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_subtract_glyph_origin_for_direction(
      font,
      glyph,
      direction,
      x,
      y,
    );
  }

  late final _hb_font_subtract_glyph_origin_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Int32, ffi.Pointer<hb_position_t>,
              ffi.Pointer<hb_position_t>)>>('hb_font_subtract_glyph_origin_for_direction');
  late final _hb_font_subtract_glyph_origin_for_direction = _hb_font_subtract_glyph_origin_for_directionPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  void hb_font_get_glyph_kerning_for_direction(
    ffi.Pointer<hb_font_t> font,
    int first_glyph,
    int second_glyph,
    int direction,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_get_glyph_kerning_for_direction(
      font,
      first_glyph,
      second_glyph,
      direction,
      x,
      y,
    );
  }

  late final _hb_font_get_glyph_kerning_for_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, hb_codepoint_t, ffi.Int32,
              ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>>('hb_font_get_glyph_kerning_for_direction');
  late final _hb_font_get_glyph_kerning_for_direction = _hb_font_get_glyph_kerning_for_directionPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, int, int, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  int hb_font_get_glyph_extents_for_origin(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    int direction,
    ffi.Pointer<hb_glyph_extents_t> extents,
  ) {
    return _hb_font_get_glyph_extents_for_origin(
      font,
      glyph,
      direction,
      extents,
    );
  }

  late final _hb_font_get_glyph_extents_for_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Int32,
              ffi.Pointer<hb_glyph_extents_t>)>>('hb_font_get_glyph_extents_for_origin');
  late final _hb_font_get_glyph_extents_for_origin = _hb_font_get_glyph_extents_for_originPtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, int, int, ffi.Pointer<hb_glyph_extents_t>)>();

  int hb_font_get_glyph_contour_point_for_origin(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    int point_index,
    int direction,
    ffi.Pointer<hb_position_t> x,
    ffi.Pointer<hb_position_t> y,
  ) {
    return _hb_font_get_glyph_contour_point_for_origin(
      font,
      glyph,
      point_index,
      direction,
      x,
      y,
    );
  }

  late final _hb_font_get_glyph_contour_point_for_originPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.UnsignedInt, ffi.Int32,
              ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>>('hb_font_get_glyph_contour_point_for_origin');
  late final _hb_font_get_glyph_contour_point_for_origin = _hb_font_get_glyph_contour_point_for_originPtr.asFunction<
      int Function(ffi.Pointer<hb_font_t>, int, int, int, ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>)>();

  void hb_font_glyph_to_string(
    ffi.Pointer<hb_font_t> font,
    int glyph,
    ffi.Pointer<ffi.Char> s,
    int size,
  ) {
    return _hb_font_glyph_to_string(
      font,
      glyph,
      s,
      size,
    );
  }

  late final _hb_font_glyph_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('hb_font_glyph_to_string');
  late final _hb_font_glyph_to_string =
      _hb_font_glyph_to_stringPtr.asFunction<void Function(ffi.Pointer<hb_font_t>, int, ffi.Pointer<ffi.Char>, int)>();

  int hb_font_glyph_from_string(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.Char> s,
    int len,
    ffi.Pointer<hb_codepoint_t> glyph,
  ) {
    return _hb_font_glyph_from_string(
      font,
      s,
      len,
      glyph,
    );
  }

  late final _hb_font_glyph_from_stringPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<hb_codepoint_t>)>>('hb_font_glyph_from_string');
  late final _hb_font_glyph_from_string = _hb_font_glyph_from_stringPtr
      .asFunction<int Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<hb_codepoint_t>)>();

  ffi.Pointer<hb_font_t> hb_font_create(
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_font_create(
      face,
    );
  }

  late final _hb_font_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_face_t>)>>('hb_font_create');
  late final _hb_font_create = _hb_font_createPtr.asFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_face_t>)>();

  ffi.Pointer<hb_font_t> hb_font_create_sub_font(
    ffi.Pointer<hb_font_t> parent,
  ) {
    return _hb_font_create_sub_font(
      parent,
    );
  }

  late final _hb_font_create_sub_fontPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_font_t>)>>('hb_font_create_sub_font');
  late final _hb_font_create_sub_font =
      _hb_font_create_sub_fontPtr.asFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_font_t>)>();

  ffi.Pointer<hb_font_t> hb_font_get_empty() {
    return _hb_font_get_empty();
  }

  late final _hb_font_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_t> Function()>>('hb_font_get_empty');
  late final _hb_font_get_empty = _hb_font_get_emptyPtr.asFunction<ffi.Pointer<hb_font_t> Function()>();

  ffi.Pointer<hb_font_t> hb_font_reference(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_reference(
      font,
    );
  }

  late final _hb_font_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_font_t>)>>('hb_font_reference');
  late final _hb_font_reference =
      _hb_font_referencePtr.asFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_font_t>)>();

  void hb_font_destroy(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_destroy(
      font,
    );
  }

  late final _hb_font_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>)>>('hb_font_destroy');
  late final _hb_font_destroy = _hb_font_destroyPtr.asFunction<void Function(ffi.Pointer<hb_font_t>)>();

  int hb_font_set_user_data(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_font_set_user_data(
      font,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_font_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_font_set_user_data');
  late final _hb_font_set_user_data = _hb_font_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_font_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_font_get_user_data(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_font_get_user_data(
      font,
      key,
    );
  }

  late final _hb_font_get_user_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_user_data_key_t>)>>(
      'hb_font_get_user_data');
  late final _hb_font_get_user_data = _hb_font_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_user_data_key_t>)>();

  void hb_font_make_immutable(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_make_immutable(
      font,
    );
  }

  late final _hb_font_make_immutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>)>>('hb_font_make_immutable');
  late final _hb_font_make_immutable = _hb_font_make_immutablePtr.asFunction<void Function(ffi.Pointer<hb_font_t>)>();

  int hb_font_is_immutable(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_is_immutable(
      font,
    );
  }

  late final _hb_font_is_immutablePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_font_t>)>>('hb_font_is_immutable');
  late final _hb_font_is_immutable = _hb_font_is_immutablePtr.asFunction<int Function(ffi.Pointer<hb_font_t>)>();

  int hb_font_get_serial(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_get_serial(
      font,
    );
  }

  late final _hb_font_get_serialPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_font_t>)>>('hb_font_get_serial');
  late final _hb_font_get_serial = _hb_font_get_serialPtr.asFunction<int Function(ffi.Pointer<hb_font_t>)>();

  void hb_font_changed(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_changed(
      font,
    );
  }

  late final _hb_font_changedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>)>>('hb_font_changed');
  late final _hb_font_changed = _hb_font_changedPtr.asFunction<void Function(ffi.Pointer<hb_font_t>)>();

  void hb_font_set_parent(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_font_t> parent,
  ) {
    return _hb_font_set_parent(
      font,
      parent,
    );
  }

  late final _hb_font_set_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_t>)>>(
          'hb_font_set_parent');
  late final _hb_font_set_parent =
      _hb_font_set_parentPtr.asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_t>)>();

  ffi.Pointer<hb_font_t> hb_font_get_parent(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_get_parent(
      font,
    );
  }

  late final _hb_font_get_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_font_t>)>>('hb_font_get_parent');
  late final _hb_font_get_parent =
      _hb_font_get_parentPtr.asFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<hb_font_t>)>();

  void hb_font_set_face(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_face_t> face,
  ) {
    return _hb_font_set_face(
      font,
      face,
    );
  }

  late final _hb_font_set_facePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_face_t>)>>(
          'hb_font_set_face');
  late final _hb_font_set_face =
      _hb_font_set_facePtr.asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_face_t>)>();

  ffi.Pointer<hb_face_t> hb_font_get_face(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_get_face(
      font,
    );
  }

  late final _hb_font_get_facePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_face_t> Function(ffi.Pointer<hb_font_t>)>>('hb_font_get_face');
  late final _hb_font_get_face =
      _hb_font_get_facePtr.asFunction<ffi.Pointer<hb_face_t> Function(ffi.Pointer<hb_font_t>)>();

  void hb_font_set_funcs(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_font_funcs_t> klass,
    ffi.Pointer<ffi.Void> font_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_set_funcs(
      font,
      klass,
      font_data,
      destroy,
    );
  }

  late final _hb_font_set_funcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_funcs_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_set_funcs');
  late final _hb_font_set_funcs = _hb_font_set_funcsPtr.asFunction<
      void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_font_funcs_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  void hb_font_set_funcs_data(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.Void> font_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_set_funcs_data(
      font,
      font_data,
      destroy,
    );
  }

  late final _hb_font_set_funcs_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>>(
          'hb_font_set_funcs_data');
  late final _hb_font_set_funcs_data = _hb_font_set_funcs_dataPtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  void hb_font_set_scale(
    ffi.Pointer<hb_font_t> font,
    int x_scale,
    int y_scale,
  ) {
    return _hb_font_set_scale(
      font,
      x_scale,
      y_scale,
    );
  }

  late final _hb_font_set_scalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Int, ffi.Int)>>('hb_font_set_scale');
  late final _hb_font_set_scale = _hb_font_set_scalePtr.asFunction<void Function(ffi.Pointer<hb_font_t>, int, int)>();

  void hb_font_get_scale(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.Int> x_scale,
    ffi.Pointer<ffi.Int> y_scale,
  ) {
    return _hb_font_get_scale(
      font,
      x_scale,
      y_scale,
    );
  }

  late final _hb_font_get_scalePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>(
      'hb_font_get_scale');
  late final _hb_font_get_scale = _hb_font_get_scalePtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void hb_font_set_ppem(
    ffi.Pointer<hb_font_t> font,
    int x_ppem,
    int y_ppem,
  ) {
    return _hb_font_set_ppem(
      font,
      x_ppem,
      y_ppem,
    );
  }

  late final _hb_font_set_ppemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.UnsignedInt, ffi.UnsignedInt)>>(
          'hb_font_set_ppem');
  late final _hb_font_set_ppem = _hb_font_set_ppemPtr.asFunction<void Function(ffi.Pointer<hb_font_t>, int, int)>();

  void hb_font_get_ppem(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.UnsignedInt> x_ppem,
    ffi.Pointer<ffi.UnsignedInt> y_ppem,
  ) {
    return _hb_font_get_ppem(
      font,
      x_ppem,
      y_ppem,
    );
  }

  late final _hb_font_get_ppemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>('hb_font_get_ppem');
  late final _hb_font_get_ppem = _hb_font_get_ppemPtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  void hb_font_set_ptem(
    ffi.Pointer<hb_font_t> font,
    double ptem,
  ) {
    return _hb_font_set_ptem(
      font,
      ptem,
    );
  }

  late final _hb_font_set_ptemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Float)>>('hb_font_set_ptem');
  late final _hb_font_set_ptem = _hb_font_set_ptemPtr.asFunction<void Function(ffi.Pointer<hb_font_t>, double)>();

  double hb_font_get_ptem(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_get_ptem(
      font,
    );
  }

  late final _hb_font_get_ptemPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<hb_font_t>)>>('hb_font_get_ptem');
  late final _hb_font_get_ptem = _hb_font_get_ptemPtr.asFunction<double Function(ffi.Pointer<hb_font_t>)>();

  void hb_font_set_synthetic_slant(
    ffi.Pointer<hb_font_t> font,
    double slant,
  ) {
    return _hb_font_set_synthetic_slant(
      font,
      slant,
    );
  }

  late final _hb_font_set_synthetic_slantPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Float)>>('hb_font_set_synthetic_slant');
  late final _hb_font_set_synthetic_slant =
      _hb_font_set_synthetic_slantPtr.asFunction<void Function(ffi.Pointer<hb_font_t>, double)>();

  double hb_font_get_synthetic_slant(
    ffi.Pointer<hb_font_t> font,
  ) {
    return _hb_font_get_synthetic_slant(
      font,
    );
  }

  late final _hb_font_get_synthetic_slantPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<hb_font_t>)>>('hb_font_get_synthetic_slant');
  late final _hb_font_get_synthetic_slant =
      _hb_font_get_synthetic_slantPtr.asFunction<double Function(ffi.Pointer<hb_font_t>)>();

  void hb_font_set_variations(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_variation_t> variations,
    int variations_length,
  ) {
    return _hb_font_set_variations(
      font,
      variations,
      variations_length,
    );
  }

  late final _hb_font_set_variationsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_variation_t>, ffi.UnsignedInt)>>(
      'hb_font_set_variations');
  late final _hb_font_set_variations =
      _hb_font_set_variationsPtr.asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_variation_t>, int)>();

  void hb_font_set_var_coords_design(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.Float> coords,
    int coords_length,
  ) {
    return _hb_font_set_var_coords_design(
      font,
      coords,
      coords_length,
    );
  }

  late final _hb_font_set_var_coords_designPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Float>, ffi.UnsignedInt)>>(
          'hb_font_set_var_coords_design');
  late final _hb_font_set_var_coords_design = _hb_font_set_var_coords_designPtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Float>, int)>();

  ffi.Pointer<ffi.Float> hb_font_get_var_coords_design(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _hb_font_get_var_coords_design(
      font,
      length,
    );
  }

  late final _hb_font_get_var_coords_designPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.UnsignedInt>)>>(
      'hb_font_get_var_coords_design');
  late final _hb_font_get_var_coords_design = _hb_font_get_var_coords_designPtr
      .asFunction<ffi.Pointer<ffi.Float> Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  void hb_font_set_var_coords_normalized(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.Int> coords,
    int coords_length,
  ) {
    return _hb_font_set_var_coords_normalized(
      font,
      coords,
      coords_length,
    );
  }

  late final _hb_font_set_var_coords_normalizedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Int>, ffi.UnsignedInt)>>(
          'hb_font_set_var_coords_normalized');
  late final _hb_font_set_var_coords_normalized = _hb_font_set_var_coords_normalizedPtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<ffi.Int> hb_font_get_var_coords_normalized(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _hb_font_get_var_coords_normalized(
      font,
      length,
    );
  }

  late final _hb_font_get_var_coords_normalizedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.UnsignedInt>)>>(
          'hb_font_get_var_coords_normalized');
  late final _hb_font_get_var_coords_normalized = _hb_font_get_var_coords_normalizedPtr
      .asFunction<ffi.Pointer<ffi.Int> Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  void hb_font_set_var_named_instance(
    ffi.Pointer<hb_font_t> font,
    int instance_index,
  ) {
    return _hb_font_set_var_named_instance(
      font,
      instance_index,
    );
  }

  late final _hb_font_set_var_named_instancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.UnsignedInt)>>(
          'hb_font_set_var_named_instance');
  late final _hb_font_set_var_named_instance =
      _hb_font_set_var_named_instancePtr.asFunction<void Function(ffi.Pointer<hb_font_t>, int)>();

  int hb_glyph_info_get_glyph_flags(
    ffi.Pointer<hb_glyph_info_t> info,
  ) {
    return _hb_glyph_info_get_glyph_flags(
      info,
    );
  }

  late final _hb_glyph_info_get_glyph_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_glyph_info_t>)>>('hb_glyph_info_get_glyph_flags');
  late final _hb_glyph_info_get_glyph_flags =
      _hb_glyph_info_get_glyph_flagsPtr.asFunction<int Function(ffi.Pointer<hb_glyph_info_t>)>();

  int hb_segment_properties_equal(
    ffi.Pointer<hb_segment_properties_t> a,
    ffi.Pointer<hb_segment_properties_t> b,
  ) {
    return _hb_segment_properties_equal(
      a,
      b,
    );
  }

  late final _hb_segment_properties_equalPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_segment_properties_t>,
              ffi.Pointer<hb_segment_properties_t>)>>('hb_segment_properties_equal');
  late final _hb_segment_properties_equal = _hb_segment_properties_equalPtr
      .asFunction<int Function(ffi.Pointer<hb_segment_properties_t>, ffi.Pointer<hb_segment_properties_t>)>();

  int hb_segment_properties_hash(
    ffi.Pointer<hb_segment_properties_t> p,
  ) {
    return _hb_segment_properties_hash(
      p,
    );
  }

  late final _hb_segment_properties_hashPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_segment_properties_t>)>>(
          'hb_segment_properties_hash');
  late final _hb_segment_properties_hash =
      _hb_segment_properties_hashPtr.asFunction<int Function(ffi.Pointer<hb_segment_properties_t>)>();

  void hb_segment_properties_overlay(
    ffi.Pointer<hb_segment_properties_t> p,
    ffi.Pointer<hb_segment_properties_t> src,
  ) {
    return _hb_segment_properties_overlay(
      p,
      src,
    );
  }

  late final _hb_segment_properties_overlayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_segment_properties_t>,
              ffi.Pointer<hb_segment_properties_t>)>>('hb_segment_properties_overlay');
  late final _hb_segment_properties_overlay = _hb_segment_properties_overlayPtr
      .asFunction<void Function(ffi.Pointer<hb_segment_properties_t>, ffi.Pointer<hb_segment_properties_t>)>();

  ffi.Pointer<hb_buffer_t> hb_buffer_create() {
    return _hb_buffer_create();
  }

  late final _hb_buffer_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer_t> Function()>>('hb_buffer_create');
  late final _hb_buffer_create = _hb_buffer_createPtr.asFunction<ffi.Pointer<hb_buffer_t> Function()>();

  ffi.Pointer<hb_buffer_t> hb_buffer_create_similar(
    ffi.Pointer<hb_buffer_t> src,
  ) {
    return _hb_buffer_create_similar(
      src,
    );
  }

  late final _hb_buffer_create_similarPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer_t> Function(ffi.Pointer<hb_buffer_t>)>>(
          'hb_buffer_create_similar');
  late final _hb_buffer_create_similar =
      _hb_buffer_create_similarPtr.asFunction<ffi.Pointer<hb_buffer_t> Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_reset(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_reset(
      buffer,
    );
  }

  late final _hb_buffer_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_reset');
  late final _hb_buffer_reset = _hb_buffer_resetPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>)>();

  ffi.Pointer<hb_buffer_t> hb_buffer_get_empty() {
    return _hb_buffer_get_empty();
  }

  late final _hb_buffer_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer_t> Function()>>('hb_buffer_get_empty');
  late final _hb_buffer_get_empty = _hb_buffer_get_emptyPtr.asFunction<ffi.Pointer<hb_buffer_t> Function()>();

  ffi.Pointer<hb_buffer_t> hb_buffer_reference(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_reference(
      buffer,
    );
  }

  late final _hb_buffer_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_buffer_t> Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_reference');
  late final _hb_buffer_reference =
      _hb_buffer_referencePtr.asFunction<ffi.Pointer<hb_buffer_t> Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_destroy(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_destroy(
      buffer,
    );
  }

  late final _hb_buffer_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_destroy');
  late final _hb_buffer_destroy = _hb_buffer_destroyPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>)>();

  int hb_buffer_set_user_data(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_buffer_set_user_data(
      buffer,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_buffer_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_buffer_set_user_data');
  late final _hb_buffer_set_user_data = _hb_buffer_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_buffer_get_user_data(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_buffer_get_user_data(
      buffer,
      key,
    );
  }

  late final _hb_buffer_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_user_data_key_t>)>>('hb_buffer_get_user_data');
  late final _hb_buffer_get_user_data = _hb_buffer_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_user_data_key_t>)>();

  void hb_buffer_set_content_type(
    ffi.Pointer<hb_buffer_t> buffer,
    int content_type,
  ) {
    return _hb_buffer_set_content_type(
      buffer,
      content_type,
    );
  }

  late final _hb_buffer_set_content_typePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Int32)>>('hb_buffer_set_content_type');
  late final _hb_buffer_set_content_type =
      _hb_buffer_set_content_typePtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_content_type(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_content_type(
      buffer,
    );
  }

  late final _hb_buffer_get_content_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_content_type');
  late final _hb_buffer_get_content_type =
      _hb_buffer_get_content_typePtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_unicode_funcs(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_unicode_funcs_t> unicode_funcs,
  ) {
    return _hb_buffer_set_unicode_funcs(
      buffer,
      unicode_funcs,
    );
  }

  late final _hb_buffer_set_unicode_funcsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_unicode_funcs_t>)>>(
          'hb_buffer_set_unicode_funcs');
  late final _hb_buffer_set_unicode_funcs = _hb_buffer_set_unicode_funcsPtr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_unicode_funcs_t>)>();

  ffi.Pointer<hb_unicode_funcs_t> hb_buffer_get_unicode_funcs(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_unicode_funcs(
      buffer,
    );
  }

  late final _hb_buffer_get_unicode_funcsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_buffer_t>)>>(
          'hb_buffer_get_unicode_funcs');
  late final _hb_buffer_get_unicode_funcs =
      _hb_buffer_get_unicode_funcsPtr.asFunction<ffi.Pointer<hb_unicode_funcs_t> Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_direction(
    ffi.Pointer<hb_buffer_t> buffer,
    int direction,
  ) {
    return _hb_buffer_set_direction(
      buffer,
      direction,
    );
  }

  late final _hb_buffer_set_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Int32)>>('hb_buffer_set_direction');
  late final _hb_buffer_set_direction =
      _hb_buffer_set_directionPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_direction(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_direction(
      buffer,
    );
  }

  late final _hb_buffer_get_directionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_direction');
  late final _hb_buffer_get_direction =
      _hb_buffer_get_directionPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_script(
    ffi.Pointer<hb_buffer_t> buffer,
    int script,
  ) {
    return _hb_buffer_set_script(
      buffer,
      script,
    );
  }

  late final _hb_buffer_set_scriptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Int32)>>('hb_buffer_set_script');
  late final _hb_buffer_set_script =
      _hb_buffer_set_scriptPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_script(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_script(
      buffer,
    );
  }

  late final _hb_buffer_get_scriptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_script');
  late final _hb_buffer_get_script = _hb_buffer_get_scriptPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_language(
    ffi.Pointer<hb_buffer_t> buffer,
    hb_language_t language,
  ) {
    return _hb_buffer_set_language(
      buffer,
      language,
    );
  }

  late final _hb_buffer_set_languagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, hb_language_t)>>('hb_buffer_set_language');
  late final _hb_buffer_set_language =
      _hb_buffer_set_languagePtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, hb_language_t)>();

  hb_language_t hb_buffer_get_language(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_language(
      buffer,
    );
  }

  late final _hb_buffer_get_languagePtr =
      _lookup<ffi.NativeFunction<hb_language_t Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_language');
  late final _hb_buffer_get_language =
      _hb_buffer_get_languagePtr.asFunction<hb_language_t Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_segment_properties(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_segment_properties_t> props,
  ) {
    return _hb_buffer_set_segment_properties(
      buffer,
      props,
    );
  }

  late final _hb_buffer_set_segment_propertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_segment_properties_t>)>>(
          'hb_buffer_set_segment_properties');
  late final _hb_buffer_set_segment_properties = _hb_buffer_set_segment_propertiesPtr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_segment_properties_t>)>();

  void hb_buffer_get_segment_properties(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_segment_properties_t> props,
  ) {
    return _hb_buffer_get_segment_properties(
      buffer,
      props,
    );
  }

  late final _hb_buffer_get_segment_propertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_segment_properties_t>)>>(
          'hb_buffer_get_segment_properties');
  late final _hb_buffer_get_segment_properties = _hb_buffer_get_segment_propertiesPtr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_segment_properties_t>)>();

  void hb_buffer_guess_segment_properties(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_guess_segment_properties(
      buffer,
    );
  }

  late final _hb_buffer_guess_segment_propertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_guess_segment_properties');
  late final _hb_buffer_guess_segment_properties =
      _hb_buffer_guess_segment_propertiesPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_flags(
    ffi.Pointer<hb_buffer_t> buffer,
    int flags,
  ) {
    return _hb_buffer_set_flags(
      buffer,
      flags,
    );
  }

  late final _hb_buffer_set_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Int32)>>('hb_buffer_set_flags');
  late final _hb_buffer_set_flags = _hb_buffer_set_flagsPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_flags(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_flags(
      buffer,
    );
  }

  late final _hb_buffer_get_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_flags');
  late final _hb_buffer_get_flags = _hb_buffer_get_flagsPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_cluster_level(
    ffi.Pointer<hb_buffer_t> buffer,
    int cluster_level,
  ) {
    return _hb_buffer_set_cluster_level(
      buffer,
      cluster_level,
    );
  }

  late final _hb_buffer_set_cluster_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Int32)>>(
          'hb_buffer_set_cluster_level');
  late final _hb_buffer_set_cluster_level =
      _hb_buffer_set_cluster_levelPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_cluster_level(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_cluster_level(
      buffer,
    );
  }

  late final _hb_buffer_get_cluster_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_cluster_level');
  late final _hb_buffer_get_cluster_level =
      _hb_buffer_get_cluster_levelPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_replacement_codepoint(
    ffi.Pointer<hb_buffer_t> buffer,
    int replacement,
  ) {
    return _hb_buffer_set_replacement_codepoint(
      buffer,
      replacement,
    );
  }

  late final _hb_buffer_set_replacement_codepointPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, hb_codepoint_t)>>(
          'hb_buffer_set_replacement_codepoint');
  late final _hb_buffer_set_replacement_codepoint =
      _hb_buffer_set_replacement_codepointPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_replacement_codepoint(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_replacement_codepoint(
      buffer,
    );
  }

  late final _hb_buffer_get_replacement_codepointPtr =
      _lookup<ffi.NativeFunction<hb_codepoint_t Function(ffi.Pointer<hb_buffer_t>)>>(
          'hb_buffer_get_replacement_codepoint');
  late final _hb_buffer_get_replacement_codepoint =
      _hb_buffer_get_replacement_codepointPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_invisible_glyph(
    ffi.Pointer<hb_buffer_t> buffer,
    int invisible,
  ) {
    return _hb_buffer_set_invisible_glyph(
      buffer,
      invisible,
    );
  }

  late final _hb_buffer_set_invisible_glyphPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, hb_codepoint_t)>>(
          'hb_buffer_set_invisible_glyph');
  late final _hb_buffer_set_invisible_glyph =
      _hb_buffer_set_invisible_glyphPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_invisible_glyph(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_invisible_glyph(
      buffer,
    );
  }

  late final _hb_buffer_get_invisible_glyphPtr =
      _lookup<ffi.NativeFunction<hb_codepoint_t Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_invisible_glyph');
  late final _hb_buffer_get_invisible_glyph =
      _hb_buffer_get_invisible_glyphPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_set_not_found_glyph(
    ffi.Pointer<hb_buffer_t> buffer,
    int not_found,
  ) {
    return _hb_buffer_set_not_found_glyph(
      buffer,
      not_found,
    );
  }

  late final _hb_buffer_set_not_found_glyphPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, hb_codepoint_t)>>(
          'hb_buffer_set_not_found_glyph');
  late final _hb_buffer_set_not_found_glyph =
      _hb_buffer_set_not_found_glyphPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_not_found_glyph(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_not_found_glyph(
      buffer,
    );
  }

  late final _hb_buffer_get_not_found_glyphPtr =
      _lookup<ffi.NativeFunction<hb_codepoint_t Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_not_found_glyph');
  late final _hb_buffer_get_not_found_glyph =
      _hb_buffer_get_not_found_glyphPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_clear_contents(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_clear_contents(
      buffer,
    );
  }

  late final _hb_buffer_clear_contentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_clear_contents');
  late final _hb_buffer_clear_contents =
      _hb_buffer_clear_contentsPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>)>();

  int hb_buffer_pre_allocate(
    ffi.Pointer<hb_buffer_t> buffer,
    int size,
  ) {
    return _hb_buffer_pre_allocate(
      buffer,
      size,
    );
  }

  late final _hb_buffer_pre_allocatePtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_buffer_t>, ffi.UnsignedInt)>>(
          'hb_buffer_pre_allocate');
  late final _hb_buffer_pre_allocate =
      _hb_buffer_pre_allocatePtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_allocation_successful(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_allocation_successful(
      buffer,
    );
  }

  late final _hb_buffer_allocation_successfulPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_allocation_successful');
  late final _hb_buffer_allocation_successful =
      _hb_buffer_allocation_successfulPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_reverse(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_reverse(
      buffer,
    );
  }

  late final _hb_buffer_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_reverse');
  late final _hb_buffer_reverse = _hb_buffer_reversePtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_reverse_range(
    ffi.Pointer<hb_buffer_t> buffer,
    int start,
    int end,
  ) {
    return _hb_buffer_reverse_range(
      buffer,
      start,
      end,
    );
  }

  late final _hb_buffer_reverse_rangePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.UnsignedInt, ffi.UnsignedInt)>>(
          'hb_buffer_reverse_range');
  late final _hb_buffer_reverse_range =
      _hb_buffer_reverse_rangePtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int, int)>();

  void hb_buffer_reverse_clusters(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_reverse_clusters(
      buffer,
    );
  }

  late final _hb_buffer_reverse_clustersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_reverse_clusters');
  late final _hb_buffer_reverse_clusters =
      _hb_buffer_reverse_clustersPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_add(
    ffi.Pointer<hb_buffer_t> buffer,
    int codepoint,
    int cluster,
  ) {
    return _hb_buffer_add(
      buffer,
      codepoint,
      cluster,
    );
  }

  late final _hb_buffer_addPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>, hb_codepoint_t, ffi.UnsignedInt)>>(
          'hb_buffer_add');
  late final _hb_buffer_add = _hb_buffer_addPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, int, int)>();

  void hb_buffer_add_utf8(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.Char> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _hb_buffer_add_utf8(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _hb_buffer_add_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_utf8');
  late final _hb_buffer_add_utf8 = _hb_buffer_add_utf8Ptr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Char>, int, int, int)>();

  void hb_buffer_add_utf16(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.Uint16> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _hb_buffer_add_utf16(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _hb_buffer_add_utf16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Uint16>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_utf16');
  late final _hb_buffer_add_utf16 = _hb_buffer_add_utf16Ptr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Uint16>, int, int, int)>();

  void hb_buffer_add_utf32(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.Uint32> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _hb_buffer_add_utf32(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _hb_buffer_add_utf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Uint32>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_utf32');
  late final _hb_buffer_add_utf32 = _hb_buffer_add_utf32Ptr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Uint32>, int, int, int)>();

  void hb_buffer_add_latin1(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.Uint8> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _hb_buffer_add_latin1(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _hb_buffer_add_latin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_latin1');
  late final _hb_buffer_add_latin1 = _hb_buffer_add_latin1Ptr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void hb_buffer_add_codepoints(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_codepoint_t> text,
    int text_length,
    int item_offset,
    int item_length,
  ) {
    return _hb_buffer_add_codepoints(
      buffer,
      text,
      text_length,
      item_offset,
      item_length,
    );
  }

  late final _hb_buffer_add_codepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_codepoint_t>, ffi.Int, ffi.UnsignedInt,
              ffi.Int)>>('hb_buffer_add_codepoints');
  late final _hb_buffer_add_codepoints = _hb_buffer_add_codepointsPtr
      .asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_codepoint_t>, int, int, int)>();

  void hb_buffer_append(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_buffer_t> source,
    int start,
    int end,
  ) {
    return _hb_buffer_append(
      buffer,
      source,
      start,
      end,
    );
  }

  late final _hb_buffer_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_buffer_t>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('hb_buffer_append');
  late final _hb_buffer_append =
      _hb_buffer_appendPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_buffer_t>, int, int)>();

  int hb_buffer_set_length(
    ffi.Pointer<hb_buffer_t> buffer,
    int length,
  ) {
    return _hb_buffer_set_length(
      buffer,
      length,
    );
  }

  late final _hb_buffer_set_lengthPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_buffer_t>, ffi.UnsignedInt)>>(
          'hb_buffer_set_length');
  late final _hb_buffer_set_length = _hb_buffer_set_lengthPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>, int)>();

  int hb_buffer_get_length(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_get_length(
      buffer,
    );
  }

  late final _hb_buffer_get_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_get_length');
  late final _hb_buffer_get_length = _hb_buffer_get_lengthPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  ffi.Pointer<hb_glyph_info_t> hb_buffer_get_glyph_infos(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _hb_buffer_get_glyph_infos(
      buffer,
      length,
    );
  }

  late final _hb_buffer_get_glyph_infosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_glyph_info_t> Function(
              ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.UnsignedInt>)>>('hb_buffer_get_glyph_infos');
  late final _hb_buffer_get_glyph_infos = _hb_buffer_get_glyph_infosPtr
      .asFunction<ffi.Pointer<hb_glyph_info_t> Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<hb_glyph_position_t> hb_buffer_get_glyph_positions(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.UnsignedInt> length,
  ) {
    return _hb_buffer_get_glyph_positions(
      buffer,
      length,
    );
  }

  late final _hb_buffer_get_glyph_positionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_glyph_position_t> Function(
              ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.UnsignedInt>)>>('hb_buffer_get_glyph_positions');
  late final _hb_buffer_get_glyph_positions = _hb_buffer_get_glyph_positionsPtr
      .asFunction<ffi.Pointer<hb_glyph_position_t> Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  int hb_buffer_has_positions(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_has_positions(
      buffer,
    );
  }

  late final _hb_buffer_has_positionsPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_has_positions');
  late final _hb_buffer_has_positions =
      _hb_buffer_has_positionsPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>)>();

  void hb_buffer_normalize_glyphs(
    ffi.Pointer<hb_buffer_t> buffer,
  ) {
    return _hb_buffer_normalize_glyphs(
      buffer,
    );
  }

  late final _hb_buffer_normalize_glyphsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_buffer_t>)>>('hb_buffer_normalize_glyphs');
  late final _hb_buffer_normalize_glyphs =
      _hb_buffer_normalize_glyphsPtr.asFunction<void Function(ffi.Pointer<hb_buffer_t>)>();

  int hb_buffer_serialize_format_from_string(
    ffi.Pointer<ffi.Char> str,
    int len,
  ) {
    return _hb_buffer_serialize_format_from_string(
      str,
      len,
    );
  }

  late final _hb_buffer_serialize_format_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
          'hb_buffer_serialize_format_from_string');
  late final _hb_buffer_serialize_format_from_string =
      _hb_buffer_serialize_format_from_stringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> hb_buffer_serialize_format_to_string(
    int format,
  ) {
    return _hb_buffer_serialize_format_to_string(
      format,
    );
  }

  late final _hb_buffer_serialize_format_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>('hb_buffer_serialize_format_to_string');
  late final _hb_buffer_serialize_format_to_string =
      _hb_buffer_serialize_format_to_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> hb_buffer_serialize_list_formats() {
    return _hb_buffer_serialize_list_formats();
  }

  late final _hb_buffer_serialize_list_formatsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>('hb_buffer_serialize_list_formats');
  late final _hb_buffer_serialize_list_formats =
      _hb_buffer_serialize_list_formatsPtr.asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  int hb_buffer_serialize_glyphs(
    ffi.Pointer<hb_buffer_t> buffer,
    int start,
    int end,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.UnsignedInt> buf_consumed,
    ffi.Pointer<hb_font_t> font,
    int format,
    int flags,
  ) {
    return _hb_buffer_serialize_glyphs(
      buffer,
      start,
      end,
      buf,
      buf_size,
      buf_consumed,
      font,
      format,
      flags,
    );
  }

  late final _hb_buffer_serialize_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<hb_buffer_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<hb_font_t>,
              ffi.Int32,
              ffi.Int32)>>('hb_buffer_serialize_glyphs');
  late final _hb_buffer_serialize_glyphs = _hb_buffer_serialize_glyphsPtr.asFunction<
      int Function(ffi.Pointer<hb_buffer_t>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<hb_font_t>, int, int)>();

  int hb_buffer_serialize_unicode(
    ffi.Pointer<hb_buffer_t> buffer,
    int start,
    int end,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.UnsignedInt> buf_consumed,
    int format,
    int flags,
  ) {
    return _hb_buffer_serialize_unicode(
      buffer,
      start,
      end,
      buf,
      buf_size,
      buf_consumed,
      format,
      flags,
    );
  }

  late final _hb_buffer_serialize_unicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_buffer_t>, ffi.UnsignedInt, ffi.UnsignedInt, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedInt>, ffi.Int32, ffi.Int32)>>('hb_buffer_serialize_unicode');
  late final _hb_buffer_serialize_unicode = _hb_buffer_serialize_unicodePtr.asFunction<
      int Function(
          ffi.Pointer<hb_buffer_t>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedInt>, int, int)>();

  int hb_buffer_serialize(
    ffi.Pointer<hb_buffer_t> buffer,
    int start,
    int end,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.UnsignedInt> buf_consumed,
    ffi.Pointer<hb_font_t> font,
    int format,
    int flags,
  ) {
    return _hb_buffer_serialize(
      buffer,
      start,
      end,
      buf,
      buf_size,
      buf_consumed,
      font,
      format,
      flags,
    );
  }

  late final _hb_buffer_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<hb_buffer_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<hb_font_t>,
              ffi.Int32,
              ffi.Int32)>>('hb_buffer_serialize');
  late final _hb_buffer_serialize = _hb_buffer_serializePtr.asFunction<
      int Function(ffi.Pointer<hb_buffer_t>, int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<hb_font_t>, int, int)>();

  int hb_buffer_deserialize_glyphs(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> end_ptr,
    ffi.Pointer<hb_font_t> font,
    int format,
  ) {
    return _hb_buffer_deserialize_glyphs(
      buffer,
      buf,
      buf_len,
      end_ptr,
      font,
      format,
    );
  }

  late final _hb_buffer_deserialize_glyphsPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<hb_font_t>, ffi.Int32)>>('hb_buffer_deserialize_glyphs');
  late final _hb_buffer_deserialize_glyphs = _hb_buffer_deserialize_glyphsPtr.asFunction<
      int Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<hb_font_t>, int)>();

  int hb_buffer_deserialize_unicode(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<ffi.Char> buf,
    int buf_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> end_ptr,
    int format,
  ) {
    return _hb_buffer_deserialize_unicode(
      buffer,
      buf,
      buf_len,
      end_ptr,
      format,
    );
  }

  late final _hb_buffer_deserialize_unicodePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int32)>>('hb_buffer_deserialize_unicode');
  late final _hb_buffer_deserialize_unicode = _hb_buffer_deserialize_unicodePtr.asFunction<
      int Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int hb_buffer_diff(
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_buffer_t> reference,
    int dottedcircle_glyph,
    int position_fuzz,
  ) {
    return _hb_buffer_diff(
      buffer,
      reference,
      dottedcircle_glyph,
      position_fuzz,
    );
  }

  late final _hb_buffer_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_buffer_t>, hb_codepoint_t, ffi.UnsignedInt)>>('hb_buffer_diff');
  late final _hb_buffer_diff =
      _hb_buffer_diffPtr.asFunction<int Function(ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_buffer_t>, int, int)>();

  void hb_buffer_set_message_func(
    ffi.Pointer<hb_buffer_t> buffer,
    hb_buffer_message_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_buffer_set_message_func(
      buffer,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_buffer_set_message_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_buffer_t>, hb_buffer_message_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_buffer_set_message_func');
  late final _hb_buffer_set_message_func = _hb_buffer_set_message_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_buffer_t>, hb_buffer_message_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  void hb_font_funcs_set_glyph_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_func');
  late final _hb_font_funcs_set_glyph_func = _hb_font_funcs_set_glyph_funcPtr.asFunction<
      void Function(
          ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_func_t, ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  /// hb_unicode_funcs_set_eastasian_width_func:
  /// @ufuncs: a Unicode-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_eastasian_width_func_t.
  ///
  /// Since: 0.9.2
  /// Deprecated: 2.0.0
  void hb_unicode_funcs_set_eastasian_width_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_eastasian_width_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_eastasian_width_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_eastasian_width_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_eastasian_width_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_unicode_funcs_set_eastasian_width_func');
  late final _hb_unicode_funcs_set_eastasian_width_func = _hb_unicode_funcs_set_eastasian_width_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_eastasian_width_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  /// hb_unicode_eastasian_width:
  /// @ufuncs: a Unicode-function structure
  /// @unicode: The code point to query
  ///
  /// Don't use. Not used by HarfBuzz.
  ///
  /// Since: 0.9.2
  /// Deprecated: 2.0.0
  int hb_unicode_eastasian_width(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int unicode,
  ) {
    return _hb_unicode_eastasian_width(
      ufuncs,
      unicode,
    );
  }

  late final _hb_unicode_eastasian_widthPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t)>>(
          'hb_unicode_eastasian_width');
  late final _hb_unicode_eastasian_width =
      _hb_unicode_eastasian_widthPtr.asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>, int)>();

  /// hb_unicode_funcs_set_decompose_compatibility_func:
  /// @ufuncs: A Unicode-functions structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_unicode_decompose_compatibility_func_t.
  ///
  ///
  ///
  /// Since: 0.9.2
  /// Deprecated: 2.0.0
  void hb_unicode_funcs_set_decompose_compatibility_func(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    hb_unicode_decompose_compatibility_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_unicode_funcs_set_decompose_compatibility_func(
      ufuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_unicode_funcs_set_decompose_compatibility_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_decompose_compatibility_func_t,
              ffi.Pointer<ffi.Void>, hb_destroy_func_t)>>('hb_unicode_funcs_set_decompose_compatibility_func');
  late final _hb_unicode_funcs_set_decompose_compatibility_func =
      _hb_unicode_funcs_set_decompose_compatibility_funcPtr.asFunction<
          void Function(ffi.Pointer<hb_unicode_funcs_t>, hb_unicode_decompose_compatibility_func_t,
              ffi.Pointer<ffi.Void>, hb_destroy_func_t)>();

  int hb_unicode_decompose_compatibility(
    ffi.Pointer<hb_unicode_funcs_t> ufuncs,
    int u,
    ffi.Pointer<hb_codepoint_t> decomposed,
  ) {
    return _hb_unicode_decompose_compatibility(
      ufuncs,
      u,
      decomposed,
    );
  }

  late final _hb_unicode_decompose_compatibilityPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t,
              ffi.Pointer<hb_codepoint_t>)>>('hb_unicode_decompose_compatibility');
  late final _hb_unicode_decompose_compatibility = _hb_unicode_decompose_compatibilityPtr
      .asFunction<int Function(ffi.Pointer<hb_unicode_funcs_t>, int, ffi.Pointer<hb_codepoint_t>)>();

  /// hb_font_funcs_set_glyph_v_kerning_func:
  /// @ffuncs: A font-function structure
  /// @func: (closure user_data) (destroy destroy) (scope notified): The callback function to assign
  /// @user_data: Data to pass to @func
  /// @destroy: (nullable): The function to call when @user_data is not needed anymore
  ///
  /// Sets the implementation function for #hb_font_get_glyph_v_kerning_func_t.
  ///
  /// Since: 0.9.2
  /// Deprecated: 2.0.0
  void hb_font_funcs_set_glyph_v_kerning_func(
    ffi.Pointer<hb_font_funcs_t> ffuncs,
    hb_font_get_glyph_v_kerning_func_t func,
    ffi.Pointer<ffi.Void> user_data,
    hb_destroy_func_t destroy,
  ) {
    return _hb_font_funcs_set_glyph_v_kerning_func(
      ffuncs,
      func,
      user_data,
      destroy,
    );
  }

  late final _hb_font_funcs_set_glyph_v_kerning_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_kerning_func_t, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t)>>('hb_font_funcs_set_glyph_v_kerning_func');
  late final _hb_font_funcs_set_glyph_v_kerning_func = _hb_font_funcs_set_glyph_v_kerning_funcPtr.asFunction<
      void Function(ffi.Pointer<hb_font_funcs_t>, hb_font_get_glyph_v_kerning_func_t, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t)>();

  int hb_font_get_glyph_v_kerning(
    ffi.Pointer<hb_font_t> font,
    int top_glyph,
    int bottom_glyph,
  ) {
    return _hb_font_get_glyph_v_kerning(
      font,
      top_glyph,
      bottom_glyph,
    );
  }

  late final _hb_font_get_glyph_v_kerningPtr =
      _lookup<ffi.NativeFunction<hb_position_t Function(ffi.Pointer<hb_font_t>, hb_codepoint_t, hb_codepoint_t)>>(
          'hb_font_get_glyph_v_kerning');
  late final _hb_font_get_glyph_v_kerning =
      _hb_font_get_glyph_v_kerningPtr.asFunction<int Function(ffi.Pointer<hb_font_t>, int, int)>();

  ffi.Pointer<hb_map_t> hb_map_create() {
    return _hb_map_create();
  }

  late final _hb_map_createPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_map_t> Function()>>('hb_map_create');
  late final _hb_map_create = _hb_map_createPtr.asFunction<ffi.Pointer<hb_map_t> Function()>();

  ffi.Pointer<hb_map_t> hb_map_get_empty() {
    return _hb_map_get_empty();
  }

  late final _hb_map_get_emptyPtr = _lookup<ffi.NativeFunction<ffi.Pointer<hb_map_t> Function()>>('hb_map_get_empty');
  late final _hb_map_get_empty = _hb_map_get_emptyPtr.asFunction<ffi.Pointer<hb_map_t> Function()>();

  ffi.Pointer<hb_map_t> hb_map_reference(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_reference(
      map,
    );
  }

  late final _hb_map_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_map_t> Function(ffi.Pointer<hb_map_t>)>>('hb_map_reference');
  late final _hb_map_reference =
      _hb_map_referencePtr.asFunction<ffi.Pointer<hb_map_t> Function(ffi.Pointer<hb_map_t>)>();

  void hb_map_destroy(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_destroy(
      map,
    );
  }

  late final _hb_map_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_map_t>)>>('hb_map_destroy');
  late final _hb_map_destroy = _hb_map_destroyPtr.asFunction<void Function(ffi.Pointer<hb_map_t>)>();

  int hb_map_set_user_data(
    ffi.Pointer<hb_map_t> map,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_map_set_user_data(
      map,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_map_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_map_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_map_set_user_data');
  late final _hb_map_set_user_data = _hb_map_set_user_dataPtr.asFunction<
      int Function(
          ffi.Pointer<hb_map_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>, hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_map_get_user_data(
    ffi.Pointer<hb_map_t> map,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_map_get_user_data(
      map,
      key,
    );
  }

  late final _hb_map_get_user_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_map_t>, ffi.Pointer<hb_user_data_key_t>)>>(
      'hb_map_get_user_data');
  late final _hb_map_get_user_data = _hb_map_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_map_t>, ffi.Pointer<hb_user_data_key_t>)>();

  int hb_map_allocation_successful(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_allocation_successful(
      map,
    );
  }

  late final _hb_map_allocation_successfulPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_map_t>)>>('hb_map_allocation_successful');
  late final _hb_map_allocation_successful =
      _hb_map_allocation_successfulPtr.asFunction<int Function(ffi.Pointer<hb_map_t>)>();

  ffi.Pointer<hb_map_t> hb_map_copy(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_copy(
      map,
    );
  }

  late final _hb_map_copyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_map_t> Function(ffi.Pointer<hb_map_t>)>>('hb_map_copy');
  late final _hb_map_copy = _hb_map_copyPtr.asFunction<ffi.Pointer<hb_map_t> Function(ffi.Pointer<hb_map_t>)>();

  void hb_map_clear(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_clear(
      map,
    );
  }

  late final _hb_map_clearPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_map_t>)>>('hb_map_clear');
  late final _hb_map_clear = _hb_map_clearPtr.asFunction<void Function(ffi.Pointer<hb_map_t>)>();

  int hb_map_is_empty(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_is_empty(
      map,
    );
  }

  late final _hb_map_is_emptyPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_map_t>)>>('hb_map_is_empty');
  late final _hb_map_is_empty = _hb_map_is_emptyPtr.asFunction<int Function(ffi.Pointer<hb_map_t>)>();

  int hb_map_get_population(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_get_population(
      map,
    );
  }

  late final _hb_map_get_populationPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_map_t>)>>('hb_map_get_population');
  late final _hb_map_get_population = _hb_map_get_populationPtr.asFunction<int Function(ffi.Pointer<hb_map_t>)>();

  int hb_map_is_equal(
    ffi.Pointer<hb_map_t> map,
    ffi.Pointer<hb_map_t> other,
  ) {
    return _hb_map_is_equal(
      map,
      other,
    );
  }

  late final _hb_map_is_equalPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_map_t>, ffi.Pointer<hb_map_t>)>>('hb_map_is_equal');
  late final _hb_map_is_equal =
      _hb_map_is_equalPtr.asFunction<int Function(ffi.Pointer<hb_map_t>, ffi.Pointer<hb_map_t>)>();

  int hb_map_hash(
    ffi.Pointer<hb_map_t> map,
  ) {
    return _hb_map_hash(
      map,
    );
  }

  late final _hb_map_hashPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<hb_map_t>)>>('hb_map_hash');
  late final _hb_map_hash = _hb_map_hashPtr.asFunction<int Function(ffi.Pointer<hb_map_t>)>();

  void hb_map_set(
    ffi.Pointer<hb_map_t> map,
    int key,
    int value,
  ) {
    return _hb_map_set(
      map,
      key,
      value,
    );
  }

  late final _hb_map_setPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_map_t>, hb_codepoint_t, hb_codepoint_t)>>(
          'hb_map_set');
  late final _hb_map_set = _hb_map_setPtr.asFunction<void Function(ffi.Pointer<hb_map_t>, int, int)>();

  int hb_map_get(
    ffi.Pointer<hb_map_t> map,
    int key,
  ) {
    return _hb_map_get(
      map,
      key,
    );
  }

  late final _hb_map_getPtr =
      _lookup<ffi.NativeFunction<hb_codepoint_t Function(ffi.Pointer<hb_map_t>, hb_codepoint_t)>>('hb_map_get');
  late final _hb_map_get = _hb_map_getPtr.asFunction<int Function(ffi.Pointer<hb_map_t>, int)>();

  void hb_map_del(
    ffi.Pointer<hb_map_t> map,
    int key,
  ) {
    return _hb_map_del(
      map,
      key,
    );
  }

  late final _hb_map_delPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_map_t>, hb_codepoint_t)>>('hb_map_del');
  late final _hb_map_del = _hb_map_delPtr.asFunction<void Function(ffi.Pointer<hb_map_t>, int)>();

  int hb_map_has(
    ffi.Pointer<hb_map_t> map,
    int key,
  ) {
    return _hb_map_has(
      map,
      key,
    );
  }

  late final _hb_map_hasPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.Pointer<hb_map_t>, hb_codepoint_t)>>('hb_map_has');
  late final _hb_map_has = _hb_map_hasPtr.asFunction<int Function(ffi.Pointer<hb_map_t>, int)>();

  void hb_shape(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_feature_t> features,
    int num_features,
  ) {
    return _hb_shape(
      font,
      buffer,
      features,
      num_features,
    );
  }

  late final _hb_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_feature_t>,
              ffi.UnsignedInt)>>('hb_shape');
  late final _hb_shape = _hb_shapePtr
      .asFunction<void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_feature_t>, int)>();

  int hb_shape_full(
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_feature_t> features,
    int num_features,
    ffi.Pointer<ffi.Pointer<ffi.Char>> shaper_list,
  ) {
    return _hb_shape_full(
      font,
      buffer,
      features,
      num_features,
      shaper_list,
    );
  }

  late final _hb_shape_fullPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_feature_t>,
              ffi.UnsignedInt, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hb_shape_full');
  late final _hb_shape_full = _hb_shape_fullPtr.asFunction<
      int Function(ffi.Pointer<hb_font_t>, ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_feature_t>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> hb_shape_list_shapers() {
    return _hb_shape_list_shapers();
  }

  late final _hb_shape_list_shapersPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>('hb_shape_list_shapers');
  late final _hb_shape_list_shapers =
      _hb_shape_list_shapersPtr.asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<hb_shape_plan_t> hb_shape_plan_create(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_segment_properties_t> props,
    ffi.Pointer<hb_feature_t> user_features,
    int num_user_features,
    ffi.Pointer<ffi.Pointer<ffi.Char>> shaper_list,
  ) {
    return _hb_shape_plan_create(
      face,
      props,
      user_features,
      num_user_features,
      shaper_list,
    );
  }

  late final _hb_shape_plan_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_shape_plan_t> Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_segment_properties_t>,
              ffi.Pointer<hb_feature_t>, ffi.UnsignedInt, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hb_shape_plan_create');
  late final _hb_shape_plan_create = _hb_shape_plan_createPtr.asFunction<
      ffi.Pointer<hb_shape_plan_t> Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_segment_properties_t>,
          ffi.Pointer<hb_feature_t>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<hb_shape_plan_t> hb_shape_plan_create_cached(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_segment_properties_t> props,
    ffi.Pointer<hb_feature_t> user_features,
    int num_user_features,
    ffi.Pointer<ffi.Pointer<ffi.Char>> shaper_list,
  ) {
    return _hb_shape_plan_create_cached(
      face,
      props,
      user_features,
      num_user_features,
      shaper_list,
    );
  }

  late final _hb_shape_plan_create_cachedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_shape_plan_t> Function(
              ffi.Pointer<hb_face_t>,
              ffi.Pointer<hb_segment_properties_t>,
              ffi.Pointer<hb_feature_t>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hb_shape_plan_create_cached');
  late final _hb_shape_plan_create_cached = _hb_shape_plan_create_cachedPtr.asFunction<
      ffi.Pointer<hb_shape_plan_t> Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_segment_properties_t>,
          ffi.Pointer<hb_feature_t>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<hb_shape_plan_t> hb_shape_plan_create2(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_segment_properties_t> props,
    ffi.Pointer<hb_feature_t> user_features,
    int num_user_features,
    ffi.Pointer<ffi.Int> coords,
    int num_coords,
    ffi.Pointer<ffi.Pointer<ffi.Char>> shaper_list,
  ) {
    return _hb_shape_plan_create2(
      face,
      props,
      user_features,
      num_user_features,
      coords,
      num_coords,
      shaper_list,
    );
  }

  late final _hb_shape_plan_create2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_shape_plan_t> Function(
              ffi.Pointer<hb_face_t>,
              ffi.Pointer<hb_segment_properties_t>,
              ffi.Pointer<hb_feature_t>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hb_shape_plan_create2');
  late final _hb_shape_plan_create2 = _hb_shape_plan_create2Ptr.asFunction<
      ffi.Pointer<hb_shape_plan_t> Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_segment_properties_t>,
          ffi.Pointer<hb_feature_t>, int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<hb_shape_plan_t> hb_shape_plan_create_cached2(
    ffi.Pointer<hb_face_t> face,
    ffi.Pointer<hb_segment_properties_t> props,
    ffi.Pointer<hb_feature_t> user_features,
    int num_user_features,
    ffi.Pointer<ffi.Int> coords,
    int num_coords,
    ffi.Pointer<ffi.Pointer<ffi.Char>> shaper_list,
  ) {
    return _hb_shape_plan_create_cached2(
      face,
      props,
      user_features,
      num_user_features,
      coords,
      num_coords,
      shaper_list,
    );
  }

  late final _hb_shape_plan_create_cached2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_shape_plan_t> Function(
              ffi.Pointer<hb_face_t>,
              ffi.Pointer<hb_segment_properties_t>,
              ffi.Pointer<hb_feature_t>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('hb_shape_plan_create_cached2');
  late final _hb_shape_plan_create_cached2 = _hb_shape_plan_create_cached2Ptr.asFunction<
      ffi.Pointer<hb_shape_plan_t> Function(ffi.Pointer<hb_face_t>, ffi.Pointer<hb_segment_properties_t>,
          ffi.Pointer<hb_feature_t>, int, ffi.Pointer<ffi.Int>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<hb_shape_plan_t> hb_shape_plan_get_empty() {
    return _hb_shape_plan_get_empty();
  }

  late final _hb_shape_plan_get_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_shape_plan_t> Function()>>('hb_shape_plan_get_empty');
  late final _hb_shape_plan_get_empty =
      _hb_shape_plan_get_emptyPtr.asFunction<ffi.Pointer<hb_shape_plan_t> Function()>();

  ffi.Pointer<hb_shape_plan_t> hb_shape_plan_reference(
    ffi.Pointer<hb_shape_plan_t> shape_plan,
  ) {
    return _hb_shape_plan_reference(
      shape_plan,
    );
  }

  late final _hb_shape_plan_referencePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<hb_shape_plan_t> Function(ffi.Pointer<hb_shape_plan_t>)>>(
          'hb_shape_plan_reference');
  late final _hb_shape_plan_reference =
      _hb_shape_plan_referencePtr.asFunction<ffi.Pointer<hb_shape_plan_t> Function(ffi.Pointer<hb_shape_plan_t>)>();

  void hb_shape_plan_destroy(
    ffi.Pointer<hb_shape_plan_t> shape_plan,
  ) {
    return _hb_shape_plan_destroy(
      shape_plan,
    );
  }

  late final _hb_shape_plan_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<hb_shape_plan_t>)>>('hb_shape_plan_destroy');
  late final _hb_shape_plan_destroy =
      _hb_shape_plan_destroyPtr.asFunction<void Function(ffi.Pointer<hb_shape_plan_t>)>();

  int hb_shape_plan_set_user_data(
    ffi.Pointer<hb_shape_plan_t> shape_plan,
    ffi.Pointer<hb_user_data_key_t> key,
    ffi.Pointer<ffi.Void> data,
    hb_destroy_func_t destroy,
    int replace,
  ) {
    return _hb_shape_plan_set_user_data(
      shape_plan,
      key,
      data,
      destroy,
      replace,
    );
  }

  late final _hb_shape_plan_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_shape_plan_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
              hb_destroy_func_t, hb_bool_t)>>('hb_shape_plan_set_user_data');
  late final _hb_shape_plan_set_user_data = _hb_shape_plan_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<hb_shape_plan_t>, ffi.Pointer<hb_user_data_key_t>, ffi.Pointer<ffi.Void>,
          hb_destroy_func_t, int)>();

  ffi.Pointer<ffi.Void> hb_shape_plan_get_user_data(
    ffi.Pointer<hb_shape_plan_t> shape_plan,
    ffi.Pointer<hb_user_data_key_t> key,
  ) {
    return _hb_shape_plan_get_user_data(
      shape_plan,
      key,
    );
  }

  late final _hb_shape_plan_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<hb_shape_plan_t>, ffi.Pointer<hb_user_data_key_t>)>>('hb_shape_plan_get_user_data');
  late final _hb_shape_plan_get_user_data = _hb_shape_plan_get_user_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<hb_shape_plan_t>, ffi.Pointer<hb_user_data_key_t>)>();

  int hb_shape_plan_execute(
    ffi.Pointer<hb_shape_plan_t> shape_plan,
    ffi.Pointer<hb_font_t> font,
    ffi.Pointer<hb_buffer_t> buffer,
    ffi.Pointer<hb_feature_t> features,
    int num_features,
  ) {
    return _hb_shape_plan_execute(
      shape_plan,
      font,
      buffer,
      features,
      num_features,
    );
  }

  late final _hb_shape_plan_executePtr = _lookup<
      ffi.NativeFunction<
          hb_bool_t Function(ffi.Pointer<hb_shape_plan_t>, ffi.Pointer<hb_font_t>, ffi.Pointer<hb_buffer_t>,
              ffi.Pointer<hb_feature_t>, ffi.UnsignedInt)>>('hb_shape_plan_execute');
  late final _hb_shape_plan_execute = _hb_shape_plan_executePtr.asFunction<
      int Function(ffi.Pointer<hb_shape_plan_t>, ffi.Pointer<hb_font_t>, ffi.Pointer<hb_buffer_t>,
          ffi.Pointer<hb_feature_t>, int)>();

  ffi.Pointer<ffi.Char> hb_shape_plan_get_shaper(
    ffi.Pointer<hb_shape_plan_t> shape_plan,
  ) {
    return _hb_shape_plan_get_shaper(
      shape_plan,
    );
  }

  late final _hb_shape_plan_get_shaperPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_shape_plan_t>)>>(
          'hb_shape_plan_get_shaper');
  late final _hb_shape_plan_get_shaper =
      _hb_shape_plan_get_shaperPtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<hb_shape_plan_t>)>();

  double hb_style_get_value(
    ffi.Pointer<hb_font_t> font,
    int style_tag,
  ) {
    return _hb_style_get_value(
      font,
      style_tag,
    );
  }

  late final _hb_style_get_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<hb_font_t>, ffi.Int32)>>('hb_style_get_value');
  late final _hb_style_get_value = _hb_style_get_valuePtr.asFunction<double Function(ffi.Pointer<hb_font_t>, int)>();

  void hb_version(
    ffi.Pointer<ffi.UnsignedInt> major,
    ffi.Pointer<ffi.UnsignedInt> minor,
    ffi.Pointer<ffi.UnsignedInt> micro,
  ) {
    return _hb_version(
      major,
      minor,
      micro,
    );
  }

  late final _hb_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>('hb_version');
  late final _hb_version = _hb_versionPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> hb_version_string() {
    return _hb_version_string();
  }

  late final _hb_version_stringPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('hb_version_string');
  late final _hb_version_string = _hb_version_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int hb_version_atleast(
    int major,
    int minor,
    int micro,
  ) {
    return _hb_version_atleast(
      major,
      minor,
      micro,
    );
  }

  late final _hb_version_atleastPtr =
      _lookup<ffi.NativeFunction<hb_bool_t Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.UnsignedInt)>>(
          'hb_version_atleast');
  late final _hb_version_atleast = _hb_version_atleastPtr.asFunction<int Function(int, int, int)>();
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

class _hb_var_int_t extends ffi.Union {
  @ffi.Uint32()
  external int u32;

  @ffi.Int32()
  external int i32;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint16> u16;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int16> i16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> u8;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> i8;
}

class _hb_var_num_t extends ffi.Union {
  @ffi.Float()
  external double f;

  @ffi.Uint32()
  external int u32;

  @ffi.Int32()
  external int i32;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint16> u16;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int16> i16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> u8;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> i8;
}

/// hb_tag_t:
///
/// Data type for tag identifiers. Tags are four
/// byte integers, each byte representing a character.
///
/// Tags are used to identify tables, design-variation axes,
/// scripts, languages, font features, and baselines with
/// human-readable names.
typedef hb_tag_t = ffi.Uint32;

/// hb_direction_t:
/// @HB_DIRECTION_INVALID: Initial, unset direction.
/// @HB_DIRECTION_LTR: Text is set horizontally from left to right.
/// @HB_DIRECTION_RTL: Text is set horizontally from right to left.
/// @HB_DIRECTION_TTB: Text is set vertically from top to bottom.
/// @HB_DIRECTION_BTT: Text is set vertically from bottom to top.
///
/// The direction of a text segment or buffer.
///
/// A segment can also be tested for horizontal or vertical
/// orientation (irrespective of specific direction) with
/// HB_DIRECTION_IS_HORIZONTAL() or HB_DIRECTION_IS_VERTICAL().
abstract class hb_direction_t {
  static const int HB_DIRECTION_INVALID = 0;
  static const int HB_DIRECTION_LTR = 4;
  static const int HB_DIRECTION_RTL = 5;
  static const int HB_DIRECTION_TTB = 6;
  static const int HB_DIRECTION_BTT = 7;
}

class hb_language_impl_t extends ffi.Opaque {}

/// hb_language_t:
///
/// Data type for languages. Each #hb_language_t corresponds to a BCP 47
/// language tag.
typedef hb_language_t = ffi.Pointer<hb_language_impl_t>;

/// hb_bool_t:
///
/// Data type for booleans.
typedef hb_bool_t = ffi.Int;

/// hb_script_t:
/// @HB_SCRIPT_COMMON: `Zyyy`
/// @HB_SCRIPT_INHERITED: `Zinh`
/// @HB_SCRIPT_UNKNOWN: `Zzzz`
/// @HB_SCRIPT_ARABIC: `Arab`
/// @HB_SCRIPT_ARMENIAN: `Armn`
/// @HB_SCRIPT_BENGALI: `Beng`
/// @HB_SCRIPT_CYRILLIC: `Cyrl`
/// @HB_SCRIPT_DEVANAGARI: `Deva`
/// @HB_SCRIPT_GEORGIAN: `Geor`
/// @HB_SCRIPT_GREEK: `Grek`
/// @HB_SCRIPT_GUJARATI: `Gujr`
/// @HB_SCRIPT_GURMUKHI: `Guru`
/// @HB_SCRIPT_HANGUL: `Hang`
/// @HB_SCRIPT_HAN: `Hani`
/// @HB_SCRIPT_HEBREW: `Hebr`
/// @HB_SCRIPT_HIRAGANA: `Hira`
/// @HB_SCRIPT_KANNADA: `Knda`
/// @HB_SCRIPT_KATAKANA: `Kana`
/// @HB_SCRIPT_LAO: `Laoo`
/// @HB_SCRIPT_LATIN: `Latn`
/// @HB_SCRIPT_MALAYALAM: `Mlym`
/// @HB_SCRIPT_ORIYA: `Orya`
/// @HB_SCRIPT_TAMIL: `Taml`
/// @HB_SCRIPT_TELUGU: `Telu`
/// @HB_SCRIPT_THAI: `Thai`
/// @HB_SCRIPT_TIBETAN: `Tibt`
/// @HB_SCRIPT_BOPOMOFO: `Bopo`
/// @HB_SCRIPT_BRAILLE: `Brai`
/// @HB_SCRIPT_CANADIAN_SYLLABICS: `Cans`
/// @HB_SCRIPT_CHEROKEE: `Cher`
/// @HB_SCRIPT_ETHIOPIC: `Ethi`
/// @HB_SCRIPT_KHMER: `Khmr`
/// @HB_SCRIPT_MONGOLIAN: `Mong`
/// @HB_SCRIPT_MYANMAR: `Mymr`
/// @HB_SCRIPT_OGHAM: `Ogam`
/// @HB_SCRIPT_RUNIC: `Runr`
/// @HB_SCRIPT_SINHALA: `Sinh`
/// @HB_SCRIPT_SYRIAC: `Syrc`
/// @HB_SCRIPT_THAANA: `Thaa`
/// @HB_SCRIPT_YI: `Yiii`
/// @HB_SCRIPT_DESERET: `Dsrt`
/// @HB_SCRIPT_GOTHIC: `Goth`
/// @HB_SCRIPT_OLD_ITALIC: `Ital`
/// @HB_SCRIPT_BUHID: `Buhd`
/// @HB_SCRIPT_HANUNOO: `Hano`
/// @HB_SCRIPT_TAGALOG: `Tglg`
/// @HB_SCRIPT_TAGBANWA: `Tagb`
/// @HB_SCRIPT_CYPRIOT: `Cprt`
/// @HB_SCRIPT_LIMBU: `Limb`
/// @HB_SCRIPT_LINEAR_B: `Linb`
/// @HB_SCRIPT_OSMANYA: `Osma`
/// @HB_SCRIPT_SHAVIAN: `Shaw`
/// @HB_SCRIPT_TAI_LE: `Tale`
/// @HB_SCRIPT_UGARITIC: `Ugar`
/// @HB_SCRIPT_BUGINESE: `Bugi`
/// @HB_SCRIPT_COPTIC: `Copt`
/// @HB_SCRIPT_GLAGOLITIC: `Glag`
/// @HB_SCRIPT_KHAROSHTHI: `Khar`
/// @HB_SCRIPT_NEW_TAI_LUE: `Talu`
/// @HB_SCRIPT_OLD_PERSIAN: `Xpeo`
/// @HB_SCRIPT_SYLOTI_NAGRI: `Sylo`
/// @HB_SCRIPT_TIFINAGH: `Tfng`
/// @HB_SCRIPT_BALINESE: `Bali`
/// @HB_SCRIPT_CUNEIFORM: `Xsux`
/// @HB_SCRIPT_NKO: `Nkoo`
/// @HB_SCRIPT_PHAGS_PA: `Phag`
/// @HB_SCRIPT_PHOENICIAN: `Phnx`
/// @HB_SCRIPT_CARIAN: `Cari`
/// @HB_SCRIPT_CHAM: `Cham`
/// @HB_SCRIPT_KAYAH_LI: `Kali`
/// @HB_SCRIPT_LEPCHA: `Lepc`
/// @HB_SCRIPT_LYCIAN: `Lyci`
/// @HB_SCRIPT_LYDIAN: `Lydi`
/// @HB_SCRIPT_OL_CHIKI: `Olck`
/// @HB_SCRIPT_REJANG: `Rjng`
/// @HB_SCRIPT_SAURASHTRA: `Saur`
/// @HB_SCRIPT_SUNDANESE: `Sund`
/// @HB_SCRIPT_VAI: `Vaii`
/// @HB_SCRIPT_AVESTAN: `Avst`
/// @HB_SCRIPT_BAMUM: `Bamu`
/// @HB_SCRIPT_EGYPTIAN_HIEROGLYPHS: `Egyp`
/// @HB_SCRIPT_IMPERIAL_ARAMAIC: `Armi`
/// @HB_SCRIPT_INSCRIPTIONAL_PAHLAVI: `Phli`
/// @HB_SCRIPT_INSCRIPTIONAL_PARTHIAN: `Prti`
/// @HB_SCRIPT_JAVANESE: `Java`
/// @HB_SCRIPT_KAITHI: `Kthi`
/// @HB_SCRIPT_LISU: `Lisu`
/// @HB_SCRIPT_MEETEI_MAYEK: `Mtei`
/// @HB_SCRIPT_OLD_SOUTH_ARABIAN: `Sarb`
/// @HB_SCRIPT_OLD_TURKIC: `Orkh`
/// @HB_SCRIPT_SAMARITAN: `Samr`
/// @HB_SCRIPT_TAI_THAM: `Lana`
/// @HB_SCRIPT_TAI_VIET: `Tavt`
/// @HB_SCRIPT_BATAK: `Batk`
/// @HB_SCRIPT_BRAHMI: `Brah`
/// @HB_SCRIPT_MANDAIC: `Mand`
/// @HB_SCRIPT_CHAKMA: `Cakm`
/// @HB_SCRIPT_MEROITIC_CURSIVE: `Merc`
/// @HB_SCRIPT_MEROITIC_HIEROGLYPHS: `Mero`
/// @HB_SCRIPT_MIAO: `Plrd`
/// @HB_SCRIPT_SHARADA: `Shrd`
/// @HB_SCRIPT_SORA_SOMPENG: `Sora`
/// @HB_SCRIPT_TAKRI: `Takr`
/// @HB_SCRIPT_BASSA_VAH: `Bass`, Since: 0.9.30
/// @HB_SCRIPT_CAUCASIAN_ALBANIAN: `Aghb`, Since: 0.9.30
/// @HB_SCRIPT_DUPLOYAN: `Dupl`, Since: 0.9.30
/// @HB_SCRIPT_ELBASAN: `Elba`, Since: 0.9.30
/// @HB_SCRIPT_GRANTHA: `Gran`, Since: 0.9.30
/// @HB_SCRIPT_KHOJKI: `Khoj`, Since: 0.9.30
/// @HB_SCRIPT_KHUDAWADI: `Sind`, Since: 0.9.30
/// @HB_SCRIPT_LINEAR_A: `Lina`, Since: 0.9.30
/// @HB_SCRIPT_MAHAJANI: `Mahj`, Since: 0.9.30
/// @HB_SCRIPT_MANICHAEAN: `Mani`, Since: 0.9.30
/// @HB_SCRIPT_MENDE_KIKAKUI: `Mend`, Since: 0.9.30
/// @HB_SCRIPT_MODI: `Modi`, Since: 0.9.30
/// @HB_SCRIPT_MRO: `Mroo`, Since: 0.9.30
/// @HB_SCRIPT_NABATAEAN: `Nbat`, Since: 0.9.30
/// @HB_SCRIPT_OLD_NORTH_ARABIAN: `Narb`, Since: 0.9.30
/// @HB_SCRIPT_OLD_PERMIC: `Perm`, Since: 0.9.30
/// @HB_SCRIPT_PAHAWH_HMONG: `Hmng`, Since: 0.9.30
/// @HB_SCRIPT_PALMYRENE: `Palm`, Since: 0.9.30
/// @HB_SCRIPT_PAU_CIN_HAU: `Pauc`, Since: 0.9.30
/// @HB_SCRIPT_PSALTER_PAHLAVI: `Phlp`, Since: 0.9.30
/// @HB_SCRIPT_SIDDHAM: `Sidd`, Since: 0.9.30
/// @HB_SCRIPT_TIRHUTA: `Tirh`, Since: 0.9.30
/// @HB_SCRIPT_WARANG_CITI: `Wara`, Since: 0.9.30
/// @HB_SCRIPT_AHOM: `Ahom`, Since: 0.9.30
/// @HB_SCRIPT_ANATOLIAN_HIEROGLYPHS: `Hluw`, Since: 0.9.30
/// @HB_SCRIPT_HATRAN: `Hatr`, Since: 0.9.30
/// @HB_SCRIPT_MULTANI: `Mult`, Since: 0.9.30
/// @HB_SCRIPT_OLD_HUNGARIAN: `Hung`, Since: 0.9.30
/// @HB_SCRIPT_SIGNWRITING: `Sgnw`, Since: 0.9.30
/// @HB_SCRIPT_ADLAM: `Adlm`, Since: 1.3.0
/// @HB_SCRIPT_BHAIKSUKI: `Bhks`, Since: 1.3.0
/// @HB_SCRIPT_MARCHEN: `Marc`, Since: 1.3.0
/// @HB_SCRIPT_OSAGE: `Osge`, Since: 1.3.0
/// @HB_SCRIPT_TANGUT: `Tang`, Since: 1.3.0
/// @HB_SCRIPT_NEWA: `Newa`, Since: 1.3.0
/// @HB_SCRIPT_MASARAM_GONDI: `Gonm`, Since: 1.6.0
/// @HB_SCRIPT_NUSHU: `Nshu`, Since: 1.6.0
/// @HB_SCRIPT_SOYOMBO: `Soyo`, Since: 1.6.0
/// @HB_SCRIPT_ZANABAZAR_SQUARE: `Zanb`, Since: 1.6.0
/// @HB_SCRIPT_DOGRA: `Dogr`, Since: 1.8.0
/// @HB_SCRIPT_GUNJALA_GONDI: `Gong`, Since: 1.8.0
/// @HB_SCRIPT_HANIFI_ROHINGYA: `Rohg`, Since: 1.8.0
/// @HB_SCRIPT_MAKASAR: `Maka`, Since: 1.8.0
/// @HB_SCRIPT_MEDEFAIDRIN: `Medf`, Since: 1.8.0
/// @HB_SCRIPT_OLD_SOGDIAN: `Sogo`, Since: 1.8.0
/// @HB_SCRIPT_SOGDIAN: `Sogd`, Since: 1.8.0
/// @HB_SCRIPT_ELYMAIC: `Elym`, Since: 2.4.0
/// @HB_SCRIPT_NANDINAGARI: `Nand`, Since: 2.4.0
/// @HB_SCRIPT_NYIAKENG_PUACHUE_HMONG: `Hmnp`, Since: 2.4.0
/// @HB_SCRIPT_WANCHO: `Wcho`, Since: 2.4.0
/// @HB_SCRIPT_CHORASMIAN: `Chrs`, Since: 2.6.7
/// @HB_SCRIPT_DIVES_AKURU: `Diak`, Since: 2.6.7
/// @HB_SCRIPT_KHITAN_SMALL_SCRIPT: `Kits`, Since: 2.6.7
/// @HB_SCRIPT_YEZIDI: `Yezi`, Since: 2.6.7
/// @HB_SCRIPT_CYPRO_MINOAN: `Cpmn`, Since: 3.0.0
/// @HB_SCRIPT_OLD_UYGHUR: `Ougr`, Since: 3.0.0
/// @HB_SCRIPT_TANGSA: `Tnsa`, Since: 3.0.0
/// @HB_SCRIPT_TOTO: `Toto`, Since: 3.0.0
/// @HB_SCRIPT_VITHKUQI: `Vith`, Since: 3.0.0
/// @HB_SCRIPT_MATH: `Zmth`, Since: 3.4.0
/// @HB_SCRIPT_KAWI: `Kawi`, Since: 5.2.0
/// @HB_SCRIPT_NAG_MUNDARI: `Nagm`, Since: 5.2.0
/// @HB_SCRIPT_INVALID: No script set
///
/// Data type for scripts. Each #hb_script_t's value is an #hb_tag_t corresponding
/// to the four-letter values defined by [ISO 15924](https://unicode.org/iso15924/).
///
/// See also the Script (sc) property of the Unicode Character Database.
abstract class hb_script_t {
  static const int HB_SCRIPT_COMMON = 1517910393;
  static const int HB_SCRIPT_INHERITED = 1516858984;
  static const int HB_SCRIPT_UNKNOWN = 1517976186;
  static const int HB_SCRIPT_ARABIC = 1098015074;
  static const int HB_SCRIPT_ARMENIAN = 1098018158;
  static const int HB_SCRIPT_BENGALI = 1113943655;
  static const int HB_SCRIPT_CYRILLIC = 1132032620;
  static const int HB_SCRIPT_DEVANAGARI = 1147500129;
  static const int HB_SCRIPT_GEORGIAN = 1197830002;
  static const int HB_SCRIPT_GREEK = 1198679403;
  static const int HB_SCRIPT_GUJARATI = 1198877298;
  static const int HB_SCRIPT_GURMUKHI = 1198879349;
  static const int HB_SCRIPT_HANGUL = 1214344807;
  static const int HB_SCRIPT_HAN = 1214344809;
  static const int HB_SCRIPT_HEBREW = 1214603890;
  static const int HB_SCRIPT_HIRAGANA = 1214870113;
  static const int HB_SCRIPT_KANNADA = 1265525857;
  static const int HB_SCRIPT_KATAKANA = 1264676449;
  static const int HB_SCRIPT_LAO = 1281453935;
  static const int HB_SCRIPT_LATIN = 1281455214;
  static const int HB_SCRIPT_MALAYALAM = 1298954605;
  static const int HB_SCRIPT_ORIYA = 1332902241;
  static const int HB_SCRIPT_TAMIL = 1415671148;
  static const int HB_SCRIPT_TELUGU = 1415933045;
  static const int HB_SCRIPT_THAI = 1416126825;
  static const int HB_SCRIPT_TIBETAN = 1416192628;
  static const int HB_SCRIPT_BOPOMOFO = 1114599535;
  static const int HB_SCRIPT_BRAILLE = 1114792297;
  static const int HB_SCRIPT_CANADIAN_SYLLABICS = 1130458739;
  static const int HB_SCRIPT_CHEROKEE = 1130915186;
  static const int HB_SCRIPT_ETHIOPIC = 1165256809;
  static const int HB_SCRIPT_KHMER = 1265134962;
  static const int HB_SCRIPT_MONGOLIAN = 1299148391;
  static const int HB_SCRIPT_MYANMAR = 1299803506;
  static const int HB_SCRIPT_OGHAM = 1332175213;
  static const int HB_SCRIPT_RUNIC = 1383427698;
  static const int HB_SCRIPT_SINHALA = 1399418472;
  static const int HB_SCRIPT_SYRIAC = 1400468067;
  static const int HB_SCRIPT_THAANA = 1416126817;
  static const int HB_SCRIPT_YI = 1500080489;
  static const int HB_SCRIPT_DESERET = 1148416628;
  static const int HB_SCRIPT_GOTHIC = 1198486632;
  static const int HB_SCRIPT_OLD_ITALIC = 1232363884;
  static const int HB_SCRIPT_BUHID = 1114990692;
  static const int HB_SCRIPT_HANUNOO = 1214344815;
  static const int HB_SCRIPT_TAGALOG = 1416064103;
  static const int HB_SCRIPT_TAGBANWA = 1415669602;
  static const int HB_SCRIPT_CYPRIOT = 1131442804;
  static const int HB_SCRIPT_LIMBU = 1281977698;
  static const int HB_SCRIPT_LINEAR_B = 1281977954;
  static const int HB_SCRIPT_OSMANYA = 1332964705;
  static const int HB_SCRIPT_SHAVIAN = 1399349623;
  static const int HB_SCRIPT_TAI_LE = 1415670885;
  static const int HB_SCRIPT_UGARITIC = 1432838514;
  static const int HB_SCRIPT_BUGINESE = 1114990441;
  static const int HB_SCRIPT_COPTIC = 1131376756;
  static const int HB_SCRIPT_GLAGOLITIC = 1198285159;
  static const int HB_SCRIPT_KHAROSHTHI = 1265131890;
  static const int HB_SCRIPT_NEW_TAI_LUE = 1415670901;
  static const int HB_SCRIPT_OLD_PERSIAN = 1483761007;
  static const int HB_SCRIPT_SYLOTI_NAGRI = 1400466543;
  static const int HB_SCRIPT_TIFINAGH = 1415999079;
  static const int HB_SCRIPT_BALINESE = 1113681001;
  static const int HB_SCRIPT_CUNEIFORM = 1483961720;
  static const int HB_SCRIPT_NKO = 1315663727;
  static const int HB_SCRIPT_PHAGS_PA = 1349017959;
  static const int HB_SCRIPT_PHOENICIAN = 1349021304;
  static const int HB_SCRIPT_CARIAN = 1130459753;
  static const int HB_SCRIPT_CHAM = 1130914157;
  static const int HB_SCRIPT_KAYAH_LI = 1264675945;
  static const int HB_SCRIPT_LEPCHA = 1281716323;
  static const int HB_SCRIPT_LYCIAN = 1283023721;
  static const int HB_SCRIPT_LYDIAN = 1283023977;
  static const int HB_SCRIPT_OL_CHIKI = 1332503403;
  static const int HB_SCRIPT_REJANG = 1382706791;
  static const int HB_SCRIPT_SAURASHTRA = 1398895986;
  static const int HB_SCRIPT_SUNDANESE = 1400204900;
  static const int HB_SCRIPT_VAI = 1449224553;
  static const int HB_SCRIPT_AVESTAN = 1098281844;
  static const int HB_SCRIPT_BAMUM = 1113681269;
  static const int HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = 1164409200;
  static const int HB_SCRIPT_IMPERIAL_ARAMAIC = 1098018153;
  static const int HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = 1349020777;
  static const int HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = 1349678185;
  static const int HB_SCRIPT_JAVANESE = 1247901281;
  static const int HB_SCRIPT_KAITHI = 1265920105;
  static const int HB_SCRIPT_LISU = 1281979253;
  static const int HB_SCRIPT_MEETEI_MAYEK = 1299473769;
  static const int HB_SCRIPT_OLD_SOUTH_ARABIAN = 1398895202;
  static const int HB_SCRIPT_OLD_TURKIC = 1332898664;
  static const int HB_SCRIPT_SAMARITAN = 1398893938;
  static const int HB_SCRIPT_TAI_THAM = 1281453665;
  static const int HB_SCRIPT_TAI_VIET = 1415673460;
  static const int HB_SCRIPT_BATAK = 1113683051;
  static const int HB_SCRIPT_BRAHMI = 1114792296;
  static const int HB_SCRIPT_MANDAIC = 1298230884;
  static const int HB_SCRIPT_CHAKMA = 1130457965;
  static const int HB_SCRIPT_MEROITIC_CURSIVE = 1298494051;
  static const int HB_SCRIPT_MEROITIC_HIEROGLYPHS = 1298494063;
  static const int HB_SCRIPT_MIAO = 1349284452;
  static const int HB_SCRIPT_SHARADA = 1399353956;
  static const int HB_SCRIPT_SORA_SOMPENG = 1399812705;
  static const int HB_SCRIPT_TAKRI = 1415670642;
  static const int HB_SCRIPT_BASSA_VAH = 1113682803;
  static const int HB_SCRIPT_CAUCASIAN_ALBANIAN = 1097295970;
  static const int HB_SCRIPT_DUPLOYAN = 1148547180;
  static const int HB_SCRIPT_ELBASAN = 1164730977;
  static const int HB_SCRIPT_GRANTHA = 1198678382;
  static const int HB_SCRIPT_KHOJKI = 1265135466;
  static const int HB_SCRIPT_KHUDAWADI = 1399418468;
  static const int HB_SCRIPT_LINEAR_A = 1281977953;
  static const int HB_SCRIPT_MAHAJANI = 1298229354;
  static const int HB_SCRIPT_MANICHAEAN = 1298230889;
  static const int HB_SCRIPT_MENDE_KIKAKUI = 1298493028;
  static const int HB_SCRIPT_MODI = 1299145833;
  static const int HB_SCRIPT_MRO = 1299345263;
  static const int HB_SCRIPT_NABATAEAN = 1315070324;
  static const int HB_SCRIPT_OLD_NORTH_ARABIAN = 1315009122;
  static const int HB_SCRIPT_OLD_PERMIC = 1348825709;
  static const int HB_SCRIPT_PAHAWH_HMONG = 1215131239;
  static const int HB_SCRIPT_PALMYRENE = 1348562029;
  static const int HB_SCRIPT_PAU_CIN_HAU = 1348564323;
  static const int HB_SCRIPT_PSALTER_PAHLAVI = 1349020784;
  static const int HB_SCRIPT_SIDDHAM = 1399415908;
  static const int HB_SCRIPT_TIRHUTA = 1416196712;
  static const int HB_SCRIPT_WARANG_CITI = 1466004065;
  static const int HB_SCRIPT_AHOM = 1097363309;
  static const int HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = 1215067511;
  static const int HB_SCRIPT_HATRAN = 1214346354;
  static const int HB_SCRIPT_MULTANI = 1299541108;
  static const int HB_SCRIPT_OLD_HUNGARIAN = 1215655527;
  static const int HB_SCRIPT_SIGNWRITING = 1399287415;
  static const int HB_SCRIPT_ADLAM = 1097100397;
  static const int HB_SCRIPT_BHAIKSUKI = 1114139507;
  static const int HB_SCRIPT_MARCHEN = 1298231907;
  static const int HB_SCRIPT_OSAGE = 1332963173;
  static const int HB_SCRIPT_TANGUT = 1415671399;
  static const int HB_SCRIPT_NEWA = 1315272545;
  static const int HB_SCRIPT_MASARAM_GONDI = 1198485101;
  static const int HB_SCRIPT_NUSHU = 1316186229;
  static const int HB_SCRIPT_SOYOMBO = 1399814511;
  static const int HB_SCRIPT_ZANABAZAR_SQUARE = 1516334690;
  static const int HB_SCRIPT_DOGRA = 1148151666;
  static const int HB_SCRIPT_GUNJALA_GONDI = 1198485095;
  static const int HB_SCRIPT_HANIFI_ROHINGYA = 1383032935;
  static const int HB_SCRIPT_MAKASAR = 1298230113;
  static const int HB_SCRIPT_MEDEFAIDRIN = 1298490470;
  static const int HB_SCRIPT_OLD_SOGDIAN = 1399809903;
  static const int HB_SCRIPT_SOGDIAN = 1399809892;
  static const int HB_SCRIPT_ELYMAIC = 1164736877;
  static const int HB_SCRIPT_NANDINAGARI = 1315008100;
  static const int HB_SCRIPT_NYIAKENG_PUACHUE_HMONG = 1215131248;
  static const int HB_SCRIPT_WANCHO = 1466132591;
  static const int HB_SCRIPT_CHORASMIAN = 1130918515;
  static const int HB_SCRIPT_DIVES_AKURU = 1147756907;
  static const int HB_SCRIPT_KHITAN_SMALL_SCRIPT = 1265202291;
  static const int HB_SCRIPT_YEZIDI = 1499822697;
  static const int HB_SCRIPT_CYPRO_MINOAN = 1131441518;
  static const int HB_SCRIPT_OLD_UYGHUR = 1333094258;
  static const int HB_SCRIPT_TANGSA = 1416524641;
  static const int HB_SCRIPT_TOTO = 1416590447;
  static const int HB_SCRIPT_VITHKUQI = 1449751656;
  static const int HB_SCRIPT_MATH = 1517122664;
  static const int HB_SCRIPT_KAWI = 1264678761;
  static const int HB_SCRIPT_NAG_MUNDARI = 1315006317;
  static const int HB_SCRIPT_INVALID = 0;
  static const int _HB_SCRIPT_MAX_VALUE = 2147483647;
  static const int _HB_SCRIPT_MAX_VALUE_SIGNED = 2147483647;
}

/// hb_user_data_key_t:
///
/// Data structure for holding user-data keys.
class hb_user_data_key_t extends ffi.Struct {
  @ffi.Char()
  external int unused;
}

/// hb_feature_t:
/// @tag: The #hb_tag_t tag of the feature
/// @value: The value of the feature. 0 disables the feature, non-zero (usually
/// 1) enables the feature.  For features implemented as lookup type 3 (like
/// 'salt') the @value is a one based index into the alternates.
/// @start: the cluster to start applying this feature setting (inclusive).
/// @end: the cluster to end applying this feature setting (exclusive).
///
/// The #hb_feature_t is the structure that holds information about requested
/// feature application. The feature will be applied with the given value to all
/// glyphs which are in clusters between @start (inclusive) and @end (exclusive).
/// Setting start to #HB_FEATURE_GLOBAL_START and end to #HB_FEATURE_GLOBAL_END
/// specifies that the feature always applies to the entire buffer.
class hb_feature_t extends ffi.Struct {
  @hb_tag_t()
  external int tag;

  @ffi.Uint32()
  external int value;

  @ffi.UnsignedInt()
  external int start;

  @ffi.UnsignedInt()
  external int end;
}

/// hb_variation_t:
/// @tag: The #hb_tag_t tag of the variation-axis name
/// @value: The value of the variation axis
///
/// Data type for holding variation data. Registered OpenType
/// variation-axis tags are listed in
/// [OpenType Axis Tag Registry](https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg).
///
/// Since: 1.4.2
class hb_variation_t extends ffi.Struct {
  @hb_tag_t()
  external int tag;

  @ffi.Float()
  external double value;
}

/// hb_color_t:
///
/// Data type for holding color values. Colors are eight bits per
/// channel RGB plus alpha transparency.
///
/// Since: 2.1.0
typedef hb_color_t = ffi.Uint32;

/// hb_memory_mode_t:
/// @HB_MEMORY_MODE_DUPLICATE: HarfBuzz immediately makes a copy of the data.
/// @HB_MEMORY_MODE_READONLY: HarfBuzz client will never modify the data,
/// and HarfBuzz will never modify the data.
/// @HB_MEMORY_MODE_WRITABLE: HarfBuzz client made a copy of the data solely
/// for HarfBuzz, so HarfBuzz may modify the data.
/// @HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE: See above
///
/// Data type holding the memory modes available to
/// client programs.
///
/// Regarding these various memory-modes:
///
/// - In no case shall the HarfBuzz client modify memory
/// that is passed to HarfBuzz in a blob.  If there is
/// any such possibility, @HB_MEMORY_MODE_DUPLICATE should be used
/// such that HarfBuzz makes a copy immediately,
///
/// - Use @HB_MEMORY_MODE_READONLY otherwise, unless you really really
/// really know what you are doing,
///
/// - @HB_MEMORY_MODE_WRITABLE is appropriate if you really made a
/// copy of data solely for the purpose of passing to
/// HarfBuzz and doing that just once (no reuse!),
///
/// - If the font is mmap()ed, it's okay to use
/// @HB_MEMORY_READONLY_MAY_MAKE_WRITABLE, however, using that mode
/// correctly is very tricky.  Use @HB_MEMORY_MODE_READONLY instead.
abstract class hb_memory_mode_t {
  static const int HB_MEMORY_MODE_DUPLICATE = 0;
  static const int HB_MEMORY_MODE_READONLY = 1;
  static const int HB_MEMORY_MODE_WRITABLE = 2;
  static const int HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3;
}

class hb_blob_t extends ffi.Opaque {}

/// hb_destroy_func_t:
/// @user_data: the data to be destroyed
///
/// A virtual method for destroy user-data callbacks.
typedef hb_destroy_func_t = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

/// hb_unicode_general_category_t:
/// @HB_UNICODE_GENERAL_CATEGORY_CONTROL:              [Cc]
/// @HB_UNICODE_GENERAL_CATEGORY_FORMAT:		      [Cf]
/// @HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED:	      [Cn]
/// @HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE:	      [Co]
/// @HB_UNICODE_GENERAL_CATEGORY_SURROGATE:	      [Cs]
/// @HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER:     [Ll]
/// @HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER:      [Lm]
/// @HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER:	      [Lo]
/// @HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER:     [Lt]
/// @HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER:     [Lu]
/// @HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK:	      [Mc]
/// @HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK:	      [Me]
/// @HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK:     [Mn]
/// @HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER:	      [Nd]
/// @HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER:	      [Nl]
/// @HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER:	      [No]
/// @HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION:  [Pc]
/// @HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION:     [Pd]
/// @HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION:    [Pe]
/// @HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION:    [Pf]
/// @HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION:  [Pi]
/// @HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION:    [Po]
/// @HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION:     [Ps]
/// @HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL:      [Sc]
/// @HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL:      [Sk]
/// @HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL:	      [Sm]
/// @HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL:	      [So]
/// @HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR:	      [Zl]
/// @HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR:  [Zp]
/// @HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR:      [Zs]
///
/// Data type for the "General_Category" (gc) property from
/// the Unicode Character Database.
abstract class hb_unicode_general_category_t {
  static const int HB_UNICODE_GENERAL_CATEGORY_CONTROL = 0;
  static const int HB_UNICODE_GENERAL_CATEGORY_FORMAT = 1;
  static const int HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED = 2;
  static const int HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE = 3;
  static const int HB_UNICODE_GENERAL_CATEGORY_SURROGATE = 4;
  static const int HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER = 5;
  static const int HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER = 6;
  static const int HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER = 7;
  static const int HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER = 8;
  static const int HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER = 9;
  static const int HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK = 10;
  static const int HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK = 11;
  static const int HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK = 12;
  static const int HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER = 13;
  static const int HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER = 14;
  static const int HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER = 15;
  static const int HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION = 16;
  static const int HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION = 17;
  static const int HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION = 18;
  static const int HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION = 19;
  static const int HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION = 20;
  static const int HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION = 21;
  static const int HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION = 22;
  static const int HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL = 23;
  static const int HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL = 24;
  static const int HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL = 25;
  static const int HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL = 26;
  static const int HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR = 27;
  static const int HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR = 28;
  static const int HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR = 29;
}

/// hb_unicode_combining_class_t:
/// @HB_UNICODE_COMBINING_CLASS_NOT_REORDERED: Spacing and enclosing marks; also many vowel and consonant signs, even if nonspacing
/// @HB_UNICODE_COMBINING_CLASS_OVERLAY: Marks which overlay a base letter or symbol
/// @HB_UNICODE_COMBINING_CLASS_NUKTA: Diacritic nukta marks in Brahmi-derived scripts
/// @HB_UNICODE_COMBINING_CLASS_KANA_VOICING: Hiragana/Katakana voicing marks
/// @HB_UNICODE_COMBINING_CLASS_VIRAMA: Viramas
/// @HB_UNICODE_COMBINING_CLASS_CCC10: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC11: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC12: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC13: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC14: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC15: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC16: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC17: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC18: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC19: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC20: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC21: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC22: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC23: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC24: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC25: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC26: [Hebrew]
/// @HB_UNICODE_COMBINING_CLASS_CCC27: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC28: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC29: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC30: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC31: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC32: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC33: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC34: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC35: [Arabic]
/// @HB_UNICODE_COMBINING_CLASS_CCC36: [Syriac]
/// @HB_UNICODE_COMBINING_CLASS_CCC84: [Telugu]
/// @HB_UNICODE_COMBINING_CLASS_CCC91: [Telugu]
/// @HB_UNICODE_COMBINING_CLASS_CCC103: [Thai]
/// @HB_UNICODE_COMBINING_CLASS_CCC107: [Thai]
/// @HB_UNICODE_COMBINING_CLASS_CCC118: [Lao]
/// @HB_UNICODE_COMBINING_CLASS_CCC122: [Lao]
/// @HB_UNICODE_COMBINING_CLASS_CCC129: [Tibetan]
/// @HB_UNICODE_COMBINING_CLASS_CCC130: [Tibetan]
/// @HB_UNICODE_COMBINING_CLASS_CCC133: [Tibetan]
/// @HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT: Marks attached at the bottom left
/// @HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW: Marks attached directly below
/// @HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE: Marks attached directly above
/// @HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT: Marks attached at the top right
/// @HB_UNICODE_COMBINING_CLASS_BELOW_LEFT: Distinct marks at the bottom left
/// @HB_UNICODE_COMBINING_CLASS_BELOW: Distinct marks directly below
/// @HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT: Distinct marks at the bottom right
/// @HB_UNICODE_COMBINING_CLASS_LEFT: Distinct marks to the left
/// @HB_UNICODE_COMBINING_CLASS_RIGHT: Distinct marks to the right
/// @HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT: Distinct marks at the top left
/// @HB_UNICODE_COMBINING_CLASS_ABOVE: Distinct marks directly above
/// @HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT: Distinct marks at the top right
/// @HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW: Distinct marks subtending two bases
/// @HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE: Distinct marks extending above two bases
/// @HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT: Greek iota subscript only
/// @HB_UNICODE_COMBINING_CLASS_INVALID: Invalid combining class
///
/// Data type for the Canonical_Combining_Class (ccc) property
/// from the Unicode Character Database.
///
/// <note>Note: newer versions of Unicode may add new values.
/// Client programs should be ready to handle any value in the 0..254 range
/// being returned from hb_unicode_combining_class().</note>
abstract class hb_unicode_combining_class_t {
  static const int HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0;
  static const int HB_UNICODE_COMBINING_CLASS_OVERLAY = 1;
  static const int HB_UNICODE_COMBINING_CLASS_NUKTA = 7;
  static const int HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8;
  static const int HB_UNICODE_COMBINING_CLASS_VIRAMA = 9;
  static const int HB_UNICODE_COMBINING_CLASS_CCC10 = 10;
  static const int HB_UNICODE_COMBINING_CLASS_CCC11 = 11;
  static const int HB_UNICODE_COMBINING_CLASS_CCC12 = 12;
  static const int HB_UNICODE_COMBINING_CLASS_CCC13 = 13;
  static const int HB_UNICODE_COMBINING_CLASS_CCC14 = 14;
  static const int HB_UNICODE_COMBINING_CLASS_CCC15 = 15;
  static const int HB_UNICODE_COMBINING_CLASS_CCC16 = 16;
  static const int HB_UNICODE_COMBINING_CLASS_CCC17 = 17;
  static const int HB_UNICODE_COMBINING_CLASS_CCC18 = 18;
  static const int HB_UNICODE_COMBINING_CLASS_CCC19 = 19;
  static const int HB_UNICODE_COMBINING_CLASS_CCC20 = 20;
  static const int HB_UNICODE_COMBINING_CLASS_CCC21 = 21;
  static const int HB_UNICODE_COMBINING_CLASS_CCC22 = 22;
  static const int HB_UNICODE_COMBINING_CLASS_CCC23 = 23;
  static const int HB_UNICODE_COMBINING_CLASS_CCC24 = 24;
  static const int HB_UNICODE_COMBINING_CLASS_CCC25 = 25;
  static const int HB_UNICODE_COMBINING_CLASS_CCC26 = 26;
  static const int HB_UNICODE_COMBINING_CLASS_CCC27 = 27;
  static const int HB_UNICODE_COMBINING_CLASS_CCC28 = 28;
  static const int HB_UNICODE_COMBINING_CLASS_CCC29 = 29;
  static const int HB_UNICODE_COMBINING_CLASS_CCC30 = 30;
  static const int HB_UNICODE_COMBINING_CLASS_CCC31 = 31;
  static const int HB_UNICODE_COMBINING_CLASS_CCC32 = 32;
  static const int HB_UNICODE_COMBINING_CLASS_CCC33 = 33;
  static const int HB_UNICODE_COMBINING_CLASS_CCC34 = 34;
  static const int HB_UNICODE_COMBINING_CLASS_CCC35 = 35;
  static const int HB_UNICODE_COMBINING_CLASS_CCC36 = 36;
  static const int HB_UNICODE_COMBINING_CLASS_CCC84 = 84;
  static const int HB_UNICODE_COMBINING_CLASS_CCC91 = 91;
  static const int HB_UNICODE_COMBINING_CLASS_CCC103 = 103;
  static const int HB_UNICODE_COMBINING_CLASS_CCC107 = 107;
  static const int HB_UNICODE_COMBINING_CLASS_CCC118 = 118;
  static const int HB_UNICODE_COMBINING_CLASS_CCC122 = 122;
  static const int HB_UNICODE_COMBINING_CLASS_CCC129 = 129;
  static const int HB_UNICODE_COMBINING_CLASS_CCC130 = 130;
  static const int HB_UNICODE_COMBINING_CLASS_CCC133 = 132;
  static const int HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200;
  static const int HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202;
  static const int HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214;
  static const int HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216;
  static const int HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218;
  static const int HB_UNICODE_COMBINING_CLASS_BELOW = 220;
  static const int HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222;
  static const int HB_UNICODE_COMBINING_CLASS_LEFT = 224;
  static const int HB_UNICODE_COMBINING_CLASS_RIGHT = 226;
  static const int HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228;
  static const int HB_UNICODE_COMBINING_CLASS_ABOVE = 230;
  static const int HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232;
  static const int HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233;
  static const int HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234;
  static const int HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240;
  static const int HB_UNICODE_COMBINING_CLASS_INVALID = 255;
}

class hb_unicode_funcs_t extends ffi.Opaque {}

/// hb_unicode_combining_class_func_t:
/// @ufuncs: A Unicode-functions structure
/// @unicode: The code point to query
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_unicode_funcs_t structure.
///
/// This method should retrieve the Canonical Combining Class (ccc)
/// property for a specified Unicode code point.
///
/// Return value: The #hb_unicode_combining_class_t of @unicode
typedef hb_unicode_combining_class_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<ffi.Void>)>>;

/// hb_codepoint_t:
///
/// Data type for holding Unicode codepoints. Also
/// used to hold glyph IDs.
typedef hb_codepoint_t = ffi.Uint32;

/// hb_unicode_general_category_func_t:
/// @ufuncs: A Unicode-functions structure
/// @unicode: The code point to query
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_unicode_funcs_t structure.
///
/// This method should retrieve the General Category property for
/// a specified Unicode code point.
///
/// Return value: The #hb_unicode_general_category_t of @unicode
typedef hb_unicode_general_category_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<ffi.Void>)>>;

/// hb_unicode_mirroring_func_t:
/// @ufuncs: A Unicode-functions structure
/// @unicode: The code point to query
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_unicode_funcs_t structure.
///
/// This method should retrieve the Bi-Directional Mirroring Glyph
/// code point for a specified Unicode code point.
///
/// <note>Note: If a code point does not have a specified
/// Bi-Directional Mirroring Glyph defined, the method should
/// return the original code point.</note>
///
/// Return value: The #hb_codepoint_t of the Mirroring Glyph for @unicode
typedef hb_unicode_mirroring_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_codepoint_t Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<ffi.Void>)>>;

/// hb_unicode_script_func_t:
/// @ufuncs: A Unicode-functions structure
/// @unicode: The code point to query
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_unicode_funcs_t structure.
///
/// This method should retrieve the Script property for a
/// specified Unicode code point.
///
/// Return value: The #hb_script_t of @unicode
typedef hb_unicode_script_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<ffi.Void>)>>;

/// hb_unicode_compose_func_t:
/// @ufuncs: A Unicode-functions structure
/// @a: The first code point to compose
/// @b: The second code point to compose
/// @ab: (out): The composed code point
/// @user_data: user data pointer passed by the caller
///
/// A virtual method for the #hb_unicode_funcs_t structure.
///
/// This method should compose a sequence of two input Unicode code
/// points by canonical equivalence, returning the composed code
/// point in a #hb_codepoint_t output parameter (if successful).
/// The method must return an #hb_bool_t indicating the success
/// of the composition.
///
/// Return value: `true` is @a,@b composed, `false` otherwise
typedef hb_unicode_compose_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, hb_codepoint_t, ffi.Pointer<hb_codepoint_t>,
            ffi.Pointer<ffi.Void>)>>;

/// hb_unicode_decompose_func_t:
/// @ufuncs: A Unicode-functions structure
/// @ab: The code point to decompose
/// @a: (out): The first decomposed code point
/// @b: (out): The second decomposed code point
/// @user_data: user data pointer passed by the caller
///
/// A virtual method for the #hb_unicode_funcs_t structure.
///
/// This method should decompose an input Unicode code point,
/// returning the two decomposed code points in #hb_codepoint_t
/// output parameters (if successful). The method must return an
/// #hb_bool_t indicating the success of the composition.
///
/// Return value: `true` if @ab decomposed, `false` otherwise
typedef hb_unicode_decompose_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<hb_codepoint_t>,
            ffi.Pointer<hb_codepoint_t>, ffi.Pointer<ffi.Void>)>>;

class hb_set_t extends ffi.Opaque {}

class hb_face_t extends ffi.Opaque {}

/// hb_reference_table_func_t:
/// @face: an #hb_face_t to reference table for
/// @tag: the tag of the table to reference
/// @user_data: User data pointer passed by the caller
///
/// Callback function for hb_face_create_for_tables().
///
/// Return value: (transfer full): A pointer to the @tag table within @face
///
/// Since: 0.9.2
typedef hb_reference_table_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<hb_blob_t> Function(ffi.Pointer<hb_face_t>, hb_tag_t, ffi.Pointer<ffi.Void>)>>;

/// hb_draw_state_t
/// @path_open: Whether there is an open path
/// @path_start_x: X component of the start of current path
/// @path_start_y: Y component of the start of current path
/// @current_x: X component of current point
/// @current_y: Y component of current point
///
/// Current drawing state.
///
/// Since: 4.0.0
class hb_draw_state_t extends ffi.Struct {
  @hb_bool_t()
  external int path_open;

  @ffi.Float()
  external double path_start_x;

  @ffi.Float()
  external double path_start_y;

  @ffi.Float()
  external double current_x;

  @ffi.Float()
  external double current_y;

  external hb_var_num_t reserved1;

  external hb_var_num_t reserved2;

  external hb_var_num_t reserved3;

  external hb_var_num_t reserved4;

  external hb_var_num_t reserved5;

  external hb_var_num_t reserved6;

  external hb_var_num_t reserved7;
}

typedef hb_var_num_t = _hb_var_num_t;

class hb_draw_funcs_t extends ffi.Opaque {}

/// hb_draw_move_to_func_t:
/// @dfuncs: draw functions object
/// @draw_data: The data accompanying the draw functions
/// @st: current draw state
/// @to_x: X component of target point
/// @to_y: Y component of target point
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_draw_funcs_t to perform a "move-to" draw
/// operation.
///
/// Since: 4.0.0
typedef hb_draw_move_to_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, ffi.Float,
            ffi.Float, ffi.Pointer<ffi.Void>)>>;

/// hb_draw_line_to_func_t:
/// @dfuncs: draw functions object
/// @draw_data: The data accompanying the draw functions
/// @st: current draw state
/// @to_x: X component of target point
/// @to_y: Y component of target point
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_draw_funcs_t to perform a "line-to" draw
/// operation.
///
/// Since: 4.0.0
typedef hb_draw_line_to_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, ffi.Float,
            ffi.Float, ffi.Pointer<ffi.Void>)>>;

/// hb_draw_quadratic_to_func_t:
/// @dfuncs: draw functions object
/// @draw_data: The data accompanying the draw functions
/// @st: current draw state
/// @control_x: X component of control point
/// @control_y: Y component of control point
/// @to_x: X component of target point
/// @to_y: Y component of target point
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_draw_funcs_t to perform a "quadratic-to" draw
/// operation.
///
/// Since: 4.0.0
typedef hb_draw_quadratic_to_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, ffi.Float,
            ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>>;

/// hb_draw_cubic_to_func_t:
/// @dfuncs: draw functions object
/// @draw_data: The data accompanying the draw functions
/// @st: current draw state
/// @control1_x: X component of first control point
/// @control1_y: Y component of first control point
/// @control2_x: X component of second control point
/// @control2_y: Y component of second control point
/// @to_x: X component of target point
/// @to_y: Y component of target point
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_draw_funcs_t to perform a "cubic-to" draw
/// operation.
///
/// Since: 4.0.0
typedef hb_draw_cubic_to_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, ffi.Float,
            ffi.Float, ffi.Float, ffi.Float, ffi.Float, ffi.Float, ffi.Pointer<ffi.Void>)>>;

/// hb_draw_close_path_func_t:
/// @dfuncs: draw functions object
/// @draw_data: The data accompanying the draw functions
/// @st: current draw state
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_draw_funcs_t to perform a "close-path" draw
/// operation.
///
/// Since: 4.0.0
typedef hb_draw_close_path_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<hb_draw_funcs_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_draw_state_t>, ffi.Pointer<ffi.Void>)>>;

class hb_font_t extends ffi.Opaque {}

class hb_font_funcs_t extends ffi.Opaque {}

/// hb_font_extents_t:
/// @ascender: The height of typographic ascenders.
/// @descender: The depth of typographic descenders.
/// @line_gap: The suggested line-spacing gap.
///
/// Font-wide extent values, measured in font units.
///
/// Note that typically @ascender is positive and @descender
/// negative, in coordinate systems that grow up.
class hb_font_extents_t extends ffi.Struct {
  @hb_position_t()
  external int ascender;

  @hb_position_t()
  external int descender;

  @hb_position_t()
  external int line_gap;

  @hb_position_t()
  external int reserved9;

  @hb_position_t()
  external int reserved8;

  @hb_position_t()
  external int reserved7;

  @hb_position_t()
  external int reserved6;

  @hb_position_t()
  external int reserved5;

  @hb_position_t()
  external int reserved4;

  @hb_position_t()
  external int reserved3;

  @hb_position_t()
  external int reserved2;

  @hb_position_t()
  external int reserved1;
}

/// hb_position_t:
///
/// Data type for holding a single coordinate value.
/// Contour points and other multi-dimensional data are
/// stored as tuples of #hb_position_t's.
typedef hb_position_t = ffi.Int32;

/// hb_glyph_extents_t:
/// @x_bearing: Distance from the x-origin to the left extremum of the glyph.
/// @y_bearing: Distance from the top extremum of the glyph to the y-origin.
/// @width: Distance from the left extremum of the glyph to the right extremum.
/// @height: Distance from the top extremum of the glyph to the bottom extremum.
///
/// Glyph extent values, measured in font units.
///
/// Note that @height is negative, in coordinate systems that grow up.
class hb_glyph_extents_t extends ffi.Struct {
  @hb_position_t()
  external int x_bearing;

  @hb_position_t()
  external int y_bearing;

  @hb_position_t()
  external int width;

  @hb_position_t()
  external int height;
}

/// hb_font_get_font_h_extents_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the extents for a font, for horizontal-direction
/// text segments. Extents must be returned in an #hb_glyph_extents output
/// parameter.
typedef hb_font_get_font_h_extents_func_t = hb_font_get_font_extents_func_t;

/// hb_font_get_font_extents_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @extents: (out): The font extents retrieved
/// @user_data: User data pointer passed by the caller
///
/// This method should retrieve the extents for a font.
typedef hb_font_get_font_extents_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(
            ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<hb_font_extents_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_font_v_extents_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the extents for a font, for vertical-direction
/// text segments. Extents must be returned in an #hb_glyph_extents output
/// parameter.
typedef hb_font_get_font_v_extents_func_t = hb_font_get_font_extents_func_t;

/// hb_font_get_nominal_glyph_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @unicode: The Unicode code point to query
/// @glyph: (out): The glyph ID retrieved
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the nominal glyph ID for a specified Unicode code
/// point. Glyph IDs must be returned in a #hb_codepoint_t output parameter.
///
/// Return value: `true` if data found, `false` otherwise
typedef hb_font_get_nominal_glyph_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, ffi.Pointer<hb_codepoint_t>,
            ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_nominal_glyphs_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @count: number of code points to query
/// @first_unicode: The first Unicode code point to query
/// @unicode_stride: The stride between successive code points
/// @first_glyph: (out): The first glyph ID retrieved
/// @glyph_stride: The stride between successive glyph IDs
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the nominal glyph IDs for a sequence of
/// Unicode code points. Glyph IDs must be returned in a #hb_codepoint_t
/// output parameter.
///
/// Return value: the number of code points processed
typedef hb_font_get_nominal_glyphs_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.UnsignedInt Function(
            ffi.Pointer<hb_font_t>,
            ffi.Pointer<ffi.Void>,
            ffi.UnsignedInt,
            ffi.Pointer<hb_codepoint_t>,
            ffi.UnsignedInt,
            ffi.Pointer<hb_codepoint_t>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_variation_glyph_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @unicode: The Unicode code point to query
/// @variation_selector: The  variation-selector code point to query
/// @glyph: (out): The glyph ID retrieved
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the glyph ID for a specified Unicode code point
/// followed by a specified Variation Selector code point. Glyph IDs must be
/// returned in a #hb_codepoint_t output parameter.
///
/// Return value: `true` if data found, `false` otherwise
typedef hb_font_get_variation_glyph_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, hb_codepoint_t,
            ffi.Pointer<hb_codepoint_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_h_advance_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the advance for a specified glyph, in
/// horizontal-direction text segments. Advances must be returned in
/// an #hb_position_t output parameter.
typedef hb_font_get_glyph_h_advance_func_t = hb_font_get_glyph_advance_func_t;

/// hb_font_get_glyph_advance_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @glyph: The glyph ID to query
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the advance for a specified glyph. The
/// method must return an #hb_position_t.
///
/// Return value: The advance of @glyph within @font
typedef hb_font_get_glyph_advance_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_position_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_v_advance_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the advance for a specified glyph, in
/// vertical-direction text segments. Advances must be returned in
/// an #hb_position_t output parameter.
typedef hb_font_get_glyph_v_advance_func_t = hb_font_get_glyph_advance_func_t;

/// hb_font_get_glyph_h_advances_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the advances for a sequence of glyphs, in
/// horizontal-direction text segments.
typedef hb_font_get_glyph_h_advances_func_t = hb_font_get_glyph_advances_func_t;

/// hb_font_get_glyph_advances_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @count: The number of glyph IDs in the sequence queried
/// @first_glyph: The first glyph ID to query
/// @glyph_stride: The stride between successive glyph IDs
/// @first_advance: (out): The first advance retrieved
/// @advance_stride: The stride between successive advances
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the advances for a sequence of glyphs.
typedef hb_font_get_glyph_advances_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, ffi.UnsignedInt, ffi.Pointer<hb_codepoint_t>,
            ffi.UnsignedInt, ffi.Pointer<hb_position_t>, ffi.UnsignedInt, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_v_advances_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the advances for a sequence of glyphs, in
/// vertical-direction text segments.
typedef hb_font_get_glyph_v_advances_func_t = hb_font_get_glyph_advances_func_t;

/// hb_font_get_glyph_h_origin_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the (X,Y) coordinates (in font units) of the
/// origin for a glyph, for horizontal-direction text segments. Each
/// coordinate must be returned in an #hb_position_t output parameter.
typedef hb_font_get_glyph_h_origin_func_t = hb_font_get_glyph_origin_func_t;

/// hb_font_get_glyph_origin_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @glyph: The glyph ID to query
/// @x: (out): The X coordinate of the origin
/// @y: (out): The Y coordinate of the origin
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the (X,Y) coordinates (in font units) of the
/// origin for a glyph. Each coordinate must be returned in an #hb_position_t
/// output parameter.
///
/// Return value: `true` if data found, `false` otherwise
typedef hb_font_get_glyph_origin_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, ffi.Pointer<hb_position_t>,
            ffi.Pointer<hb_position_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_v_origin_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the (X,Y) coordinates (in font units) of the
/// origin for a glyph, for vertical-direction text segments. Each coordinate
/// must be returned in an #hb_position_t output parameter.
typedef hb_font_get_glyph_v_origin_func_t = hb_font_get_glyph_origin_func_t;

/// hb_font_get_glyph_h_kerning_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the kerning-adjustment value for a glyph-pair in
/// the specified font, for horizontal text segments.
typedef hb_font_get_glyph_h_kerning_func_t = hb_font_get_glyph_kerning_func_t;

/// hb_font_get_glyph_kerning_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @first_glyph: The glyph ID of the first glyph in the glyph pair
/// @second_glyph: The glyph ID of the second glyph in the glyph pair
/// @user_data: User data pointer passed by the caller
///
/// This method should retrieve the kerning-adjustment value for a glyph-pair in
/// the specified font, for horizontal text segments.
typedef hb_font_get_glyph_kerning_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_position_t Function(
            ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, hb_codepoint_t, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_extents_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @glyph: The glyph ID to query
/// @extents: (out): The #hb_glyph_extents_t retrieved
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the extents for a specified glyph. Extents must be
/// returned in an #hb_glyph_extents output parameter.
///
/// Return value: `true` if data found, `false` otherwise
typedef hb_font_get_glyph_extents_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t,
            ffi.Pointer<hb_glyph_extents_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_contour_point_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @glyph: The glyph ID to query
/// @point_index: The contour-point index to query
/// @x: (out): The X value retrieved for the contour point
/// @y: (out): The Y value retrieved for the contour point
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the (X,Y) coordinates (in font units) for a
/// specified contour point in a glyph. Each coordinate must be returned as
/// an #hb_position_t output parameter.
///
/// Return value: `true` if data found, `false` otherwise
typedef hb_font_get_glyph_contour_point_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, ffi.UnsignedInt,
            ffi.Pointer<hb_position_t>, ffi.Pointer<hb_position_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_name_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @glyph: The glyph ID to query
/// @name: (out) (array length=size): Name string retrieved for the glyph ID
/// @size: Length of the glyph-name string retrieved
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the glyph name that corresponds to a
/// glyph ID. The name should be returned in a string output parameter.
///
/// Return value: `true` if data found, `false` otherwise
typedef hb_font_get_glyph_name_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_from_name_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @name: (array length=len): The name string to query
/// @len: The length of the name queried
/// @glyph: (out): The glyph ID retrieved
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the glyph ID that corresponds to a glyph-name
/// string.
///
/// Return value: `true` if data found, `false` otherwise
typedef hb_font_get_glyph_from_name_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Int,
            ffi.Pointer<hb_codepoint_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_shape_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @glyph: The glyph ID to query
/// @draw_funcs: The draw functions to send the shape data to
/// @draw_data: The data accompanying the draw functions
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// Since: 4.0.0
typedef hb_font_get_glyph_shape_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, ffi.Pointer<hb_draw_funcs_t>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

/// hb_glyph_info_t:
/// @codepoint: either a Unicode code point (before shaping) or a glyph index
/// (after shaping).
/// @cluster: the index of the character in the original text that corresponds
/// to this #hb_glyph_info_t, or whatever the client passes to
/// hb_buffer_add(). More than one #hb_glyph_info_t can have the same
/// @cluster value, if they resulted from the same character (e.g. one
/// to many glyph substitution), and when more than one character gets
/// merged in the same glyph (e.g. many to one glyph substitution) the
/// #hb_glyph_info_t will have the smallest cluster value of them.
/// By default some characters are merged into the same cluster
/// (e.g. combining marks have the same cluster as their bases)
/// even if they are separate glyphs, hb_buffer_set_cluster_level()
/// allow selecting more fine-grained cluster handling.
///
/// The #hb_glyph_info_t is the structure that holds information about the
/// glyphs and their relation to input text.
class hb_glyph_info_t extends ffi.Struct {
  @hb_codepoint_t()
  external int codepoint;

  @hb_mask_t()
  external int mask;

  @ffi.Uint32()
  external int cluster;

  external hb_var_int_t var1;

  external hb_var_int_t var2;
}

/// hb_mask_t:
///
/// Data type for bitmasks.
typedef hb_mask_t = ffi.Uint32;
typedef hb_var_int_t = _hb_var_int_t;

/// hb_glyph_flags_t:
/// @HB_GLYPH_FLAG_UNSAFE_TO_BREAK: Indicates that if input text is broken at the
/// beginning of the cluster this glyph is part of,
/// then both sides need to be re-shaped, as the
/// result might be different.
/// On the flip side, it means that when this
/// flag is not present, then it is safe to break
/// the glyph-run at the beginning of this
/// cluster, and the two sides will represent the
/// exact same result one would get if breaking
/// input text at the beginning of this cluster
/// and shaping the two sides separately.
/// This can be used to optimize paragraph
/// layout, by avoiding re-shaping of each line
/// after line-breaking.
/// @HB_GLYPH_FLAG_UNSAFE_TO_CONCAT: Indicates that if input text is changed on one
/// side of the beginning of the cluster this glyph
/// is part of, then the shaping results for the
/// other side might change.
/// Note that the absence of this flag will NOT by
/// itself mean that it IS safe to concat text.
/// Only two pieces of text both of which clear of
/// this flag can be concatenated safely.
/// This can be used to optimize paragraph
/// layout, by avoiding re-shaping of each line
/// after line-breaking, by limiting the
/// reshaping to a small piece around the
/// breaking positin only, even if the breaking
/// position carries the
/// #HB_GLYPH_FLAG_UNSAFE_TO_BREAK or when
/// hyphenation or other text transformation
/// happens at line-break position, in the following
/// way:
/// 1. Iterate back from the line-break position
/// until the first cluster start position that is
/// NOT unsafe-to-concat, 2. shape the segment from
/// there till the end of line, 3. check whether the
/// resulting glyph-run also is clear of the
/// unsafe-to-concat at its start-of-text position;
/// if it is, just splice it into place and the line
/// is shaped; If not, move on to a position further
/// back that is clear of unsafe-to-concat and retry
/// from there, and repeat.
/// At the start of next line a similar algorithm can
/// be implemented. That is: 1. Iterate forward from
/// the line-break position until the first cluster
/// start position that is NOT unsafe-to-concat, 2.
/// shape the segment from beginning of the line to
/// that position, 3. check whether the resulting
/// glyph-run also is clear of the unsafe-to-concat
/// at its end-of-text position; if it is, just splice
/// it into place and the beginning is shaped; If not,
/// move on to a position further forward that is clear
/// of unsafe-to-concat and retry up to there, and repeat.
/// A slight complication will arise in the
/// implementation of the algorithm above,
/// because while our buffer API has a way to
/// return flags for position corresponding to
/// start-of-text, there is currently no position
/// corresponding to end-of-text.  This limitation
/// can be alleviated by shaping more text than needed
/// and looking for unsafe-to-concat flag within text
/// clusters.
/// The #HB_GLYPH_FLAG_UNSAFE_TO_BREAK flag will
/// always imply this flag.
/// To use this flag, you must enable the buffer flag
/// @HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT during
/// shaping, otherwise the buffer flag will not be
/// reliably produced.
/// Since: 4.0.0
/// @HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL: In scripts that use elongation (Arabic,
/// Mongolian, Syriac, etc.), this flag signifies
/// that it is safe to insert a U+0640 TATWEEL
/// character before this cluster for elongation.
/// This flag does not determine the
/// script-specific elongation places, but only
/// when it is safe to do the elongation without
/// interrupting text shaping.
/// Since: 5.1.0
/// @HB_GLYPH_FLAG_DEFINED: All the currently defined flags.
///
/// Flags for #hb_glyph_info_t.
///
/// Since: 1.5.0
abstract class hb_glyph_flags_t {
  static const int HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 1;
  static const int HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = 2;
  static const int HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL = 4;
  static const int HB_GLYPH_FLAG_DEFINED = 7;
}

/// hb_glyph_position_t:
/// @x_advance: how much the line advances after drawing this glyph when setting
/// text in horizontal direction.
/// @y_advance: how much the line advances after drawing this glyph when setting
/// text in vertical direction.
/// @x_offset: how much the glyph moves on the X-axis before drawing it, this
/// should not affect how much the line advances.
/// @y_offset: how much the glyph moves on the Y-axis before drawing it, this
/// should not affect how much the line advances.
///
/// The #hb_glyph_position_t is the structure that holds the positions of the
/// glyph in both horizontal and vertical directions. All positions in
/// #hb_glyph_position_t are relative to the current point.
class hb_glyph_position_t extends ffi.Struct {
  @hb_position_t()
  external int x_advance;

  @hb_position_t()
  external int y_advance;

  @hb_position_t()
  external int x_offset;

  @hb_position_t()
  external int y_offset;

  external hb_var_int_t var1;
}

/// hb_segment_properties_t:
/// @direction: the #hb_direction_t of the buffer, see hb_buffer_set_direction().
/// @script: the #hb_script_t of the buffer, see hb_buffer_set_script().
/// @language: the #hb_language_t of the buffer, see hb_buffer_set_language().
///
/// The structure that holds various text properties of an #hb_buffer_t. Can be
/// set and retrieved using hb_buffer_set_segment_properties() and
/// hb_buffer_get_segment_properties(), respectively.
class hb_segment_properties_t extends ffi.Struct {
  @ffi.Int32()
  external int direction;

  @ffi.Int32()
  external int script;

  external hb_language_t language;

  external ffi.Pointer<ffi.Void> reserved1;

  external ffi.Pointer<ffi.Void> reserved2;
}

class hb_buffer_t extends ffi.Opaque {}

/// hb_buffer_content_type_t:
/// @HB_BUFFER_CONTENT_TYPE_INVALID: Initial value for new buffer.
/// @HB_BUFFER_CONTENT_TYPE_UNICODE: The buffer contains input characters (before shaping).
/// @HB_BUFFER_CONTENT_TYPE_GLYPHS: The buffer contains output glyphs (after shaping).
///
/// The type of #hb_buffer_t contents.
abstract class hb_buffer_content_type_t {
  static const int HB_BUFFER_CONTENT_TYPE_INVALID = 0;
  static const int HB_BUFFER_CONTENT_TYPE_UNICODE = 1;
  static const int HB_BUFFER_CONTENT_TYPE_GLYPHS = 2;
}

/// hb_buffer_flags_t:
/// @HB_BUFFER_FLAG_DEFAULT: the default buffer flag.
/// @HB_BUFFER_FLAG_BOT: flag indicating that special handling of the beginning
/// of text paragraph can be applied to this buffer. Should usually
/// be set, unless you are passing to the buffer only part
/// of the text without the full context.
/// @HB_BUFFER_FLAG_EOT: flag indicating that special handling of the end of text
/// paragraph can be applied to this buffer, similar to
/// @HB_BUFFER_FLAG_BOT.
/// @HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES:
/// flag indication that character with Default_Ignorable
/// Unicode property should use the corresponding glyph
/// from the font, instead of hiding them (done by
/// replacing them with the space glyph and zeroing the
/// advance width.)  This flag takes precedence over
/// @HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES.
/// @HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES:
/// flag indication that character with Default_Ignorable
/// Unicode property should be removed from glyph string
/// instead of hiding them (done by replacing them with the
/// space glyph and zeroing the advance width.)
/// @HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES takes
/// precedence over this flag. Since: 1.8.0
/// @HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE:
/// flag indicating that a dotted circle should
/// not be inserted in the rendering of incorrect
/// character sequences (such at <0905 093E>). Since: 2.4.0
/// @HB_BUFFER_FLAG_VERIFY:
/// flag indicating that the hb_shape() call and its variants
/// should perform various verification processes on the results
/// of the shaping operation on the buffer.  If the verification
/// fails, then either a buffer message is sent, if a message
/// handler is installed on the buffer, or a message is written
/// to standard error.  In either case, the shaping result might
/// be modified to show the failed output. Since: 3.4.0
/// @HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT:
/// flag indicating that the @HB_GLYPH_FLAG_UNSAFE_TO_CONCAT
/// glyph-flag should be produced by the shaper. By default
/// it will not be produced since it incurs a cost. Since: 4.0.0
/// @HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL:
/// flag indicating that the @HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL
/// glyph-flag should be produced by the shaper. By default
/// it will not be produced. Since: 5.1.0
/// @HB_BUFFER_FLAG_DEFINED: All currently defined flags: Since: 4.4.0
///
/// Flags for #hb_buffer_t.
///
/// Since: 0.9.20
abstract class hb_buffer_flags_t {
  static const int HB_BUFFER_FLAG_DEFAULT = 0;
  static const int HB_BUFFER_FLAG_BOT = 1;
  static const int HB_BUFFER_FLAG_EOT = 2;
  static const int HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4;
  static const int HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 8;
  static const int HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 16;
  static const int HB_BUFFER_FLAG_VERIFY = 32;
  static const int HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = 64;
  static const int HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL = 128;
  static const int HB_BUFFER_FLAG_DEFINED = 255;
}

/// hb_buffer_cluster_level_t:
/// @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES: Return cluster values grouped by graphemes into
/// monotone order.
/// @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS: Return cluster values grouped into monotone order.
/// @HB_BUFFER_CLUSTER_LEVEL_CHARACTERS: Don't group cluster values.
/// @HB_BUFFER_CLUSTER_LEVEL_DEFAULT: Default cluster level,
/// equal to @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES.
///
/// Data type for holding HarfBuzz's clustering behavior options. The cluster level
/// dictates one aspect of how HarfBuzz will treat non-base characters
/// during shaping.
///
/// In @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES, non-base
/// characters are merged into the cluster of the base character that precedes them.
///
/// In @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS, non-base characters are initially
/// assigned their own cluster values, which are not merged into preceding base
/// clusters. This allows HarfBuzz to perform additional operations like reorder
/// sequences of adjacent marks.
///
/// @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES is the default, because it maintains
/// backward compatibility with older versions of HarfBuzz. New client programs that
/// do not need to maintain such backward compatibility are recommended to use
/// @HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS instead of the default.
///
/// Since: 0.9.42
abstract class hb_buffer_cluster_level_t {
  static const int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0;
  static const int HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1;
  static const int HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2;
  static const int HB_BUFFER_CLUSTER_LEVEL_DEFAULT = 0;
}

/// hb_buffer_serialize_flags_t:
/// @HB_BUFFER_SERIALIZE_FLAG_DEFAULT: serialize glyph names, clusters and positions.
/// @HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS: do not serialize glyph cluster.
/// @HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS: do not serialize glyph position information.
/// @HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES: do no serialize glyph name.
/// @HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS: serialize glyph extents.
/// @HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS: serialize glyph flags. Since: 1.5.0
/// @HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES: do not serialize glyph advances,
/// glyph offsets will reflect absolute glyph positions. Since: 1.8.0
/// @HB_BUFFER_SERIALIZE_FLAG_DEFINED: All currently defined flags. Since: 4.4.0
///
/// Flags that control what glyph information are serialized in hb_buffer_serialize_glyphs().
///
/// Since: 0.9.20
abstract class hb_buffer_serialize_flags_t {
  static const int HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4;
  static const int HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8;
  static const int HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 16;
  static const int HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 32;
  static const int HB_BUFFER_SERIALIZE_FLAG_DEFINED = 63;
}

/// hb_buffer_serialize_format_t:
/// @HB_BUFFER_SERIALIZE_FORMAT_TEXT: a human-readable, plain text format.
/// @HB_BUFFER_SERIALIZE_FORMAT_JSON: a machine-readable JSON format.
/// @HB_BUFFER_SERIALIZE_FORMAT_INVALID: invalid format.
///
/// The buffer serialization and de-serialization format used in
/// hb_buffer_serialize_glyphs() and hb_buffer_deserialize_glyphs().
///
/// Since: 0.9.2
abstract class hb_buffer_serialize_format_t {
  static const int HB_BUFFER_SERIALIZE_FORMAT_TEXT = 1413830740;
  static const int HB_BUFFER_SERIALIZE_FORMAT_JSON = 1246973774;
  static const int HB_BUFFER_SERIALIZE_FORMAT_INVALID = 0;
}

/// hb_buffer_diff_flags_t:
/// @HB_BUFFER_DIFF_FLAG_EQUAL: equal buffers.
/// @HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH: buffers with different
/// #hb_buffer_content_type_t.
/// @HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH: buffers with differing length.
/// @HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT: `.notdef` glyph is present in the
/// reference buffer.
/// @HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT: dotted circle glyph is present
/// in the reference buffer.
/// @HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH: difference in #hb_glyph_info_t.codepoint
/// @HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH: difference in #hb_glyph_info_t.cluster
/// @HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH: difference in #hb_glyph_flags_t.
/// @HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH: difference in #hb_glyph_position_t.
///
/// Flags from comparing two #hb_buffer_t's.
///
/// Buffer with different #hb_buffer_content_type_t cannot be meaningfully
/// compared in any further detail.
///
/// For buffers with differing length, the per-glyph comparison is not
/// attempted, though we do still scan reference buffer for dotted circle and
/// `.notdef` glyphs.
///
/// If the buffers have the same length, we compare them glyph-by-glyph and
/// report which aspect(s) of the glyph info/position are different.
///
/// Since: 1.5.0
abstract class hb_buffer_diff_flags_t {
  static const int HB_BUFFER_DIFF_FLAG_EQUAL = 0;
  static const int HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 1;
  static const int HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 2;
  static const int HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 4;
  static const int HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 8;
  static const int HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 16;
  static const int HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 32;
  static const int HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 64;
  static const int HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 128;
}

/// hb_buffer_message_func_t:
/// @buffer: An #hb_buffer_t to work upon
/// @font: The #hb_font_t the @buffer is shaped with
/// @message: `NULL`-terminated message passed to the function
/// @user_data: User data pointer passed by the caller
///
/// A callback method for #hb_buffer_t. The method gets called with the
/// #hb_buffer_t it was set on, the #hb_font_t the buffer is shaped with and a
/// message describing what step of the shaping process will be performed.
/// Returning `false` from this method will skip this shaping step and move to
/// the next one.
///
/// Return value: `true` to perform the shaping step, `false` to skip it.
///
/// Since: 1.1.3
typedef hb_buffer_message_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(
            ffi.Pointer<hb_buffer_t>, ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_func_t:
/// @font: #hb_font_t to work upon
/// @font_data: @font user data pointer
/// @unicode: The Unicode code point to query
/// @variation_selector: The  variation-selector code point to query
/// @glyph: (out): The glyph ID retrieved
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the glyph ID for a specified Unicode code point
/// font, with an optional variation selector.
///
/// Return value: `true` if data found, `false` otherwise
/// Deprecated: 1.2.3
typedef hb_font_get_glyph_func_t = ffi.Pointer<
    ffi.NativeFunction<
        hb_bool_t Function(ffi.Pointer<hb_font_t>, ffi.Pointer<ffi.Void>, hb_codepoint_t, hb_codepoint_t,
            ffi.Pointer<hb_codepoint_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_unicode_eastasian_width_func_t:
/// @ufuncs: A Unicode-functions structure
/// @unicode: The code point to query
/// @user_data: User data pointer passed by the caller
///
/// A virtual method for the #hb_unicode_funcs_t structure.
///
/// Deprecated: 2.0.0
typedef hb_unicode_eastasian_width_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.UnsignedInt Function(ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<ffi.Void>)>>;

/// hb_unicode_decompose_compatibility_func_t:
/// @ufuncs: a Unicode function structure
/// @u: codepoint to decompose
/// @decomposed: address of codepoint array (of length #HB_UNICODE_MAX_DECOMPOSITION_LEN) to write decomposition into
/// @user_data: user data pointer as passed to hb_unicode_funcs_set_decompose_compatibility_func()
///
/// Fully decompose @u to its Unicode compatibility decomposition. The codepoints of the decomposition will be written to @decomposed.
/// The complete length of the decomposition will be returned.
///
/// If @u has no compatibility decomposition, zero should be returned.
///
/// The Unicode standard guarantees that a buffer of length #HB_UNICODE_MAX_DECOMPOSITION_LEN codepoints will always be sufficient for any
/// compatibility decomposition plus an terminating value of 0.  Consequently, @decompose must be allocated by the caller to be at least this length.  Implementations
/// of this function type must ensure that they do not write past the provided array.
///
/// Return value: number of codepoints in the full compatibility decomposition of @u, or 0 if no decomposition available.
///
/// Deprecated: 2.0.0
typedef hb_unicode_decompose_compatibility_func_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.UnsignedInt Function(
            ffi.Pointer<hb_unicode_funcs_t>, hb_codepoint_t, ffi.Pointer<hb_codepoint_t>, ffi.Pointer<ffi.Void>)>>;

/// hb_font_get_glyph_v_kerning_func_t:
///
/// A virtual method for the #hb_font_funcs_t of an #hb_font_t object.
///
/// This method should retrieve the kerning-adjustment value for a glyph-pair in
/// the specified font, for vertical text segments.
typedef hb_font_get_glyph_v_kerning_func_t = hb_font_get_glyph_kerning_func_t;

class hb_map_t extends ffi.Opaque {}

class hb_shape_plan_t extends ffi.Opaque {}

/// hb_style_tag_t:
/// @HB_STYLE_TAG_ITALIC: Used to vary between non-italic and italic.
/// A value of 0 can be interpreted as "Roman" (non-italic); a value of 1 can
/// be interpreted as (fully) italic.
/// @HB_STYLE_TAG_OPTICAL_SIZE: Used to vary design to suit different text sizes.
/// Non-zero. Values can be interpreted as text size, in points.
/// @HB_STYLE_TAG_SLANT_ANGLE: Used to vary between upright and slanted text. Values
/// must be greater than -90 and less than +90. Values can be interpreted as
/// the angle, in counter-clockwise degrees, of oblique slant from whatever the
/// designer considers to be upright for that font design. Typical right-leaning
/// Italic fonts have a negative slant angle (typically around -12)
/// @HB_STYLE_TAG_SLANT_RATIO: same as @HB_STYLE_TAG_SLANT_ANGLE expression as ratio.
/// Typical right-leaning Italic fonts have a positive slant ratio (typically around 0.2)
/// @HB_STYLE_TAG_WIDTH: Used to vary width of text from narrower to wider.
/// Non-zero. Values can be interpreted as a percentage of whatever the font
/// designer considers “normal width” for that font design.
/// @HB_STYLE_TAG_WEIGHT: Used to vary stroke thicknesses or other design details
/// to give variation from lighter to blacker. Values can be interpreted in direct
/// comparison to values for usWeightClass in the OS/2 table,
/// or the CSS font-weight property.
///
/// Defined by [OpenType Design-Variation Axis Tag Registry](https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg).
///
/// Since: 3.0.0
abstract class hb_style_tag_t {
  static const int HB_STYLE_TAG_ITALIC = 1769234796;
  static const int HB_STYLE_TAG_OPTICAL_SIZE = 1869640570;
  static const int HB_STYLE_TAG_SLANT_ANGLE = 1936486004;
  static const int HB_STYLE_TAG_SLANT_RATIO = 1399615092;
  static const int HB_STYLE_TAG_WIDTH = 2003072104;
  static const int HB_STYLE_TAG_WEIGHT = 2003265652;
  static const int _HB_STYLE_TAG_MAX_VALUE = 2147483647;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int HB_TAG_NONE = 0;

const int HB_TAG_MAX = 4294967295;

const int HB_TAG_MAX_SIGNED = 2147483647;

const int HB_FEATURE_GLOBAL_START = 0;

const int HB_FEATURE_GLOBAL_END = 4294967295;

const int HB_UNICODE_MAX = 1114111;

const int HB_SET_VALUE_INVALID = 4294967295;

const int HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT = 65533;

const int HB_SCRIPT_CANADIAN_ABORIGINAL = 1130458739;

const int HB_BUFFER_FLAGS_DEFAULT = 0;

const int HB_BUFFER_SERIALIZE_FLAGS_DEFAULT = 0;

const int HB_UNICODE_MAX_DECOMPOSITION_LEN = 19;

const int HB_MAP_VALUE_INVALID = 4294967295;

const int HB_VERSION_MAJOR = 6;

const int HB_VERSION_MINOR = 0;

const int HB_VERSION_MICRO = 0;

const String HB_VERSION_STRING = '6.0.0';
